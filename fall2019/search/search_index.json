{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to IST256 ! Course Syllabus: Click for Syllabus","title":"Home"},{"location":"#welcome-to-ist256","text":"Course Syllabus: Click for Syllabus","title":"Welcome to IST256 !"},{"location":"blackboard/","text":"Grades are maintained in the University Blackboard System https://blackboard.syracuse.edu window.location = 'https://blackboard.syracuse.edu';","title":"Gradebook"},{"location":"jupyterhub/","text":"Grades are maintained in the University Blackboard System https://jupyterhub.ischool.syr.edu window.location = 'https://jupyterhub.ischool.syr.edu';","title":"Jupyterhub"},{"location":"project/","text":"Project Project Objective Your primary objectives for the project are to create something novel, useful and innovative with code. It should clearly and explicitly demonstrate what you have learned in this course and show you are capable of acquiring new programming skills independently. We don\u2019t want to limit your idea, but we will help you reign it in so that all student teams are writing about the same amount of code. If your idea is simple enough we will expect a full implementation, if it\u2019s complex then we\u2019ll ask for a manifestation of your idea as a minimum viable product. It should be a proof of concept demonstrating how the bigger system might work. The types of project you propose are up to you. Whatever you do should be novel, useful and innovative. It should not reproduce functionality in other systems or services. It can extend them or combine multiple sytems / services into something new. Project Guidelines The project has the following strict guidelines, for logistical / record-keeping purposes. You must work in teams of 2 to 3 people You must execute some version of the idea you proposed. Once your idea and team are set they cannot be altered. Penalty for not adhering to the guidelines: grade of ZERO on the project. Project Phases The project is worth 120 points. These points are divided into 3 phases. Due dates for each phase are posted on the syllabus. Phase 1: The Proposal Your project proposal is worth 12 points. In a nutshell its the formalization of your project idea and team. What we expect from you: You will hand in the following as per the instructions on Blackboard: A list of your 2 or 3 team members. You should include times you are available to meet weekly and an agreed upon list of meeting times. A summary of your project idea. Think: If I could program anything I would make and why? Think BIG! We understand you might not be able to implement some of your ideas, but don\u2019t let that stop you from trying. Remember to keep the Project Objectives in consideration. Focus on the problem, not the solution. Don\u2019t worry about how you will do it, instead focus on what you will do. Evidence through research that your idea is novel / useful / innovative and/or feasible. This ensures you\u2019ve thought your idea through. We expect you to provide sources from the web or library. What you can expect from us: You will be assigned a Faculty mentor. Your mentor\u2019s role will be to: Provide general feedback for your idea. Use their expertise to help you refine / focus / simplify / improve your project idea. Provide guidance as to what you should research / learn so that you are in the best position to execute your idea. Act as your point person for project inquiries for the semester. Grade your project proposal. Phase 2: The Plan Your project plan is worth 24 points. The plan should cover in detail how you will complete your project, and provide evidence that your project is feasible as proposed by your team and amended by your Faculty mentor. What we expect from you: You will hand in the following as per the instructions on Blackboard. A list of systems / API\u2019s / Python packages / services / etc. you require to complete your project Code examples you\u2019ve written which demonstrate your team understands how to use these systems / API\u2019s / Python packages / Services / data sets / etc. These should be in your project git repository. Your program\u2019s design: Inputs and Outputs of your program, and a high level algorithm for your program. We expect the feedback provided by your Faculty mentor was taken into consideration. An explanation how each team member has contributed to the project design. Individual team members not contributing will receive a lower grade. What you can expect from us: Your Faculty mentor will: Review your project plan and consider it a list of what to expect on demo day. Grade your project plan and provide feedback as to maximize your score on the rest of the project. Phase 3: The Rest The remaining 84 points are divided up into 3 section each is due on demo day, which is during our final exam block and posted on the syllabus. Demo day is worth 24 points Video submission is worth 24 points Code submission is worth 36 points What we expect from you: Demo day (24 points) is a science-fair like project showcase. Visitors from campus will walk around and ask you to explain your work and demonstrate your code. It is expected that your team will: Create and print a poster, no larger than 11x17 which provides a visual representation of how your project works. The purpose of the poster is to draw passers-by to your project. It is expected your poster will be of professional quality and represent your project\u2019s functionality well to non programmers. Provide an explanation and demo of their project. Your explanation should not focus on the code, but instead explain what problem your project solves and how it solves it. Your demo should be interactive; visitors should be able to engage and participate in your demo. All teams members are present and participatory on demo day. Individuals with minimal contributions will receive a lower grade. You are expected to produce two videos for your project (24 points). It is expected your team will: Produce a demo day pitch, no more than 3 minutes long. It should NOT be a video from the actual demo day! It should be rehearsed/recorded at another time and include your presentation and code demo. We should be able to see the poster, and the program execution as part of the video demo. Have one team mate operate the camera while the other does the pitch. Produce a demo day reflection. This video should include each project member. You should each introduce yourselves and then each take no more than 1 minute per team member to explain what you learned from your project experience. Provide links to your videos online. Do not upload the videos to Blackboard. You are expected to hand in all project artifacts including your code (36 points). It is expected your team will: Hand in all code. It is expected that your code will execute, be well written in a modular fashion, use aptly named objects, handle errors, and use the programming style you were taught in class. Write code which matches your project plan as submitted in phase 2. If the code is different we expect an updated design. Hand in a digital copy of your project poster as a PDF or JPG. A brief explanation how each team member has contributed to the final project phase. Individuals with minimal contributions will recieve a lower grade. Put all items in a github repository for easy access by your Faculty mentor. What you can expect from us: Your Faculty mentor will: Attend you live pitch and program demo from demo day. Review all project artifacts to determine your grade.","title":"Project"},{"location":"project/#project","text":"","title":"Project"},{"location":"project/#project-objective","text":"Your primary objectives for the project are to create something novel, useful and innovative with code. It should clearly and explicitly demonstrate what you have learned in this course and show you are capable of acquiring new programming skills independently. We don\u2019t want to limit your idea, but we will help you reign it in so that all student teams are writing about the same amount of code. If your idea is simple enough we will expect a full implementation, if it\u2019s complex then we\u2019ll ask for a manifestation of your idea as a minimum viable product. It should be a proof of concept demonstrating how the bigger system might work. The types of project you propose are up to you. Whatever you do should be novel, useful and innovative. It should not reproduce functionality in other systems or services. It can extend them or combine multiple sytems / services into something new.","title":"Project Objective"},{"location":"project/#project-guidelines","text":"The project has the following strict guidelines, for logistical / record-keeping purposes. You must work in teams of 2 to 3 people You must execute some version of the idea you proposed. Once your idea and team are set they cannot be altered. Penalty for not adhering to the guidelines: grade of ZERO on the project.","title":"Project Guidelines"},{"location":"project/#project-phases","text":"The project is worth 120 points. These points are divided into 3 phases. Due dates for each phase are posted on the syllabus.","title":"Project Phases"},{"location":"project/#phase-1-the-proposal","text":"Your project proposal is worth 12 points. In a nutshell its the formalization of your project idea and team.","title":"Phase 1: The Proposal"},{"location":"project/#what-we-expect-from-you","text":"You will hand in the following as per the instructions on Blackboard: A list of your 2 or 3 team members. You should include times you are available to meet weekly and an agreed upon list of meeting times. A summary of your project idea. Think: If I could program anything I would make and why? Think BIG! We understand you might not be able to implement some of your ideas, but don\u2019t let that stop you from trying. Remember to keep the Project Objectives in consideration. Focus on the problem, not the solution. Don\u2019t worry about how you will do it, instead focus on what you will do. Evidence through research that your idea is novel / useful / innovative and/or feasible. This ensures you\u2019ve thought your idea through. We expect you to provide sources from the web or library.","title":"What we expect from you:"},{"location":"project/#what-you-can-expect-from-us","text":"You will be assigned a Faculty mentor. Your mentor\u2019s role will be to: Provide general feedback for your idea. Use their expertise to help you refine / focus / simplify / improve your project idea. Provide guidance as to what you should research / learn so that you are in the best position to execute your idea. Act as your point person for project inquiries for the semester. Grade your project proposal.","title":"What you can expect from us:"},{"location":"project/#phase-2-the-plan","text":"Your project plan is worth 24 points. The plan should cover in detail how you will complete your project, and provide evidence that your project is feasible as proposed by your team and amended by your Faculty mentor.","title":"Phase 2: The Plan"},{"location":"project/#what-we-expect-from-you_1","text":"You will hand in the following as per the instructions on Blackboard. A list of systems / API\u2019s / Python packages / services / etc. you require to complete your project Code examples you\u2019ve written which demonstrate your team understands how to use these systems / API\u2019s / Python packages / Services / data sets / etc. These should be in your project git repository. Your program\u2019s design: Inputs and Outputs of your program, and a high level algorithm for your program. We expect the feedback provided by your Faculty mentor was taken into consideration. An explanation how each team member has contributed to the project design. Individual team members not contributing will receive a lower grade.","title":"What we expect from you:"},{"location":"project/#what-you-can-expect-from-us_1","text":"Your Faculty mentor will: Review your project plan and consider it a list of what to expect on demo day. Grade your project plan and provide feedback as to maximize your score on the rest of the project.","title":"What you can expect from us:"},{"location":"project/#phase-3-the-rest","text":"The remaining 84 points are divided up into 3 section each is due on demo day, which is during our final exam block and posted on the syllabus. Demo day is worth 24 points Video submission is worth 24 points Code submission is worth 36 points","title":"Phase 3: The Rest"},{"location":"project/#what-we-expect-from-you_2","text":"Demo day (24 points) is a science-fair like project showcase. Visitors from campus will walk around and ask you to explain your work and demonstrate your code. It is expected that your team will: Create and print a poster, no larger than 11x17 which provides a visual representation of how your project works. The purpose of the poster is to draw passers-by to your project. It is expected your poster will be of professional quality and represent your project\u2019s functionality well to non programmers. Provide an explanation and demo of their project. Your explanation should not focus on the code, but instead explain what problem your project solves and how it solves it. Your demo should be interactive; visitors should be able to engage and participate in your demo. All teams members are present and participatory on demo day. Individuals with minimal contributions will receive a lower grade. You are expected to produce two videos for your project (24 points). It is expected your team will: Produce a demo day pitch, no more than 3 minutes long. It should NOT be a video from the actual demo day! It should be rehearsed/recorded at another time and include your presentation and code demo. We should be able to see the poster, and the program execution as part of the video demo. Have one team mate operate the camera while the other does the pitch. Produce a demo day reflection. This video should include each project member. You should each introduce yourselves and then each take no more than 1 minute per team member to explain what you learned from your project experience. Provide links to your videos online. Do not upload the videos to Blackboard. You are expected to hand in all project artifacts including your code (36 points). It is expected your team will: Hand in all code. It is expected that your code will execute, be well written in a modular fashion, use aptly named objects, handle errors, and use the programming style you were taught in class. Write code which matches your project plan as submitted in phase 2. If the code is different we expect an updated design. Hand in a digital copy of your project poster as a PDF or JPG. A brief explanation how each team member has contributed to the final project phase. Individuals with minimal contributions will recieve a lower grade. Put all items in a github repository for easy access by your Faculty mentor.","title":"What we expect from you:"},{"location":"project/#what-you-can-expect-from-us_2","text":"Your Faculty mentor will: Attend you live pitch and program demo from demo day. Review all project artifacts to determine your grade.","title":"What you can expect from us:"},{"location":"setup/","text":"Course Setup This course requires students to use a variety of free, cloud-based tools for programming in Python, completing labs, and submitting work. This document outlines a step-by-step process of setting up your programming environment, which because it uses the cloud will be accessible from anywhere you have a web browser and access to the internet. Procedure at a Glance The setup process should take you no more than 15 minutes to complete. Complete these steps in the following order: Signup for a GitHub Account. You will use GitHub and your GitHub account to turn in work you complete in the course Setup Github Classroom. Github classroom distributes the lecture slides, code samples, labs, and homework assignments used in this course to your GitHub account. Configure Git Within JupyterHub In this final step, you will clone the code from your GitHub account into the JupyterHub environment. In case you\u2019d like to watch a video of the setup process: TODO: Make a youtube video showing how to do the setup, embed here. Detailed Steps 1. Signup For a Github Account Github is a cloud repository for source code. Before You Begin Make sure you know your NetID and SU Email address. You will need to set a username for GitHub. Please use yournetid -su . For example, my Github username would be mafudge-su . You will need to set a Github password. Please do not use your NetID password. You will need to remember this password for future steps. Setup Procedure Go to https://github.com/ and click on the Sign up button in the upper-right. THE PROFESSORS NEED TO KNOW ITS YOU! In the Username field enter your netid -su for example my GitHub username is mafudge-su . In the Email Address field enter your @syr.edu email, for example, I would enter mafudge@syr.edu . In the password field, enter anything you want. You should NOT use your NetID password here. NOTE: Remember your password - You\u2019ll need it for later! Click Create Acccount to move on to the next step. Select the free plan. You will not need any other plan. click Continue . Now go to your @syr.edu email, and look for an email from GitHub. Click on the link in the email to verify your account . Now help your professors out! Change your avatar to be a photo of yourself: https://help.github.com/articles/setting-your-profile-picture/ Congratulations! You have a Github account! 2. Setup Github Classroom Github classroom allows professors to share code with students using Github. Before You Begin Have your GitHub username and password handy. Setup Procedure Go to the https://github.com/ website and sign in with your GitHub with the account and password. Click on this GitHub Classroom invite link here: https://classroom.github.com/a/qWFcZxtN A Page will ask you to accept the assignment. The part highlighted in yellow will match your GitHub username. Please note the name of the assignment will more than likely begin with the year and semester in it. Click Accept this assignment You might be asked to accept some permissions. Make sure to accept them. After that you will then see this confirmation screen. Click the link at the bottom of the message to go to your repository page. (The link following the text Your assignment has been created here: ) Your repository page will look like this: As usual, the highlighted portions should match your GitHub username su-*yournetid *. You\u2019ll need your Github repository Url, which you can get by following this procedure: From the repository page (where you left off), click on the clone or download button: Copy the link under Clone with HTTPS . 3. Configure Git within JupyterHub JupyterHub is a web-based Python programming environment. Before You Begin Have the following information handy: Your GitHub username and password. Your GitHub Classroom repository Url (copy it from the previous setup). Setup Procedure Login to JupyterHub with your NetID and Password https://jupyterhub.ischool.syr.edu/ . Click The New button in the upper-right and select Terminal from the menu. When the terminal launches you should see a command line with the prompt jovyan@jupyter-*yournetid*:~$ Execute the following setup script and follow the on-screen instructions. Type: source /opt/git-setup.sh and then press ENTER / RETURN When the script completes you will see the following information: Script Complete. Your Git Configuration: user.name=[[Your Name]] user.email=[[Your Email]] core.repositoryformatversion=0 core.filemode=true core.bare=false core.logallrefupdates=true remote.origin.url=[[Your Github Repository URL]] remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* branch.master.remote=origin branch.master.merge=refs/heads/master credential.helper=store Of course [[Your Name]] will match your name you entered into the script, [[Your Email]] will be your SU email address, and [[Your Github Repository URL]] will be your Github Repository Url. The last line should say credential.helper=store , too. NOTE: If something goes wrong (you enter a bad password, or mis-type the URL) no worries! You can always run the script again!","title":"Course Setup"},{"location":"setup/#course-setup","text":"This course requires students to use a variety of free, cloud-based tools for programming in Python, completing labs, and submitting work. This document outlines a step-by-step process of setting up your programming environment, which because it uses the cloud will be accessible from anywhere you have a web browser and access to the internet.","title":"Course Setup"},{"location":"setup/#procedure-at-a-glance","text":"The setup process should take you no more than 15 minutes to complete. Complete these steps in the following order: Signup for a GitHub Account. You will use GitHub and your GitHub account to turn in work you complete in the course Setup Github Classroom. Github classroom distributes the lecture slides, code samples, labs, and homework assignments used in this course to your GitHub account. Configure Git Within JupyterHub In this final step, you will clone the code from your GitHub account into the JupyterHub environment. In case you\u2019d like to watch a video of the setup process: TODO: Make a youtube video showing how to do the setup, embed here.","title":"Procedure at a Glance"},{"location":"setup/#detailed-steps","text":"","title":"Detailed Steps"},{"location":"setup/#1-signup-for-a-github-account","text":"Github is a cloud repository for source code.","title":"1. Signup For a Github Account"},{"location":"setup/#before-you-begin","text":"Make sure you know your NetID and SU Email address. You will need to set a username for GitHub. Please use yournetid -su . For example, my Github username would be mafudge-su . You will need to set a Github password. Please do not use your NetID password. You will need to remember this password for future steps.","title":"Before You Begin"},{"location":"setup/#setup-procedure","text":"Go to https://github.com/ and click on the Sign up button in the upper-right. THE PROFESSORS NEED TO KNOW ITS YOU! In the Username field enter your netid -su for example my GitHub username is mafudge-su . In the Email Address field enter your @syr.edu email, for example, I would enter mafudge@syr.edu . In the password field, enter anything you want. You should NOT use your NetID password here. NOTE: Remember your password - You\u2019ll need it for later! Click Create Acccount to move on to the next step. Select the free plan. You will not need any other plan. click Continue . Now go to your @syr.edu email, and look for an email from GitHub. Click on the link in the email to verify your account . Now help your professors out! Change your avatar to be a photo of yourself: https://help.github.com/articles/setting-your-profile-picture/ Congratulations! You have a Github account!","title":"Setup Procedure"},{"location":"setup/#2-setup-github-classroom","text":"Github classroom allows professors to share code with students using Github.","title":"2. Setup Github Classroom"},{"location":"setup/#before-you-begin_1","text":"Have your GitHub username and password handy.","title":"Before You Begin"},{"location":"setup/#setup-procedure_1","text":"Go to the https://github.com/ website and sign in with your GitHub with the account and password. Click on this GitHub Classroom invite link here: https://classroom.github.com/a/qWFcZxtN A Page will ask you to accept the assignment. The part highlighted in yellow will match your GitHub username. Please note the name of the assignment will more than likely begin with the year and semester in it. Click Accept this assignment You might be asked to accept some permissions. Make sure to accept them. After that you will then see this confirmation screen. Click the link at the bottom of the message to go to your repository page. (The link following the text Your assignment has been created here: ) Your repository page will look like this: As usual, the highlighted portions should match your GitHub username su-*yournetid *. You\u2019ll need your Github repository Url, which you can get by following this procedure: From the repository page (where you left off), click on the clone or download button: Copy the link under Clone with HTTPS .","title":"Setup Procedure"},{"location":"setup/#3-configure-git-within-jupyterhub","text":"JupyterHub is a web-based Python programming environment.","title":"3. Configure Git within JupyterHub"},{"location":"setup/#before-you-begin_2","text":"Have the following information handy: Your GitHub username and password. Your GitHub Classroom repository Url (copy it from the previous setup).","title":"Before You Begin"},{"location":"setup/#setup-procedure_2","text":"Login to JupyterHub with your NetID and Password https://jupyterhub.ischool.syr.edu/ . Click The New button in the upper-right and select Terminal from the menu. When the terminal launches you should see a command line with the prompt jovyan@jupyter-*yournetid*:~$ Execute the following setup script and follow the on-screen instructions. Type: source /opt/git-setup.sh and then press ENTER / RETURN When the script completes you will see the following information: Script Complete. Your Git Configuration: user.name=[[Your Name]] user.email=[[Your Email]] core.repositoryformatversion=0 core.filemode=true core.bare=false core.logallrefupdates=true remote.origin.url=[[Your Github Repository URL]] remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* branch.master.remote=origin branch.master.merge=refs/heads/master credential.helper=store Of course [[Your Name]] will match your name you entered into the script, [[Your Email]] will be your SU email address, and [[Your Github Repository URL]] will be your Github Repository Url. The last line should say credential.helper=store , too. NOTE: If something goes wrong (you enter a bad password, or mis-type the URL) no worries! You can always run the script again!","title":"Setup Procedure"},{"location":"syllabus/","text":"IST256 Syllabus Spring 2020 Course Information IST256: Applications Programming for information Systems Audience This course is for students who are new to programming yet desire to learn how programming applies to our everyday lives. Catalog Description Structured program design, development testing, implementation, and documentation of common information system applications using structured programming languages. Lectures and laboratory. Description Due to the prevalence of technology in our lives, learning to program has become the critical skill of the 21st century. Students will learn practical applications of computer programming such as how to automate tasks, manipulate data and solve problems applicable to almost any academic discipline. Learning Outcomes At the end of the course, students will be able to: Analyze complex problems by thinking computationally and systematically. Solve practical, real-world problems using a modern computer programming language.. Demonstrate the ability to read, write, discuss and code confidently. Understand how to code in teams, collaborate with others and manage source code. Acquire new programming knowledge independently. Large Group and Small Group Sections Every student in IST256 is assigned to the main section M001, then one of the recitation sections. You are required to attend both sections every week. Every student in IST256 is assigned to the main section M001, then one of the recitation sections. You are required to attend both sections every week. Section Class # Type Instructor Email Meeting Day/Time Location M001 37703 Large Group Michael Fudge mafudge@syr.edu Mondays 3:45pm - 5:05pm Whitman 007 M002 37890 Small Group Angela Ramnarine-Rieks akadajis@syr.edu Wednesdays 12:45pm - 2:05pm Hinds Hall 011 M004 37730 Small Group Laurie Ferger laferger@syr.edu Thursdays 9:30am - 10:50am Hinds Hall 011 M005 37731 Small Group Wade Stringer wdstring@syr.edu Thursdays 5:00pm - 6:20pm Hinds Hall 111 M006 37732 Small Group Wade Stringer wdstring@syr.edu Wednesdays 9:30pm - 10:50pm Hinds Hall 011 M007 37738 Small Group Angela Ramnarine-Rieks auramnar@syr.edu Wednesdays 3:45pm - 5:05pm Hinds Hall 021 M009 37824 Small Group Laurie Ferger laferger@syr.edu Wednesdays 3:45pm - 5:05pm Hinds Hall 018 Office Hours You are welcome to come to our office hours without an appointment. You may visit any professor\u2019s office hours, but are strongly encouraged to visit your recitation instructor when seeking help. If you require a meeting outside of office hours, please contact us for an appointment. Office hours are for asking questions, clearing up doubts and misunderstandings in the the coursework and getting advice / guidance on labs and homework. Please to not expect to be tutored during office hours, and please do not work on your homework during our office hours. Instructor Office Hours Michael Fudge TBD Laurie Ferger TBD Angela Ramnarine-Rieks TBD Wade Stringer TBD Course Resources Textbooks The following texts are required : Programming in Python 3 an Interactive Textbook https://zybooks.zyante.com . Must be purchased online or through the SU bookstore. Student cost is $58. Your use of this book counts towards your grade. Python for Everybody: Exploring Data In Python 3 by Charles Severance. https://www.py4e.com/book . Free. Here are some additional free textbook recommendations . Consider these supplemental resources: Automate the Boring Stuff with Python: Practical Programming for Total Beginners by Al Sweigert https://automatetheboringstuff.com/ . A Byte of Python , https://www.gitbook.com/book/swaroopch/byte-of-python/details Dive into Python , Mark Pilgrim http://getpython3.com/diveintopython3/ Learn python the hard way , Zed Shaw http://learnpythonthehardway.org/book/ Python Practice Book , Anad Chitpothu http://anandology.com/python-practice-book/index.html Activating Your Zybook Go to: https://learn.zybooks.com/ Create Your Account. Make sure to sign up with your @syr.edu email address. When prompted for the Zybook code, enter SYRIST256FudgeSpring2020 You can purchase the Zybook online with a credit card, or purchase through the bookstore and receive an access code. YouTube! Video Playlists IST256.tv: Our Course Videos These are the official videos for the course. They show you how to setup the course materials, inspire you to learn programming, and walk through our End-To-End examples. https://www.youtube.com/watch?list=PLyRiRUsTyUXjwYRGM8vzusbc50zmUyNEG&v=xfBWk4nw440 Python for Everybody This videos supplement Charles Severance\u2019s \u201cPython for Everyone\u201d book. There are a lot of helpful videos here including video equivalents of his textbook chapters and in-depth walk-throughs of the code examples from his text book. These videos will help you master Python! https://www.youtube.com/watch?list=PLlRFEj9H3Oj7Bp8-DfGpfAfDBiblRfl5p&v=fvhNadKjE8g Bring Your Own Device This course uses the BYOD (Bring Your Own Device) model. For Large Group you need a device to ask and answer questions. This can be a smartphone or laptop (Mac, Windows, or Chromebook). For Small Group you need a device to write code. This should be a laptop computer (Mac, Windows or Chromebook). Methods of Evaluation Requirements This course uses a well thought out mix of individual, group, in-class and out-of-class instruments to assess your knowledge acquisition. A variety of techniques are used to cater to students of different learning styles and assess the course learning outcomes. Assessment Name Blackboard Gradebook Learning Outcomes Quantity Points Each Points Total Exams E1 - E3 2,3 3 (2 best count) 120 240 Project P1 - P3 1,2,3,4,5 1 (Split in 3 Phases) 120 120 Zybook Participation Z01 - Z10 1,2,3 10 (all 10 count) 6 60 Class Coding Labs L01 - L13 1,2,3,4 13 (12 best count) 5 60 Homework H01 - H13 1,2,3,4,5 13 (12 best count) 10 120 TOTAL 600 Exams Exams evaluate your recall and understanding of the course material, as well as your ability to apply it to new situations. There will be three exams in the course. Your best two exam scores count towards your final grade, offering you an opportunity to achieve mastery over the material. You must attempt all 3 exams to qualify to have one of your exam scores dropped. Due to the nature of the subject matter, examinations are naturally cumulative. Exams dates are posted on the syllabus class schedule. It is your responsibility to be present for each exam on the date posted. There are no re-issues or make-ups, as this is logistically difficult to accomplish fairly. Exams are issued on paper as multiple choice. You may be asked to write a program by hand. Exams are closed-book. You may not use notes, a computer or any aids (calculator, phone, etc\u2026) Exam dates are posted on the course schedule. Specific Exam Policies: Exam dates posted on the class schedule. Exams are issued at the beginning of class and are 30 to 45 minutes long. If you show up late you will receive less time to complete the exam. If you show up after the exam completes, you\u2019ve missed the exam. In general there are NO MAKE UP EXAMS without a university-approved reason such as illness or family emergencies. These must be documented by the university. You may request to take the exam at another time. The request must be made at least 1 week in advance of the exam date. You must have a legitimate reason for this request AND prof. Fudge must approve it. If your exam is approved you will suffer a 50% penalty for not taking the exam on the scheduled date. This is out of inconvenience of scheduling a proctor for the exam. Project The goal of the project is to demonstrate your ability to program something novel, useful and innovative in Python. The project is divided into 3 phases; due dates are posted on the course schedule. Late submissions are accepted but will receive a grade of zero. The project is a group assignment, teams of no more than 3 people. Details for the project can be found under the Project heading on the course website. Zybook Participation The Zybook https://learn.zybooks.com/ interactive textbook is an excellent resource for learning Python. As such, your use of this resource will be graded. For most lessons, relevant Zybook chapters are assigned on the course schedule . For each assigned chapter, you are expected to complete the reading and participation activities by 3PM Monday. Your grade is based on the amount of the chapter you complete before the deadline: 100% == 6 points, 90% == 5 points, 80% == 4 points, 70% == 3 points, 60% == 2 points, 50% == 1 point, under 50% == 0 points. The Zybook website records your interactions so it is trivial to see how much of the chapter you have completed. Only the readings and participation activities are graded. The challenge activities and labs are optional. Class Coding Labs Each week there will be an lab programming activity. This activity must be completed between the lecture and recitation sections. It will be discussed in the recitation. Complete means you must have the code committed and pushed to GitHub by 11:59pm the day before your scheduled recitation. You may work alone, but are encouraged to work alongside a partner as you complete the lab. If you work with another, you should both complete the lab individually. If you are not in attendance at recitation you will not receive full credit for the class coding lab. You are awarded up to 5 points for the lab. You are given one \u201cFree Pass\u201d, meaning you have one incomplete lab without penalty. Homework Practice makes perfect. Each week you will be assigned several homework to complete outside of class. These homework assignments will take several hours to complete. This is by design. Practice makes perfect. Homework are individual assignments . You can collaborate on strategy but you must must work alone on the assignment. You must be able to explain the code you write, or it will be considered an academic integrity violation. The homework is due by the end of the week\u2019s lesson. Saturday by 11:59pm. You must commit your code and push it to GitHub before the due date. Homework is evaluated based on the following criteria: What the problem attempted? Effort made to start the homework assignment. Was the problem analysis thought out? Identified inputs and outputs, including sources and targets. Outlined a process which explains code flow in pseudo code \u2013 not python. Does the written code execute? Program runs without error. Does the code solve the problem? In addition does it handle edge cases and bad input when explicitly directed to do so? Is the code well written? Easy to understand, modular uses functions for code reuse and readability? Are python objects aptly named? No unnecessary code, or code not pertinent to the problem at hand? You must satisfy all 5 criteria to receive a full 10 points for the homework. Late homework or homework edited after the due date receives a 0. You are given one \u201cFree Pass\u201d, meaning your lowest homework score is dropped. Grading Scale For Your Final Grade We use the following grading scale for translating your total points earned into a letter grade to be submitted to the University registrar. Student Achievement Total Points Earned Registrar Grade Mastery 570 - 600 A 540 - 569 A- Satisfactory 510 - 539 B+ 480 - 509 B 450 - 479 B- Low Passing 420 - 449 C+ 390 - 419 C 360 - 389 C- Unsatisfactory 300 - 359 D 0 - 299 F Course Specific Policies Due Dates Due dates for all assessments are posted in Blackboard https://blackboard.syr.edu . Please consider these dates the official due dates . Due dates are also posted to the IST256 website for reference. In general late work is not accepted. Please get your work in on time so we can get is back to you in a timely manner. Extra Credit No extra credit is offered in this course. There are enough opportunities to improve your grade through dropped exams, homework, and labs. Make the most of these opportunities! Tutoring We encourage you to attend the free small-group tutoring sessions for IST256 available through the Center for Learning and Student Success (CLASS). Several tutoring sessions for IST256 will be offered each week. The tutors will be trained undergraduate and graduate students who have access to our course information and can help you study efficiently and effectively. Tutoring sessions will be geared to each week\u2019s lessons. Visit http://class.syr.edu to learn when and where sessions meet and how to reserve a spot. You may also drop in if space is available. Course Honor Code The course honor code represents our commitment to Academic Integrity in a programming course. I drafted the class honor code to avoid academic negligence - situations where students are unaware that their actions are actually a form of cheating. Our honor code remedies this problem by clearly stating the expectations of Academic Integrity for this course. It states: All work is my own . Answers on all student work, assignments (problem sets, projects, papers, homework, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) are my own individual work (except where collaboration is explicitly permitted). In the case where collaboration is permitted I will only collaborate within my team. I will not share answers. I will not make answers (either my own or the professor\u2019s) to work, assignments (problem sets, projects, papers, homework, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) available to anyone else in or out of class. This includes posting them on the web or sharing them in test banks. I will not misrepresent my ability. I will not engage in any activity which misrepresents or falsifies my knowledge of the subject matter and therefore improves my grade dishonestly. This includes unsanctioned test aids and copying homework. I will give credit. I will always pay attribution to my sources, and not misrepresent the works of others as my own. If you get code from the web, you must cite it like you would any source in an academic paper. I accept the honor code and its consequences. I understand and accept that that all work I submit is subject to the honor code, and if I violate this honor code I my instructor is obligated to report me to the University\u2019s office of Academic Integrity. Sanctions for Violators of Academic Integrity We take academic integrity very seriously. You should too. All academic integrity violations will be reported to the university office of academic integrity. You don\u2019t want that on your record, so don\u2019t do it. In addition, if you copy a homework assignment or lab, you will receive a grade of zero. In addition, if you cheat on an exam or plagiarize the final project with result in an automatic grade of F in the course. Bottom line: When in doubt, ask. Effort, Class Participation and Attendance Attendance, class participation and your overall effort may factor into your final grade. While these factors are not actively graded, they are monitored. We notice students who are attending, being helpful to others, putting in effort, actively participating and those who do not. The course instructors have a final say as to whether your final grade will be altered based on your efforts. Students with exemplary effort, attendance or participation may be moved UP one letter grade. For example if you finish with a 565/600 or an A- you might be moved up to an A. Reasons for being moved up are solely at the instructor\u2019s discretion. Examples include but are not limited to: perfect attendance, noticeable improvement in grades throughout the semester, being a good mentor / coach to other students by helping in recitations and answering student questions on gitter. Students with poor effort, attendance or participation may be moved DOWN one letter grade. For example if you finish with a 565/600, or an A-, you might be moved down to a B+. Reasons for being moved down is usually poor attendance (3 or more absences in the semester), but is not limited to only attendance. If your final grade is adjusted UP or DOWN, you will receive a written notification of justification from an instructor. Requests to have your grade adjusted will be ignored. Please let your actions speak for themselves. Syracuse University Policies Syracuse University has a variety of other policies designed to guarantee that students live and study in a community respectful of their needs and those of fellow students. Some of the most important of these concerns: Diversity and Disability (ensuring that students are aware of their rights and responsibilities in a diverse, inclusive, accessible, bias-free campus community) can be found here, at https://www.syracuse.edu/life/accessibilitydiversity/ Religious Observances Notification and Policy (steps to follow to request accommodations for the observance of religious holidays) can be found here, at: http://supolicies.syr.edu/studs/religious_observance.htm Orange SUccess (tools to access a variety of SU resources, including ways to communicate with advisors and faculty members) can be found here, at: http://orangesuccess.syr.edu/getting-started-2/ Disability-Related Accommodations Syracuse University values diversity and inclusion; we are committed to a climate of mutual respect and full participation. There may be aspects of the instruction or design of this course that result in barriers to your inclusion and full participation in this course. I invite any student to meet with me to discuss strategies and/or accommodations (academic adjustments) that may be essential to your success and to collaborate with the Office of Disability Services (ODS) in this process. If you would like to discuss disability-accommodations or register with ODS, please visit their website at http://disabilityservices.syr.edu Please call (315) 443-4498 or email disabilityservices@syr.edu for more detailed information. ODS is responsible for coordinating disability-related academic accommodations and will work with the student to develop an access plan. Since academic accommodations may require early planning and generally are not provided retroactively, please contact ODS as soon as possible to begin this process. University Attendance Policy Attendance in classes is expected in all courses at Syracuse University. Students are expected to arrive on campus in time to attend the first meeting of all classes for which they are registered. Students who do not attend classes starting with the first scheduled meeting may be academically withdrawn as not making progress toward degree by failure to attend. Instructors set course-specific policies for absences from scheduled class meetings in their syllabi. It is a federal requirement that students who do not attend or cease to attend a class to be reported at the time of determination by the faculty. Faculty should use \u201cESPR\u201d and \u201cMSPR\u201d in Orange Success to alert the Office of the Registrar and the Office of Financial Aid. A grade of NA is posted to any student for whom the Never Attended flag is raised in Orange SUccess. More information regarding Orange SUccess can be found here, at: http://orangesuccess.syr.edu/getting-started-2/ Students should also review the University\u2019s religious observance policy and make the required arrangements at the beginning of each semester Academic Integrity Policy Syracuse University\u2019s Academic Integrity Policy reflects the high value that we, as a university community, place on honesty in academic work. The policy defines our expectations for academic honesty and holds students accountable for the integrity of all work they submit. Students should understand that it is their responsibility to learn about course-specific expectations, as well as about university-wide academic integrity expectations. The policy governs appropriate citation and use of sources, the integrity of work submitted in exams and assignments, and the veracity of signatures on attendance sheets and other verification of participation in class activities. The policy also prohibits students from submitting the same work in more than one class without receiving written authorization in advance from both instructors. Under the policy, students found in violation are subject to grade sanctions determined by the course instructor and non-grade sanctions determined by the School or College where the course is offered as described in the Violation and Sanction Classification Rubric. SU students are required to read an online summary of the University\u2019s academic integrity expectations and provide an electronic signature agreeing to abide by them twice a year during pre-term check-in on MySlice. Discrimination or Harassment The University does not discriminate and prohibits harassment or discrimination related to any protected category including creed, ethnicity, citizenship, sexual orientation, national origin, sex, gender, pregnancy, disability, marital status, age, race, color, veteran status, military status, religion, sexual orientation, domestic violence status, genetic information, gender identity, gender expression or perceived gender. Any complaint of discrimination or harassment related to any of these protected bases should be reported to Sheila Johnson-Willis, the University\u2019s Chief Equal Opportunity & Title IX Officer. She is responsible for coordinating compliance efforts under various laws including Titles VI, VII, IX and Section 504 of the Rehabilitation Act. She can be contacted at Equal Opportunity, Inclusion, and Resolution Services, 005 Steele Hall, Syracuse University, Syracuse, NY 13244-1120; by email: titleix@syr.edu ; or by telephone: 315-443-0211. Course evaluations There will be an end of course evaluation for you to complete this term. This evaluation will be conducted online and is entirely anonymous. You will receive an official notification in your email account with the evaluation website link and your passcode. Please take the time and fill out this evaluation as your feedback and support of this assessment effort is very much appreciated. The school carefully reviews ratings and comments that you submit, and these factor into decisions about course, program and instructor development. Use of Blackboard This course involves the use of Syracuse University\u2019s Blackboard system as an online tool. The environment is composed of a number of elements that will help you be successful in both your current coursework and your lifelong learning opportunities. To access Blackboard, http://blackboard.syr.edu use your Syracuse University NetID & Password. This specific course will appear in your course list. To search for answers to your Blackboard questions, visit the Answers self-help knowledge https://answers.syr.edu/display/blackboard01/Blackboard . If you have problems logging in or need assistance with Blackboard, contact the ITS Service Center at: help@syr.edu or 315.443.2677. The Syracuse University Blackboard support team will assist you. Course Schedule Dates Topic Details / What\u2019s Due? 1/13 - 1/18 Lesson 00: Course Introduction Lecture: Course Introduction Recitation: Introductions and Review Programming Walkthrough 1/19 - 1/25 Lesson 01: Introduction to Programming Lecture: No Class - Labor Day Recitation: Review Programming Walkthrough 1/26 - 2/1 Lesson 02: Introduction to Python 2/2/ - 2/8 Lesson 03: Variables and Types 2/9 - 2/15 Lesson 04: Conditionals 2/16 - 2/22 Lesson 05: Iterations E1: Exam 1 Wed 3/11 - Thu 3/12 (In Small Group) 2/23 - 2/29 Lesson 06: Functions 3/1 - 3/7 Lesson 07: Strings 3/9 - 3/14 Lesson 08: Files E2: Exam 2 Wed 3/11 - Thu 3/12 (In Small Group) 3/15 - 3/21 Spring Break - No Classes 3/22 - 3/28 Lesson 09: Lists 3/29 - 4/4 Lesson 10: Dictionaries 4/5 - 4/11 Lesson 11: Web Services and API\u2019s 4/12 - 4/18 Lesson 12: Data Analysis P1: Project Proposals Due Fri Nov 22 (In Blackboard) 4/19 - 4/25 Lesson 13: Visualization P2: Project Plans Due Fri Dec 6 (In Blackboard) E3: Exam 3 Wed 12/4 - Fri 12/6 (In Recitation) 4/26 - 5/2 E3: Exam 3 (in Large Group 4/27) 5/8 Project Demo Day! (1) Fri, Dec 13, 8:00am - \u00ad10:00am Hinds Hall P3: Project Due Fri Dec 13 (Demo in Hinds, Submission In Blackboard) (1) Project Demo Day! Occurs during our scheduled final exam block. If you want full credit on your project, you must attend. Due Every week: Diagnostic is due the day before large group meeting on Monday Lab is due before your recitation Homework is due Saturday","title":"Syllabus"},{"location":"syllabus/#ist256-syllabus-spring-2020","text":"","title":"IST256 Syllabus Spring 2020"},{"location":"syllabus/#course-information","text":"IST256: Applications Programming for information Systems","title":"Course Information"},{"location":"syllabus/#audience","text":"This course is for students who are new to programming yet desire to learn how programming applies to our everyday lives.","title":"Audience"},{"location":"syllabus/#catalog-description","text":"Structured program design, development testing, implementation, and documentation of common information system applications using structured programming languages. Lectures and laboratory.","title":"Catalog Description"},{"location":"syllabus/#description","text":"Due to the prevalence of technology in our lives, learning to program has become the critical skill of the 21st century. Students will learn practical applications of computer programming such as how to automate tasks, manipulate data and solve problems applicable to almost any academic discipline.","title":"Description"},{"location":"syllabus/#learning-outcomes","text":"At the end of the course, students will be able to: Analyze complex problems by thinking computationally and systematically. Solve practical, real-world problems using a modern computer programming language.. Demonstrate the ability to read, write, discuss and code confidently. Understand how to code in teams, collaborate with others and manage source code. Acquire new programming knowledge independently.","title":"Learning Outcomes"},{"location":"syllabus/#large-group-and-small-group-sections","text":"Every student in IST256 is assigned to the main section M001, then one of the recitation sections. You are required to attend both sections every week. Every student in IST256 is assigned to the main section M001, then one of the recitation sections. You are required to attend both sections every week. Section Class # Type Instructor Email Meeting Day/Time Location M001 37703 Large Group Michael Fudge mafudge@syr.edu Mondays 3:45pm - 5:05pm Whitman 007 M002 37890 Small Group Angela Ramnarine-Rieks akadajis@syr.edu Wednesdays 12:45pm - 2:05pm Hinds Hall 011 M004 37730 Small Group Laurie Ferger laferger@syr.edu Thursdays 9:30am - 10:50am Hinds Hall 011 M005 37731 Small Group Wade Stringer wdstring@syr.edu Thursdays 5:00pm - 6:20pm Hinds Hall 111 M006 37732 Small Group Wade Stringer wdstring@syr.edu Wednesdays 9:30pm - 10:50pm Hinds Hall 011 M007 37738 Small Group Angela Ramnarine-Rieks auramnar@syr.edu Wednesdays 3:45pm - 5:05pm Hinds Hall 021 M009 37824 Small Group Laurie Ferger laferger@syr.edu Wednesdays 3:45pm - 5:05pm Hinds Hall 018","title":"Large Group and Small Group Sections"},{"location":"syllabus/#office-hours","text":"You are welcome to come to our office hours without an appointment. You may visit any professor\u2019s office hours, but are strongly encouraged to visit your recitation instructor when seeking help. If you require a meeting outside of office hours, please contact us for an appointment. Office hours are for asking questions, clearing up doubts and misunderstandings in the the coursework and getting advice / guidance on labs and homework. Please to not expect to be tutored during office hours, and please do not work on your homework during our office hours. Instructor Office Hours Michael Fudge TBD Laurie Ferger TBD Angela Ramnarine-Rieks TBD Wade Stringer TBD","title":"Office Hours"},{"location":"syllabus/#course-resources","text":"","title":"Course Resources"},{"location":"syllabus/#textbooks","text":"The following texts are required : Programming in Python 3 an Interactive Textbook https://zybooks.zyante.com . Must be purchased online or through the SU bookstore. Student cost is $58. Your use of this book counts towards your grade. Python for Everybody: Exploring Data In Python 3 by Charles Severance. https://www.py4e.com/book . Free. Here are some additional free textbook recommendations . Consider these supplemental resources: Automate the Boring Stuff with Python: Practical Programming for Total Beginners by Al Sweigert https://automatetheboringstuff.com/ . A Byte of Python , https://www.gitbook.com/book/swaroopch/byte-of-python/details Dive into Python , Mark Pilgrim http://getpython3.com/diveintopython3/ Learn python the hard way , Zed Shaw http://learnpythonthehardway.org/book/ Python Practice Book , Anad Chitpothu http://anandology.com/python-practice-book/index.html","title":"Textbooks"},{"location":"syllabus/#activating-your-zybook","text":"Go to: https://learn.zybooks.com/ Create Your Account. Make sure to sign up with your @syr.edu email address. When prompted for the Zybook code, enter SYRIST256FudgeSpring2020 You can purchase the Zybook online with a credit card, or purchase through the bookstore and receive an access code.","title":"Activating Your Zybook"},{"location":"syllabus/#youtube-video-playlists","text":"","title":"YouTube! Video Playlists"},{"location":"syllabus/#ist256tv-our-course-videos","text":"These are the official videos for the course. They show you how to setup the course materials, inspire you to learn programming, and walk through our End-To-End examples. https://www.youtube.com/watch?list=PLyRiRUsTyUXjwYRGM8vzusbc50zmUyNEG&v=xfBWk4nw440","title":"IST256.tv: Our Course Videos"},{"location":"syllabus/#python-for-everybody","text":"This videos supplement Charles Severance\u2019s \u201cPython for Everyone\u201d book. There are a lot of helpful videos here including video equivalents of his textbook chapters and in-depth walk-throughs of the code examples from his text book. These videos will help you master Python! https://www.youtube.com/watch?list=PLlRFEj9H3Oj7Bp8-DfGpfAfDBiblRfl5p&v=fvhNadKjE8g","title":"Python for Everybody"},{"location":"syllabus/#bring-your-own-device","text":"This course uses the BYOD (Bring Your Own Device) model. For Large Group you need a device to ask and answer questions. This can be a smartphone or laptop (Mac, Windows, or Chromebook). For Small Group you need a device to write code. This should be a laptop computer (Mac, Windows or Chromebook).","title":"Bring Your Own Device"},{"location":"syllabus/#methods-of-evaluation","text":"","title":"Methods of Evaluation"},{"location":"syllabus/#requirements","text":"This course uses a well thought out mix of individual, group, in-class and out-of-class instruments to assess your knowledge acquisition. A variety of techniques are used to cater to students of different learning styles and assess the course learning outcomes. Assessment Name Blackboard Gradebook Learning Outcomes Quantity Points Each Points Total Exams E1 - E3 2,3 3 (2 best count) 120 240 Project P1 - P3 1,2,3,4,5 1 (Split in 3 Phases) 120 120 Zybook Participation Z01 - Z10 1,2,3 10 (all 10 count) 6 60 Class Coding Labs L01 - L13 1,2,3,4 13 (12 best count) 5 60 Homework H01 - H13 1,2,3,4,5 13 (12 best count) 10 120 TOTAL 600","title":"Requirements"},{"location":"syllabus/#exams","text":"Exams evaluate your recall and understanding of the course material, as well as your ability to apply it to new situations. There will be three exams in the course. Your best two exam scores count towards your final grade, offering you an opportunity to achieve mastery over the material. You must attempt all 3 exams to qualify to have one of your exam scores dropped. Due to the nature of the subject matter, examinations are naturally cumulative. Exams dates are posted on the syllabus class schedule. It is your responsibility to be present for each exam on the date posted. There are no re-issues or make-ups, as this is logistically difficult to accomplish fairly. Exams are issued on paper as multiple choice. You may be asked to write a program by hand. Exams are closed-book. You may not use notes, a computer or any aids (calculator, phone, etc\u2026) Exam dates are posted on the course schedule.","title":"Exams"},{"location":"syllabus/#specific-exam-policies","text":"Exam dates posted on the class schedule. Exams are issued at the beginning of class and are 30 to 45 minutes long. If you show up late you will receive less time to complete the exam. If you show up after the exam completes, you\u2019ve missed the exam. In general there are NO MAKE UP EXAMS without a university-approved reason such as illness or family emergencies. These must be documented by the university. You may request to take the exam at another time. The request must be made at least 1 week in advance of the exam date. You must have a legitimate reason for this request AND prof. Fudge must approve it. If your exam is approved you will suffer a 50% penalty for not taking the exam on the scheduled date. This is out of inconvenience of scheduling a proctor for the exam.","title":"Specific Exam Policies:"},{"location":"syllabus/#project","text":"The goal of the project is to demonstrate your ability to program something novel, useful and innovative in Python. The project is divided into 3 phases; due dates are posted on the course schedule. Late submissions are accepted but will receive a grade of zero. The project is a group assignment, teams of no more than 3 people. Details for the project can be found under the Project heading on the course website.","title":"Project"},{"location":"syllabus/#zybook-participation","text":"The Zybook https://learn.zybooks.com/ interactive textbook is an excellent resource for learning Python. As such, your use of this resource will be graded. For most lessons, relevant Zybook chapters are assigned on the course schedule . For each assigned chapter, you are expected to complete the reading and participation activities by 3PM Monday. Your grade is based on the amount of the chapter you complete before the deadline: 100% == 6 points, 90% == 5 points, 80% == 4 points, 70% == 3 points, 60% == 2 points, 50% == 1 point, under 50% == 0 points. The Zybook website records your interactions so it is trivial to see how much of the chapter you have completed. Only the readings and participation activities are graded. The challenge activities and labs are optional.","title":"Zybook Participation"},{"location":"syllabus/#class-coding-labs","text":"Each week there will be an lab programming activity. This activity must be completed between the lecture and recitation sections. It will be discussed in the recitation. Complete means you must have the code committed and pushed to GitHub by 11:59pm the day before your scheduled recitation. You may work alone, but are encouraged to work alongside a partner as you complete the lab. If you work with another, you should both complete the lab individually. If you are not in attendance at recitation you will not receive full credit for the class coding lab. You are awarded up to 5 points for the lab. You are given one \u201cFree Pass\u201d, meaning you have one incomplete lab without penalty.","title":"Class Coding Labs"},{"location":"syllabus/#homework","text":"Practice makes perfect. Each week you will be assigned several homework to complete outside of class. These homework assignments will take several hours to complete. This is by design. Practice makes perfect. Homework are individual assignments . You can collaborate on strategy but you must must work alone on the assignment. You must be able to explain the code you write, or it will be considered an academic integrity violation. The homework is due by the end of the week\u2019s lesson. Saturday by 11:59pm. You must commit your code and push it to GitHub before the due date. Homework is evaluated based on the following criteria: What the problem attempted? Effort made to start the homework assignment. Was the problem analysis thought out? Identified inputs and outputs, including sources and targets. Outlined a process which explains code flow in pseudo code \u2013 not python. Does the written code execute? Program runs without error. Does the code solve the problem? In addition does it handle edge cases and bad input when explicitly directed to do so? Is the code well written? Easy to understand, modular uses functions for code reuse and readability? Are python objects aptly named? No unnecessary code, or code not pertinent to the problem at hand? You must satisfy all 5 criteria to receive a full 10 points for the homework. Late homework or homework edited after the due date receives a 0. You are given one \u201cFree Pass\u201d, meaning your lowest homework score is dropped.","title":"Homework"},{"location":"syllabus/#grading-scale-for-your-final-grade","text":"We use the following grading scale for translating your total points earned into a letter grade to be submitted to the University registrar. Student Achievement Total Points Earned Registrar Grade Mastery 570 - 600 A 540 - 569 A- Satisfactory 510 - 539 B+ 480 - 509 B 450 - 479 B- Low Passing 420 - 449 C+ 390 - 419 C 360 - 389 C- Unsatisfactory 300 - 359 D 0 - 299 F","title":"Grading Scale For Your Final Grade"},{"location":"syllabus/#course-specific-policies","text":"","title":"Course Specific Policies"},{"location":"syllabus/#due-dates","text":"Due dates for all assessments are posted in Blackboard https://blackboard.syr.edu . Please consider these dates the official due dates . Due dates are also posted to the IST256 website for reference. In general late work is not accepted. Please get your work in on time so we can get is back to you in a timely manner.","title":"Due Dates"},{"location":"syllabus/#extra-credit","text":"No extra credit is offered in this course. There are enough opportunities to improve your grade through dropped exams, homework, and labs. Make the most of these opportunities!","title":"Extra Credit"},{"location":"syllabus/#tutoring","text":"We encourage you to attend the free small-group tutoring sessions for IST256 available through the Center for Learning and Student Success (CLASS). Several tutoring sessions for IST256 will be offered each week. The tutors will be trained undergraduate and graduate students who have access to our course information and can help you study efficiently and effectively. Tutoring sessions will be geared to each week\u2019s lessons. Visit http://class.syr.edu to learn when and where sessions meet and how to reserve a spot. You may also drop in if space is available.","title":"Tutoring"},{"location":"syllabus/#course-honor-code","text":"The course honor code represents our commitment to Academic Integrity in a programming course. I drafted the class honor code to avoid academic negligence - situations where students are unaware that their actions are actually a form of cheating. Our honor code remedies this problem by clearly stating the expectations of Academic Integrity for this course. It states: All work is my own . Answers on all student work, assignments (problem sets, projects, papers, homework, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) are my own individual work (except where collaboration is explicitly permitted). In the case where collaboration is permitted I will only collaborate within my team. I will not share answers. I will not make answers (either my own or the professor\u2019s) to work, assignments (problem sets, projects, papers, homework, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) available to anyone else in or out of class. This includes posting them on the web or sharing them in test banks. I will not misrepresent my ability. I will not engage in any activity which misrepresents or falsifies my knowledge of the subject matter and therefore improves my grade dishonestly. This includes unsanctioned test aids and copying homework. I will give credit. I will always pay attribution to my sources, and not misrepresent the works of others as my own. If you get code from the web, you must cite it like you would any source in an academic paper. I accept the honor code and its consequences. I understand and accept that that all work I submit is subject to the honor code, and if I violate this honor code I my instructor is obligated to report me to the University\u2019s office of Academic Integrity.","title":"Course Honor Code"},{"location":"syllabus/#sanctions-for-violators-of-academic-integrity","text":"We take academic integrity very seriously. You should too. All academic integrity violations will be reported to the university office of academic integrity. You don\u2019t want that on your record, so don\u2019t do it. In addition, if you copy a homework assignment or lab, you will receive a grade of zero. In addition, if you cheat on an exam or plagiarize the final project with result in an automatic grade of F in the course. Bottom line: When in doubt, ask.","title":"Sanctions for Violators of Academic Integrity"},{"location":"syllabus/#effort-class-participation-and-attendance","text":"Attendance, class participation and your overall effort may factor into your final grade. While these factors are not actively graded, they are monitored. We notice students who are attending, being helpful to others, putting in effort, actively participating and those who do not. The course instructors have a final say as to whether your final grade will be altered based on your efforts. Students with exemplary effort, attendance or participation may be moved UP one letter grade. For example if you finish with a 565/600 or an A- you might be moved up to an A. Reasons for being moved up are solely at the instructor\u2019s discretion. Examples include but are not limited to: perfect attendance, noticeable improvement in grades throughout the semester, being a good mentor / coach to other students by helping in recitations and answering student questions on gitter. Students with poor effort, attendance or participation may be moved DOWN one letter grade. For example if you finish with a 565/600, or an A-, you might be moved down to a B+. Reasons for being moved down is usually poor attendance (3 or more absences in the semester), but is not limited to only attendance. If your final grade is adjusted UP or DOWN, you will receive a written notification of justification from an instructor. Requests to have your grade adjusted will be ignored. Please let your actions speak for themselves.","title":"Effort, Class Participation and Attendance"},{"location":"syllabus/#syracuse-university-policies","text":"Syracuse University has a variety of other policies designed to guarantee that students live and study in a community respectful of their needs and those of fellow students. Some of the most important of these concerns: Diversity and Disability (ensuring that students are aware of their rights and responsibilities in a diverse, inclusive, accessible, bias-free campus community) can be found here, at https://www.syracuse.edu/life/accessibilitydiversity/ Religious Observances Notification and Policy (steps to follow to request accommodations for the observance of religious holidays) can be found here, at: http://supolicies.syr.edu/studs/religious_observance.htm Orange SUccess (tools to access a variety of SU resources, including ways to communicate with advisors and faculty members) can be found here, at: http://orangesuccess.syr.edu/getting-started-2/","title":"Syracuse University Policies"},{"location":"syllabus/#disability-related-accommodations","text":"Syracuse University values diversity and inclusion; we are committed to a climate of mutual respect and full participation. There may be aspects of the instruction or design of this course that result in barriers to your inclusion and full participation in this course. I invite any student to meet with me to discuss strategies and/or accommodations (academic adjustments) that may be essential to your success and to collaborate with the Office of Disability Services (ODS) in this process. If you would like to discuss disability-accommodations or register with ODS, please visit their website at http://disabilityservices.syr.edu Please call (315) 443-4498 or email disabilityservices@syr.edu for more detailed information. ODS is responsible for coordinating disability-related academic accommodations and will work with the student to develop an access plan. Since academic accommodations may require early planning and generally are not provided retroactively, please contact ODS as soon as possible to begin this process.","title":"Disability-Related Accommodations"},{"location":"syllabus/#university-attendance-policy","text":"Attendance in classes is expected in all courses at Syracuse University. Students are expected to arrive on campus in time to attend the first meeting of all classes for which they are registered. Students who do not attend classes starting with the first scheduled meeting may be academically withdrawn as not making progress toward degree by failure to attend. Instructors set course-specific policies for absences from scheduled class meetings in their syllabi. It is a federal requirement that students who do not attend or cease to attend a class to be reported at the time of determination by the faculty. Faculty should use \u201cESPR\u201d and \u201cMSPR\u201d in Orange Success to alert the Office of the Registrar and the Office of Financial Aid. A grade of NA is posted to any student for whom the Never Attended flag is raised in Orange SUccess. More information regarding Orange SUccess can be found here, at: http://orangesuccess.syr.edu/getting-started-2/ Students should also review the University\u2019s religious observance policy and make the required arrangements at the beginning of each semester","title":"University Attendance Policy"},{"location":"syllabus/#academic-integrity-policy","text":"Syracuse University\u2019s Academic Integrity Policy reflects the high value that we, as a university community, place on honesty in academic work. The policy defines our expectations for academic honesty and holds students accountable for the integrity of all work they submit. Students should understand that it is their responsibility to learn about course-specific expectations, as well as about university-wide academic integrity expectations. The policy governs appropriate citation and use of sources, the integrity of work submitted in exams and assignments, and the veracity of signatures on attendance sheets and other verification of participation in class activities. The policy also prohibits students from submitting the same work in more than one class without receiving written authorization in advance from both instructors. Under the policy, students found in violation are subject to grade sanctions determined by the course instructor and non-grade sanctions determined by the School or College where the course is offered as described in the Violation and Sanction Classification Rubric. SU students are required to read an online summary of the University\u2019s academic integrity expectations and provide an electronic signature agreeing to abide by them twice a year during pre-term check-in on MySlice.","title":"Academic Integrity Policy"},{"location":"syllabus/#discrimination-or-harassment","text":"The University does not discriminate and prohibits harassment or discrimination related to any protected category including creed, ethnicity, citizenship, sexual orientation, national origin, sex, gender, pregnancy, disability, marital status, age, race, color, veteran status, military status, religion, sexual orientation, domestic violence status, genetic information, gender identity, gender expression or perceived gender. Any complaint of discrimination or harassment related to any of these protected bases should be reported to Sheila Johnson-Willis, the University\u2019s Chief Equal Opportunity & Title IX Officer. She is responsible for coordinating compliance efforts under various laws including Titles VI, VII, IX and Section 504 of the Rehabilitation Act. She can be contacted at Equal Opportunity, Inclusion, and Resolution Services, 005 Steele Hall, Syracuse University, Syracuse, NY 13244-1120; by email: titleix@syr.edu ; or by telephone: 315-443-0211.","title":"Discrimination or Harassment"},{"location":"syllabus/#course-evaluations","text":"There will be an end of course evaluation for you to complete this term. This evaluation will be conducted online and is entirely anonymous. You will receive an official notification in your email account with the evaluation website link and your passcode. Please take the time and fill out this evaluation as your feedback and support of this assessment effort is very much appreciated. The school carefully reviews ratings and comments that you submit, and these factor into decisions about course, program and instructor development.","title":"Course evaluations"},{"location":"syllabus/#use-of-blackboard","text":"This course involves the use of Syracuse University\u2019s Blackboard system as an online tool. The environment is composed of a number of elements that will help you be successful in both your current coursework and your lifelong learning opportunities. To access Blackboard, http://blackboard.syr.edu use your Syracuse University NetID & Password. This specific course will appear in your course list. To search for answers to your Blackboard questions, visit the Answers self-help knowledge https://answers.syr.edu/display/blackboard01/Blackboard . If you have problems logging in or need assistance with Blackboard, contact the ITS Service Center at: help@syr.edu or 315.443.2677. The Syracuse University Blackboard support team will assist you.","title":"Use of Blackboard"},{"location":"syllabus/#course-schedule","text":"Dates Topic Details / What\u2019s Due? 1/13 - 1/18 Lesson 00: Course Introduction Lecture: Course Introduction Recitation: Introductions and Review Programming Walkthrough 1/19 - 1/25 Lesson 01: Introduction to Programming Lecture: No Class - Labor Day Recitation: Review Programming Walkthrough 1/26 - 2/1 Lesson 02: Introduction to Python 2/2/ - 2/8 Lesson 03: Variables and Types 2/9 - 2/15 Lesson 04: Conditionals 2/16 - 2/22 Lesson 05: Iterations E1: Exam 1 Wed 3/11 - Thu 3/12 (In Small Group) 2/23 - 2/29 Lesson 06: Functions 3/1 - 3/7 Lesson 07: Strings 3/9 - 3/14 Lesson 08: Files E2: Exam 2 Wed 3/11 - Thu 3/12 (In Small Group) 3/15 - 3/21 Spring Break - No Classes 3/22 - 3/28 Lesson 09: Lists 3/29 - 4/4 Lesson 10: Dictionaries 4/5 - 4/11 Lesson 11: Web Services and API\u2019s 4/12 - 4/18 Lesson 12: Data Analysis P1: Project Proposals Due Fri Nov 22 (In Blackboard) 4/19 - 4/25 Lesson 13: Visualization P2: Project Plans Due Fri Dec 6 (In Blackboard) E3: Exam 3 Wed 12/4 - Fri 12/6 (In Recitation) 4/26 - 5/2 E3: Exam 3 (in Large Group 4/27) 5/8 Project Demo Day! (1) Fri, Dec 13, 8:00am - \u00ad10:00am Hinds Hall P3: Project Due Fri Dec 13 (Demo in Hinds, Submission In Blackboard) (1) Project Demo Day! Occurs during our scheduled final exam block. If you want full credit on your project, you must attend. Due Every week: Diagnostic is due the day before large group meeting on Monday Lab is due before your recitation Homework is due Saturday","title":"Course Schedule"},{"location":"watch/","text":"IST256.tv: Our Course Videos These are the official videos for the course. They show you how to setup the course materials, inspire you to learn programming, and walk through our End-To-End examples. Link to playlist on YouTube! https://www.youtube.com/watch?list=PLyRiRUsTyUXjwYRGM8vzusbc50zmUyNEG&v=xfBWk4nw440 Python for Everybody This videos supplement Charles Severance\u2019s \u201cPython for Everyone\u201d book. There are a lot of helpful videos here including video equivalents of his textbook chapters and in-depth walk-throughs of the code examples from his text book. These videos will help you master Python! Link to playlist on YouTube! https://www.youtube.com/watch?list=PLlRFEj9H3Oj7Bp8-DfGpfAfDBiblRfl5p&v=fvhNadKjE8g","title":"Videos"},{"location":"watch/#ist256tv-our-course-videos","text":"These are the official videos for the course. They show you how to setup the course materials, inspire you to learn programming, and walk through our End-To-End examples.","title":"IST256.tv: Our Course Videos"},{"location":"watch/#link-to-playlist-on-youtube","text":"https://www.youtube.com/watch?list=PLyRiRUsTyUXjwYRGM8vzusbc50zmUyNEG&v=xfBWk4nw440","title":"Link to playlist on YouTube!"},{"location":"watch/#python-for-everybody","text":"This videos supplement Charles Severance\u2019s \u201cPython for Everyone\u201d book. There are a lot of helpful videos here including video equivalents of his textbook chapters and in-depth walk-throughs of the code examples from his text book. These videos will help you master Python!","title":"Python for Everybody"},{"location":"watch/#link-to-playlist-on-youtube_1","text":"https://www.youtube.com/watch?list=PLlRFEj9H3Oj7Bp8-DfGpfAfDBiblRfl5p&v=fvhNadKjE8g","title":"Link to playlist on YouTube!"},{"location":"content/toc/","text":"Course Content Lessons Lesson Topic 00 Course Introduction 01 Introduction to Programming 02 Introduction to Python 03 Variables and Types 04 Conditionals 05 Iterations 06 Functions 07 Strings 08 Files 09 Lists 10 Dictionaries 11 Web Services and API\u2019s 12 Data Analysis 13 Visualization Lesson 00: Course Introduction Overview In this lesson we learn: What is this course about? Course content, how you will be evaluated, course policies and procedures. Instructor expectations of students in and out of class and getting help. How the technologies we used in the course keep you engaged and help you to learn. How to access the components of the course: Zybook, Github, gitter.im, SU Google, Zybook Participationzes, and attendance and class participation. Resources Readings Review our Course Syllabus Familiarize yourself with our Course Website Video to get you inspired! \u201cTEDxSMU: You Should Learn to Program\u201d, by Christian Genco \u201cTEDxCERN: The poetry of programming\u201d, by Linda Liukas See what previous students have done on IST256 demo day Class Resources Slides: First Day Of Class Course Setup Checklist What\u2019s Due? There are no graded work is due but you must complete the Course Setup Checklist by first recitation. Next we we start programming and your laptop needs to be setup! Lesson 01: Introduction To Programming Overview This lesson we learn: - What is programming? Why do it? Why is it difficult? Why programming is a critical 21st century skill? What does it take to be a good programmer? - The input-process-output model, how computers process programs, interpreters / compilers, syntax /semantics, code and execution. - Source code management with Git and GitHub. Resources Readings How to think like a programmer - Lessons in problem solving Programming walk-through . Video IST256.tv: 5 Minute Overview of Git 5 minutes of Files, Folders and Directories Python for Everybody: Ch1 Part 1 | Part 2 Class Resources Slides: Introduction to Programming What\u2019s Due? Coding Lab [L01] The lab can be found in part 2 of the Programming walk-through . You will turn in your lab as part of the walk-through. this lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H01] The homework can be found in part 3 of the Programming walk-through . Turn in your homework by following the git submission procedure outlined in the document. This must be completed by end of the week: Saturday evening 11:59pm Lesson 02: Introduction to Python Overview This lesson we learn: What is Python? What are the advantages / disadvantages of the language? How does it compare with other programming languages? The Jupyter Notebook environment. How to execute programs from the Jupyter environment. Python programming language basics. Print, Assignment and Input statements. Writing simple programs in Python following the Input / Process / Output model. Python source code management with Git and GitHub. Resources Readings ZyBook Ch 1: Introduction (Participation Activities only) Python for Everybody Ch 1 Video IST256.tv: Quick Tour of Jupyter Notebook Python for Everybody: Ch1 Part 3 | Part 4 Class Resources Slides: Introduction to Python Code Samples can be found in your GitHub repository content/Lessons/02 . What\u2019s Due? Zybook Participation [Z01] Chapter 1 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L02] The lab is in your Git repository folder: content/lessons/02/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H02] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/02/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 03: Variables and Types Overview This lesson we learn: What is a variable? What is its purpose? Variable assignment, and access. Different data types for variables. How to input variables of various types, check types, convert types, and print variables with formatting. Arithmetic expressions, arithmetic operators, and operands. Resources Readings ZyBook Ch 2: Variables And Types (Participation Activities Only) Python for Everybody Ch 2: Variables, Expressions, Statements Video IST256.tv: End to End Example: Variables and Types Python for Everybody: Ch2 Part 1 | Part 2 Class Resources Slides: Variables And Types Code Samples can be found in your GitHub repository content/Lessons/03 . What\u2019s Due? Zybook Participation [Z02] Chapter 2 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L03] The lab is in your Git repository folder: content/lessons/03/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H03] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/03/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 04: Conditionals Overview In this lesson we learn: How to make our code execute in a non linear fashion through the use of conditionals. Relational and logical operators for making boolean expressions which form the basis of our decisions. Different types of non-linear execution like conditional excution, alternative execution, chaining, and nesting, and their appropriate uses. How to handle run-time errors with try..except. Resources Readings ZyBook Ch 3: Conditionals (Participation Activities Only) Python for Everybody Ch 3: Conditionals Video IST256.tv: End to End Example: Conditionals Python for Everybody: Ch3 Part 1 | Part 2 Class Resources Slides: Conditionals Code Samples can be found in your GitHub repository content/Lessons/04 . What\u2019s Due? Zybook Participation [Z03] Chapter 3 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L04] The lab is in your Git repository folder: content/lessons/04/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H04] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/04/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 05: Iterations Overview In this lesson we learn: How to make our code execute in a non linear fashion through the use of iterations, or loops. The while loop for indefinite looping, infinite loops, and the break and continue statements How to build complex loops easily. Definite loops (for loops) and iterators. Resources Readings ZyBook Ch 4: Iterations (Participation Activities Only) Python for Everybody Ch 5: Iterations Video IST256.tv: End to End Example: Iterations Python for Everybody: Ch5 Part 1 | Part 2 | Part 3 | Part 4 Class Resources Slides: Iterations Code Samples can be found in your GitHub repository content/Lessons/05 . What\u2019s Due? Zybook Participation [Z04] Chapter 4 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L05] The lab is in your Git repository folder: content/lessons/05/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H05] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/05/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 06: Functions Overview In this lesson we learn: How to use other functions in modules. How to inspect module contents and get help on functions. The anatomy of custom functions: arguments, named arguments, return values How to modularize our code with custom functions. Resources Readings ZyBook Ch 5: Functions Python for Everybody Ch 4: Functions Video IST256.tv: End to End Example: Functions Python for Everybody: Ch4 Part 1 | Part 2 Class Resources Slides: Functions Code Samples can be found in your GitHub repository content/Lessons/06 . What\u2019s Due? Zybook Participation [Z05] Chapter 5 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L06] The lab is in your Git repository folder: content/lessons/06/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H06] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/06/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 07: Strings Overview In this lesson we learn: Strings as an immutable sequence of characters. Index and Slice notation for retrieving sub-strings. Built-in string functions to perform operations on strings. Techniques for parsing and tokenizing string data. How to sanitize input with string functions. Resources Readings ZyBook Ch 6: Strings Python for Everybody Ch 6: Strings Video IST256.tv: End to End Example: Strings Python for Everybody: Ch6 Part 1 | Part 2 Class Resources Slides: Strings Code Samples can be found in your GitHub repository content/Lessons/07 . What\u2019s Due? Zybook Participation [Z06] Chapter 6 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L07] The lab is in your Git repository folder: content/lessons/07/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H07] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/07/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 08: Files Overview In this lesson we learn: The importance of a persistence layer in programming. How to read and write from files. Techniques for reading a file a line at a time. Using exception handling with files. Resources Readings ZyBook Ch 7: Files Python for Everybody Ch 7: Files Video IST256.tv: End to End Example: Files Python for Everybody: Ch7 Part 1 | Part 2 Class Resources Slides: Files Code Samples can be found in your GitHub repository content/Lessons/08 . What\u2019s Due? Zybook Participation [Z07] Chapter 7 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L08] The lab is in your Git repository folder: content/lessons/08/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H08] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/08/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 09: Lists Overview In this lesson we learn: Lists as a mutable sequence of values. Indexing list values; slice notation. List functions and operations like add, remove, update, find Common patterns for list management. Resources Readings ZyBook Ch 8: Lists Python for Everybody Ch 8: lists Video IST256.tv: End to End Example: Lists Python for Everybody: Ch8 Part 1 | Part 2 | Part 3 Class Resources Slides: Lists Code Samples can be found in your GitHub repository content/Lessons/09 . What\u2019s Due? Zybook Participation [Z08] Chapter 8 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L09] The lab is in your Git repository folder: content/lessons/09/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H09] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/09/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 10: Dictionaries Overview In this lesson we learn: Dictionaries as key-value pairs. Basic dictionary operations such as getting/setting keys and values Common dictionary use cases, such as representing complex objects. List of dictionary as an in-memory database of objects. Using the json library to load and save dictionaries to files. Resources Readings ZyBook Ch 9: Dictionaries Python for Everybody Ch 9: Dictionaries Video IST256.tv: End to End Example: Dictionaries Python for Everybody: Ch9 Part 1 | Part 2 | Part 3 Class Resources Slides: Dictionaries Code Samples can be found in your GitHub repository content/Lessons/10 . What\u2019s Due? Zybook Participation [Z09] Chapter 9 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L10] The lab is in your Git repository folder: content/lessons/10/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H10] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/10/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 11: Web Services and APIs Overview In this lesson we learn: How the web works! Making HTTP requests using Python requests Parsing json into lists of dictionaries General procedure for reading and calling API\u2019s on the web. Resources Readings Web APIs in Python (Professor\u2019s Notes) Python for Everybody Ch 13: Web Services Video IST256.tv: End to End Example: Web API\u2019s Python for Everybody: Ch12 Part 3 | Ch13 Part 1 | Part 4 Class Resources Slides: Web Services and API\u2019s Code Samples can be found in your GitHub repository content/Lessons/11 . Other Resources ZyBook Ch 10: Modules HTTP: The Protocol Every Web Developer must know Python Requests Quickstart What\u2019s Due? Coding Lab [L11] The lab is in your Git repository folder: content/lessons/11/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H11] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/11/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 12: Data Analysis Overview In this lesson we learn: What exactly is Pandas What is data analysis? How can Pandas help you perform data analysis? Managing Pandas data structures. Resources Readings Data Analysis With Pandas (Professor\u2019s Notes) Video IST256.tv: End to End Example: Data Analysis in Pandas Python for Data Analysis by Sentdex Class Resources Slides: Data Analysis with Pandas How do I do THAT in Pandas? By Dataschool.io Master Pandas: The Official Pandas Tutorials Code Samples can be found in your GitHub repository content/Lessons/12 . What\u2019s Due? Coding Lab [L12] The lab is in your Git repository folder: content/lessons/12/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 12:59pm before your recitation day. Homework [H12] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/12/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm Lesson 13: Visualization Overview In this lesson we learn: Why information visualization is important The various ways to visualize information The basic requirements for any visualization How to plot complex visualizations such as multi-series charts and maps Resources Readings ZyBook Ch 10: Plotting Matplotlib Tutorial Plot.ly Tutorial Plot.ly Cufflinks Folium Quickstart Video IST256.tv: End to End Example: Mapping Potholes Matplotlib Tutorial Series Class Resources Slides: Visualization Code Samples can be found in your GitHub repository content/Lessons/13 . What\u2019s Due? Zybook Participation [Z10] Chapter 10 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L13] The lab is in your Git repository folder: content/lessons/13/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 13:59pm before your recitation day. Homework [H13] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/13/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"Lessons"},{"location":"content/toc/#course-content-lessons","text":"Lesson Topic 00 Course Introduction 01 Introduction to Programming 02 Introduction to Python 03 Variables and Types 04 Conditionals 05 Iterations 06 Functions 07 Strings 08 Files 09 Lists 10 Dictionaries 11 Web Services and API\u2019s 12 Data Analysis 13 Visualization","title":"Course Content Lessons"},{"location":"content/toc/#lesson-00-course-introduction","text":"","title":"Lesson 00: Course Introduction"},{"location":"content/toc/#overview","text":"In this lesson we learn: What is this course about? Course content, how you will be evaluated, course policies and procedures. Instructor expectations of students in and out of class and getting help. How the technologies we used in the course keep you engaged and help you to learn. How to access the components of the course: Zybook, Github, gitter.im, SU Google, Zybook Participationzes, and attendance and class participation.","title":"Overview"},{"location":"content/toc/#resources","text":"Readings Review our Course Syllabus Familiarize yourself with our Course Website Video to get you inspired! \u201cTEDxSMU: You Should Learn to Program\u201d, by Christian Genco \u201cTEDxCERN: The poetry of programming\u201d, by Linda Liukas See what previous students have done on IST256 demo day Class Resources Slides: First Day Of Class Course Setup Checklist","title":"Resources"},{"location":"content/toc/#whats-due","text":"There are no graded work is due but you must complete the Course Setup Checklist by first recitation. Next we we start programming and your laptop needs to be setup!","title":"What's Due?"},{"location":"content/toc/#lesson-01-introduction-to-programming","text":"","title":"Lesson 01: Introduction To Programming"},{"location":"content/toc/#overview_1","text":"This lesson we learn: - What is programming? Why do it? Why is it difficult? Why programming is a critical 21st century skill? What does it take to be a good programmer? - The input-process-output model, how computers process programs, interpreters / compilers, syntax /semantics, code and execution. - Source code management with Git and GitHub.","title":"Overview"},{"location":"content/toc/#resources_1","text":"Readings How to think like a programmer - Lessons in problem solving Programming walk-through . Video IST256.tv: 5 Minute Overview of Git 5 minutes of Files, Folders and Directories Python for Everybody: Ch1 Part 1 | Part 2 Class Resources Slides: Introduction to Programming","title":"Resources"},{"location":"content/toc/#whats-due_1","text":"Coding Lab [L01] The lab can be found in part 2 of the Programming walk-through . You will turn in your lab as part of the walk-through. this lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H01] The homework can be found in part 3 of the Programming walk-through . Turn in your homework by following the git submission procedure outlined in the document. This must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-02-introduction-to-python","text":"","title":"Lesson 02: Introduction to Python"},{"location":"content/toc/#overview_2","text":"This lesson we learn: What is Python? What are the advantages / disadvantages of the language? How does it compare with other programming languages? The Jupyter Notebook environment. How to execute programs from the Jupyter environment. Python programming language basics. Print, Assignment and Input statements. Writing simple programs in Python following the Input / Process / Output model. Python source code management with Git and GitHub.","title":"Overview"},{"location":"content/toc/#resources_2","text":"Readings ZyBook Ch 1: Introduction (Participation Activities only) Python for Everybody Ch 1 Video IST256.tv: Quick Tour of Jupyter Notebook Python for Everybody: Ch1 Part 3 | Part 4 Class Resources Slides: Introduction to Python Code Samples can be found in your GitHub repository content/Lessons/02 .","title":"Resources"},{"location":"content/toc/#whats-due_2","text":"Zybook Participation [Z01] Chapter 1 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L02] The lab is in your Git repository folder: content/lessons/02/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H02] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/02/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-03-variables-and-types","text":"","title":"Lesson 03: Variables and Types"},{"location":"content/toc/#overview_3","text":"This lesson we learn: What is a variable? What is its purpose? Variable assignment, and access. Different data types for variables. How to input variables of various types, check types, convert types, and print variables with formatting. Arithmetic expressions, arithmetic operators, and operands.","title":"Overview"},{"location":"content/toc/#resources_3","text":"Readings ZyBook Ch 2: Variables And Types (Participation Activities Only) Python for Everybody Ch 2: Variables, Expressions, Statements Video IST256.tv: End to End Example: Variables and Types Python for Everybody: Ch2 Part 1 | Part 2 Class Resources Slides: Variables And Types Code Samples can be found in your GitHub repository content/Lessons/03 .","title":"Resources"},{"location":"content/toc/#whats-due_3","text":"Zybook Participation [Z02] Chapter 2 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L03] The lab is in your Git repository folder: content/lessons/03/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H03] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/03/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-04-conditionals","text":"","title":"Lesson 04: Conditionals"},{"location":"content/toc/#overview_4","text":"In this lesson we learn: How to make our code execute in a non linear fashion through the use of conditionals. Relational and logical operators for making boolean expressions which form the basis of our decisions. Different types of non-linear execution like conditional excution, alternative execution, chaining, and nesting, and their appropriate uses. How to handle run-time errors with try..except.","title":"Overview"},{"location":"content/toc/#resources_4","text":"Readings ZyBook Ch 3: Conditionals (Participation Activities Only) Python for Everybody Ch 3: Conditionals Video IST256.tv: End to End Example: Conditionals Python for Everybody: Ch3 Part 1 | Part 2 Class Resources Slides: Conditionals Code Samples can be found in your GitHub repository content/Lessons/04 .","title":"Resources"},{"location":"content/toc/#whats-due_4","text":"Zybook Participation [Z03] Chapter 3 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L04] The lab is in your Git repository folder: content/lessons/04/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H04] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/04/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-05-iterations","text":"","title":"Lesson 05: Iterations"},{"location":"content/toc/#overview_5","text":"In this lesson we learn: How to make our code execute in a non linear fashion through the use of iterations, or loops. The while loop for indefinite looping, infinite loops, and the break and continue statements How to build complex loops easily. Definite loops (for loops) and iterators.","title":"Overview"},{"location":"content/toc/#resources_5","text":"Readings ZyBook Ch 4: Iterations (Participation Activities Only) Python for Everybody Ch 5: Iterations Video IST256.tv: End to End Example: Iterations Python for Everybody: Ch5 Part 1 | Part 2 | Part 3 | Part 4 Class Resources Slides: Iterations Code Samples can be found in your GitHub repository content/Lessons/05 .","title":"Resources"},{"location":"content/toc/#whats-due_5","text":"Zybook Participation [Z04] Chapter 4 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L05] The lab is in your Git repository folder: content/lessons/05/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H05] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/05/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-06-functions","text":"","title":"Lesson 06: Functions"},{"location":"content/toc/#overview_6","text":"In this lesson we learn: How to use other functions in modules. How to inspect module contents and get help on functions. The anatomy of custom functions: arguments, named arguments, return values How to modularize our code with custom functions.","title":"Overview"},{"location":"content/toc/#resources_6","text":"Readings ZyBook Ch 5: Functions Python for Everybody Ch 4: Functions Video IST256.tv: End to End Example: Functions Python for Everybody: Ch4 Part 1 | Part 2 Class Resources Slides: Functions Code Samples can be found in your GitHub repository content/Lessons/06 .","title":"Resources"},{"location":"content/toc/#whats-due_6","text":"Zybook Participation [Z05] Chapter 5 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L06] The lab is in your Git repository folder: content/lessons/06/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H06] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/06/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-07-strings","text":"","title":"Lesson 07: Strings"},{"location":"content/toc/#overview_7","text":"In this lesson we learn: Strings as an immutable sequence of characters. Index and Slice notation for retrieving sub-strings. Built-in string functions to perform operations on strings. Techniques for parsing and tokenizing string data. How to sanitize input with string functions.","title":"Overview"},{"location":"content/toc/#resources_7","text":"Readings ZyBook Ch 6: Strings Python for Everybody Ch 6: Strings Video IST256.tv: End to End Example: Strings Python for Everybody: Ch6 Part 1 | Part 2 Class Resources Slides: Strings Code Samples can be found in your GitHub repository content/Lessons/07 .","title":"Resources"},{"location":"content/toc/#whats-due_7","text":"Zybook Participation [Z06] Chapter 6 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L07] The lab is in your Git repository folder: content/lessons/07/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H07] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/07/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-08-files","text":"","title":"Lesson 08: Files"},{"location":"content/toc/#overview_8","text":"In this lesson we learn: The importance of a persistence layer in programming. How to read and write from files. Techniques for reading a file a line at a time. Using exception handling with files.","title":"Overview"},{"location":"content/toc/#resources_8","text":"Readings ZyBook Ch 7: Files Python for Everybody Ch 7: Files Video IST256.tv: End to End Example: Files Python for Everybody: Ch7 Part 1 | Part 2 Class Resources Slides: Files Code Samples can be found in your GitHub repository content/Lessons/08 .","title":"Resources"},{"location":"content/toc/#whats-due_8","text":"Zybook Participation [Z07] Chapter 7 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L08] The lab is in your Git repository folder: content/lessons/08/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H08] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/08/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-09-lists","text":"","title":"Lesson 09: Lists"},{"location":"content/toc/#overview_9","text":"In this lesson we learn: Lists as a mutable sequence of values. Indexing list values; slice notation. List functions and operations like add, remove, update, find Common patterns for list management.","title":"Overview"},{"location":"content/toc/#resources_9","text":"Readings ZyBook Ch 8: Lists Python for Everybody Ch 8: lists Video IST256.tv: End to End Example: Lists Python for Everybody: Ch8 Part 1 | Part 2 | Part 3 Class Resources Slides: Lists Code Samples can be found in your GitHub repository content/Lessons/09 .","title":"Resources"},{"location":"content/toc/#whats-due_9","text":"Zybook Participation [Z08] Chapter 8 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L09] The lab is in your Git repository folder: content/lessons/09/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H09] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/09/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-10-dictionaries","text":"","title":"Lesson 10: Dictionaries"},{"location":"content/toc/#overview_10","text":"In this lesson we learn: Dictionaries as key-value pairs. Basic dictionary operations such as getting/setting keys and values Common dictionary use cases, such as representing complex objects. List of dictionary as an in-memory database of objects. Using the json library to load and save dictionaries to files.","title":"Overview"},{"location":"content/toc/#resources_10","text":"Readings ZyBook Ch 9: Dictionaries Python for Everybody Ch 9: Dictionaries Video IST256.tv: End to End Example: Dictionaries Python for Everybody: Ch9 Part 1 | Part 2 | Part 3 Class Resources Slides: Dictionaries Code Samples can be found in your GitHub repository content/Lessons/10 .","title":"Resources"},{"location":"content/toc/#whats-due_10","text":"Zybook Participation [Z09] Chapter 9 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L10] The lab is in your Git repository folder: content/lessons/10/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H10] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/10/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-11-web-services-and-apis","text":"","title":"Lesson 11: Web Services and APIs"},{"location":"content/toc/#overview_11","text":"In this lesson we learn: How the web works! Making HTTP requests using Python requests Parsing json into lists of dictionaries General procedure for reading and calling API\u2019s on the web.","title":"Overview"},{"location":"content/toc/#resources_11","text":"Readings Web APIs in Python (Professor\u2019s Notes) Python for Everybody Ch 13: Web Services Video IST256.tv: End to End Example: Web API\u2019s Python for Everybody: Ch12 Part 3 | Ch13 Part 1 | Part 4 Class Resources Slides: Web Services and API\u2019s Code Samples can be found in your GitHub repository content/Lessons/11 . Other Resources ZyBook Ch 10: Modules HTTP: The Protocol Every Web Developer must know Python Requests Quickstart","title":"Resources"},{"location":"content/toc/#whats-due_11","text":"Coding Lab [L11] The lab is in your Git repository folder: content/lessons/11/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 11:59pm before your recitation day. Homework [H11] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/11/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-12-data-analysis","text":"","title":"Lesson 12: Data Analysis"},{"location":"content/toc/#overview_12","text":"In this lesson we learn: What exactly is Pandas What is data analysis? How can Pandas help you perform data analysis? Managing Pandas data structures.","title":"Overview"},{"location":"content/toc/#resources_12","text":"Readings Data Analysis With Pandas (Professor\u2019s Notes) Video IST256.tv: End to End Example: Data Analysis in Pandas Python for Data Analysis by Sentdex Class Resources Slides: Data Analysis with Pandas How do I do THAT in Pandas? By Dataschool.io Master Pandas: The Official Pandas Tutorials Code Samples can be found in your GitHub repository content/Lessons/12 .","title":"Resources"},{"location":"content/toc/#whats-due_12","text":"Coding Lab [L12] The lab is in your Git repository folder: content/lessons/12/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 12:59pm before your recitation day. Homework [H12] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/12/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/toc/#lesson-13-visualization","text":"","title":"Lesson 13: Visualization"},{"location":"content/toc/#overview_13","text":"In this lesson we learn: Why information visualization is important The various ways to visualize information The basic requirements for any visualization How to plot complex visualizations such as multi-series charts and maps","title":"Overview"},{"location":"content/toc/#resources_13","text":"Readings ZyBook Ch 10: Plotting Matplotlib Tutorial Plot.ly Tutorial Plot.ly Cufflinks Folium Quickstart Video IST256.tv: End to End Example: Mapping Potholes Matplotlib Tutorial Series Class Resources Slides: Visualization Code Samples can be found in your GitHub repository content/Lessons/13 .","title":"Resources"},{"location":"content/toc/#whats-due_13","text":"Zybook Participation [Z10] Chapter 10 Participation Activities It must be completed by 3pm on lecture day. Coding Lab [L13] The lab is in your Git repository folder: content/lessons/13/Class-Coding-Lab Turn in your completed lab using the git submission procedure. Lab must be completed by the end of the day 13:59pm before your recitation day. Homework [H13] Now You Code - as Assigned by your Recitation Instructor The homework assignment can be found in your git repository folder content/lessons/13/Now-You-Code/ Turn in your homework using the git submission procedure. Must be completed by end of the week: Saturday evening 11:59pm","title":"What's Due?"},{"location":"content/walkthrough/","text":"Programming Walk-Through There are activities in this walk-through which count towards your L01 (Lab) and H01 (Homework) grades this week, so pay very close attention! Part 1: Overview Becoming a Modern programmer Programming is more than just writing code and solving problems. Modern programming is a collaborative activity. For instance, so many people contribute code to the Linux kernel, the number of contributors is too high to count ! This is why one of the learning objectives of this course is to: \"Understand how to code in teams, collaborate with others and manage source code.\" To do that we need to learn and use the same tools and techniques that actual programmers use. It\u2019s going to steepen our learning curve a bit, but trust us when we say it\u2019s worth it! Remember. Today\u2019s programmers: Use the command line to operate their computer. Use git (or some other source code manager) manage their code. Write code that is easily understood by others Can explain their code to others (including non-programmers) You\u2019ll do each of these, many times throughout this course. You\u2019ll start some of them RIGHT NOW! Goals of this walk-through The goal of this exercise is to get you acquainted with the process of \u201chow we will code\u201d in this class. It DOES NOT focus at all on programming itself. In fact all the code will be written for you. Instead we will focus on the PROCESS of coding. We will cover the tools you will use throughout the course such as the command line / terminal , git , GitHub , and Jupyter Notebook to write our programs, execute them, then commit your work so your others can view it. Upon the completion of this walk-through you should be able to: Locate your Learn-Python code repository on your computer and open the command line in the repository folder. Use Python\u2019s Jupyter Notebook environment. Write and execute a simple Python program. Use git to commit your code changes and push them over the Internet to GitHub. View your code changes on the GitHub website. After you complete this walk-through you should have a good idea how to work on your code in-class and save your work to GitHub. Before You Begin Before you complete this walk-through you should need to make sure you\u2019ve completed the course setup checklist . You cannot complete this walk-through without it! If for some reason you\u2019ve haven\u2019t completed the course setup checklist (ahem\u2026 shame on you!) then you should do so NOW. NOTE: You cannot complete the lab or homework without first following the course setup checklist to set up your laptop. Part 2: The Programming Process [L01] In this part we will guide you through the programming process step-by-step. When you are finished with the process you will have completed your first lab, L01, and handed it in to Github for a grade! In this walk-through we will simulate your typical workflow when working on labs, recitations, or homework assignments in this course. Specifically we will: Open, Edit, and Execute a Python program using Jupyter Notebook Open the command line in our Learn-Python git repository Save our code changes to git , then push them to GitHub View our saved code locally and on the GitHub website. Step 2.1: Open, Edit, and Execute a Python program using Jupyter Notebook The primary tool we will use to program in Python is called Jupyter Notebook . This is the preferred development environment of Scientists, Data Analysts, and of course Data Scientists. The notebook environment is beneficial to these disciplines because you can combine instructions with code and intermix visualizations such as tables, map and graphs. Jupyter runs as a mini web server within the Azure Notebooks environment thus all you\u2019ll need to write and run your code is a web browser. Log on to Azure Notebooks: https://notebooks.azure.com with your SU email and NetID password. From the Azure Notebooks home page select the IST256 project. From the IST256 project page, click the run button (It will probably say \u201cRun on free Compute\u201d). This will launch the Jupyter Notebooks environment. You can tell the environment has launched as you will see \u201cPowered by jupyter\u201d at the top of the page. Next, we have to navigate to our code. We\u2019re in Lesson 01, so we have to find that folder: Click on your Git repository folder. Click on the content folder. Click on the lessons folder. Click on the 01 folder. You should now see the folders pertinent to this lesson: NOTE: There are typically 4 folders per lesson, defined as follows: Watch-Me-Code This folder contains the code demos as part of lecture day. End-To-End-Example This folder contains the end to end examples as part of lecture day. Class-Coding-Lab This folder contains the class coding lab and supporting files. Now-You-Code This folder contains the homework exercises. One will be worked on during recitation, the other must be finished by the end of the week. The code we will write is in the Class-Coding-Lab folder. Double-click on that folder. You should see the file: Files ending with .ipynb are Jupyter Notebook files. Double-click on CCL-walkthrough.ipynb to open the notebook file. Notice this opens a new Tab in your browser window: Let\u2019s write some code! Click on empty cell beneath the text. It should now be outlined in GREEN. Type the following code in the cell: print(\"Hello, Python!\") your screen should look like this: To execute the code from the current cell, press Shift+Enter or press the play button beneath the menu item named \u201cCell\u201d. The code in the cell will execute, and underneath it you will see the output: Jupyter then places you in a new cell where you can write additional code. NOTE: There are also menu and button options for running code in a cell that you can find by exploring\u2026 The next thing to understand about the Jupyter notebook is that it uses a modal editing system. This means that the effect of typing at the keyboard depends on which mode you are in. The two modes are: Edit mode: Indicated by a green border around one cell. Whatever you type appears as is in that cell. This is how you code. Command mode: The green border is replaced by a Blue and grey border. Key strokes are interpreted as commands \u2014 for example, typing l toggles line numbers. To switch to command mode from edit mode, hit the Esc keyboard To switch to edit mode from command mode, hit Enter or click in a cell The modal behavior of the Jupyter notebook is a little tricky at first but very efficient when you get used to it. In this screenshot, I\u2019ve toggle line numbers on for cell with code in it: PRO TIP: Need a list of commands? Open the command pallette from the toolbar. It lists all the available commands! What key do you press to save the notebook? Press it now! Next, Let\u2019s paste in some sample code which really shows off the power of Jupyter notebook. This code, taken from http://matplotlib.org/1.4.1/examples/pie_and_polar_charts/polar_bar_demo.html will generate a polar chart of random data. Copy and paste the following code into the cell beneath your Hello, Python! program: %matplotlib inline import numpy as np import matplotlib.pyplot as plt N = 20 theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False) radii = 10 * np.random.rand(N) width = np.pi / 4 * np.random.rand(N) ax = plt.subplot(111, polar=True) bars = ax.bar(theta, radii, width=width, bottom=0.0) for r, bar in zip(radii, bars): bar.set_facecolor(plt.cm.jet(r / 10.)) bar.set_alpha(0.5) plt.show() Don\u2019t worry about what this code is doing right now. You\u2019ll learn to understand it in time! When you paste and execute the code you should see this: NOTE: The chart will be different each time it runs as its based on random data. In this final coding step, we will write code to test your Python setup. Type the following code into a new cell below your chart: We gave you a screen shot of the code this time to force you to type it in! Practice makes perfect! If the code executes correctly, you should see the message This is Working in the program output. Working will be colored green, like this: HELP I GOT ERRORS!!! If you get an ImportError then you will need to go to another cell and import the missing module. For example, if you are missing matplotlib in the cell you would type: !pip3 install --user matplotlib to add the missing bits to Python. Yes there\u2019s a ! character in frot of the command. This instructs Jupyter notebook to drop down to the command line. Exiting Your Jupyter Notebook File So you are done with your Jupyter notebook file, so how do we save and close out? Save your work. Enter command mode and press s to save. Exit the notebook page. From the Jupyter menu select File then Close and Halt : NOTE: It is important to exit the notebook file this way or else it will continue to run in the background. This will slow down other notebooks you attempt to run! Step 2.2: Opening the command line in your Learn-Python git repository. You will need to commit your code changes and send them to GitHub for grading. In order to do this, you must open up the command line (linux terminal) in your git repository folder. YOU NEED TO KNOW HOW TO DO THIS IN YOUR SLEEP WITH HANDS TIED BEHIND YOUR BACK. From the Azure Notebook homepage https://notebooks.azure.com , select the IST256 project from the My Projects workspace. Click the Terminal icon to launch the terminal. This will give you access to the command line. When the terminal launches you should see a command line with the prompt nbuser@nbserver:~$ Switch the current working directory to the library folder by typing: cd ~/library Your command prompt should now read: nbuser@nbserver:~/library$ Next you need to switch into the local copy of your Git reposiotry folder. This will likely begin with the year and semester you\u2019re taking the course e.g. 2019-fall-learn-python-mafudge-su . For example, I would type: cd 2019-fall-learn-python-mafudge-su . The easiest way to find your folder is to type: cd then type the year you\u2019re taking the course, then press the TAB key and the teriminal will complete the rest for you! Verify you are in the correct folder by typing: git status * If you are in the correct folder, you should see on branch master in the first part of the command output. * If you are NOT in the correct folder, you will see fatal: not a git repository in the first part of the command output. Step 2.3: Save our code changes to git , then push them to GitHub During this walk-through we\u2019ve made changes to the file: CCL-walkthrough.ipynb . Those changes are saved in Azure Notebooks, but how do we share them with our Professor? We\u2019ll walk-through this process next. From the terminal you opened in the previous step: We\u2019ve made some changes, let\u2019s see what git has to say about them. Type: git status to check the state of our repository. The output should look something like this: Git tells us we have changes which are not staged for commit . This means we\u2019ve made changes and git doesn\u2019t know about them yet. You must tell git which changes to files you want to commit. This is called staging the commit. Let\u2019s tell git to stage all the changed files in the repository folder. Type: git add --all 99% of the time this is what we want. Let\u2019s check the status of the repository now that we\u2019ve staged our files. Type: git status again to see what\u2019s happening in our repository. Now git tells us the files we\u2019ve changed are now ready to be committed . Let\u2019s commit the changes to git. What does this mean exactly? Git Commit Explained: When you commit files, you\u2019re saving the history of them to git repository. It\u2019s like taking a snapshot of your repository folders\u2019 contents at that point in time. Because you have this snapshot you are able to revert the files back to this point whenever you desire. As you can imagine, this is an extremely useful feature for programming teams who are making changes (good and bad) to their code. Think of the commit as an insurance policy: You hope you never need to use it, but it\u2019s there for you just in case you do ! Whenever we commit we should should add a message: something to remind us of the changes we\u2019ve made. This is helpful in the event you need to cash in on that insurance policy! Enough talk. Time to commit our changes. Type: git commit -m \"Completed programming walk through lab\" NOTE: The -m represents the message part of the commit. The output says there we 1 files changed, and 56 insertions, meaning we added 56 lines of code since the last commit. Yes, git makes managing your team easy because it tracks not only who worked on what but also quantifies their contributions . Your information may vary slightly, of course. Let\u2019s check the status of the repository files now. Type: git status Now our local branch is ahead of \u2018origin/master\u2019 by 1 commit. This tells us our local git repository is newer than our remote copy on GitHub. We also have nothing to commit meaning our files are in sync with our local copy of git. This makes sense: we just committed! The last step in the process is to sync up our local copy of git commits with on GitHub. Before we do that let\u2019s explain the process. The status message says Your branch is ahead of \u2018origin/master\u2019 by 1 commit . What exactly does this mean? Well, when we initially cloned the repository off GitHub, it made two versions of the repository. One is still on GitHub (git calls this one \u2018origin/master\u2019 ) the other is on your computer. When the two repositories get out-of-sync, we can reconcile them in two ways: When the the local branch is ahead of \u2018origin/master\u2019 we need to execute a push to synchronize the two repositories, re-playing the local commits remotely on GitHub. When the the local branch is behind \u2018origin/master\u2019 we need to execute a pull to synchronize the two repositories, re-playing the commits on GitHub in our local repository. Since we\u2019re ahead we should push . Type: git push origin master You should see output similar to the following: (again your message might be different depending on what was changed) An one final check of the repository status: Type: git status Which is the same status from the beginning of the walk-through! It tells us nothing has changed locally and what we have here is now in sync with GitHub. IMPORTANT: You\u2019ll execute step 2.3 every time you code . You should get in the habit of following this procedure after each coding session. Class is over? commit code and push to GitHub. Work on your homework for an hour? commit your code and push to GitHub. Not only will it record your changes for you in the event you need to undo a change , but it also backs up your work to the cloud in the event that work has a problem or becomes lost / broken! It\u2019s great insurance against disasters and its so, so easy to do . You can push the same assignment multiple times. We professors will always look as the latest version! Step 2.4: Visualizing your commits on GitHub Once you get rolling with a few commits it might be useful to look back at the history of changes you\u2019ve made. Let\u2019s demonstrate that locally and on GitHub. Open your repository website on https://github.com . If you don\u2019t remember what it is from the command line in your local repository type: git remote -v to display it. From the GitHub repository Website, select commits From the commits page, select the commit for which you would like to view the changes In this example you want to select the commit with message Completed programming walk through lab You will then see a web of all the files changed in that commit. In this example we should see the file CCL-walkthrough.ipynb . On the left is the file before the commit On the right is the file after the commit Github uses the familiar red/green and + / - syntax as gitk Part 3: On Your Own [H01] Next, we will walk you through a typical homework assignment. Since we\u2019ve focused on committing work to with git already, in this part we will emphasize how go about completing homework. Similar to the labs, the homework assignments can be found in your git repository folder and you code the solution in Jupyter notebook. Getting Started Open the following file in Jupyter Notebook: lessons/01/Now-You-Code/NYC1-walkthrough.ipynb This homework assignment is similar to all the others. It consists of several sections: problem definition, problem analysis, section to write code, and some questions which encourage you to think laterally. Each of these sections should be completed before you hand in a homework assignment. At the bottom of the homework is a reminder of how the homework is evaluated. Use this to make sure you\u2019re achieving the highest grade possible for your efforts. Step 1: Problem Analysis Before we can solve a problem with computer code, we must first understand the problem itself . This is an essential and often overlooked aspect of computer programming. Programming provides vast resources at your disposal, but unless you can combine them into a coherent solution they are not much use. A good way to analyze a programming problem is with the input-process-output model. In this model we identify the inputs into the program, the expected outputs based on those inputs and then we write down the steps (the algorithm) to get from input to output. Your algorithm, or steps should NOT be in any programming language. They should be written as atomic steps in a natural language. To become a good algorithm writer takes practice. It seems foreign at first but like anything the more you do it the more natural it becomes. Let\u2019s complete the problem analysis section together: Double click on the Problem analysis section to edit the markdown. When you\u2019re in edit mode it looks like this: Add the following to the markdown, outlining the inputs, output, and process for this program. Again, this is a common problem solving approach. When you are finished press SHIFT+ENTER to execute the cell and save your documentation. NOTE: For more complicated homeworks, you might spend an hour or so just thinking about your approach to the problem. I encourage you to do this \u201coff line.\u201d Most people are better problem solvers without the distractions of music, a computer, or background noise. Give yourself a chance in isolation to think about the problem deeply! You\u2019ll be surprised how productive it can be! Step 2: Write code Now that we\u2019ve outlined the problem and formally laid out a plan for writing the program, we can move on to writing our code. If you\u2019re doing it right, this step is merely taking each line in your algorithm and asking yourself, \u201cHow do I translate this into Python.\u201d When you\u2019re doing it wrong, such as coding without a problem analysis, then this step will be painfully frustrating. Let\u2019s complete the code section together: Next, move into the code cell: And write the Python program: print(\"Python Check Divider\") people = int(input(\"How many people are dining? \")) check_total = float(input(\"What is the total amount of the check? \")) contribution = check_total / people print(\"Each person should contribute\", contribution, \"dollars.\") When you are finished the cell should look like this: Press SHIFT+ENTER to execute the code. Try the same inputs as in the example run at the top. Do you get the same outputs? Execute the program a few more times, trying different inputs and verifying the outputs the program gives you match those you would expect. For example a $20 check split with 2 people should be $10 each. Is it? You\u2019ll have to \u201cplay computer\u201d and figure out the outputs yourself. This is a key activity of good programmers - never \u201cassume\u201d the computer code is correct, \u201cprove\u201d it\u2019s correct! In fact really good programmers write code to prove their code is correct, a process known as automated testing . NOTE: Usually, it will take you several iterations of the previous 2 steps before your program is \u201cdone\u201d. Why? Most problems are non-trivial and you are learning how to become a problem solver. Sometimes you won\u2019t know your original plan is crap until you write code and run it. DO NOT get discouraged by this! Each failure is a lesson which helps us become a better, more experienced programmer. In fact the end result of any working program Facebook to Angry Birds is the culmination of a mountain of failures, dead-ends, and small victories en-route to a feature-complete application. This is what makes programming so frustrating yet gratifying at the same time. Learn to embrace failure and work it to your advantage! Step 3: Questions After you\u2019ve completed the program you should answer the questions in the questions section. These are designed to \u201cget you thinking\u201d about the problem and test the flexibility of your solution. The questions usually focus on edge cases and potential pitfalls students may not have considered as they completed the homework. Completing them offers valuable insight into the program and ways to make it better. Many student go back and improve their program after answering the questions in an effort to score as high as possible on the homework. Edit the Questions cell and provide an answer to each question underneath the question itself. Since every student\u2019s answer will be different I did not include a screenshot this time. You may have to run the program to answer some of the questions. Make sure you click off the question cell and back into the code cell to run the program! NOTE: It is important to answer the questions in your own words, honestly and truthfully. We expect each student will answer these questions differently! Finishing Up When your homework is complete, you should save your work and commit the changes to Github so that your professor can grade it. When you are confident the program is correct you are finished writing the program. Save your changes and exit Jupyter notebook. Add your change to your local git repository. Commit your change with the message \u201cCompleted NYC 1 walkthough\u201d Push your code to Github. Wait a minute, then verify your code, including proof it was executed via the program output is on the Github website. At this point your homework has been turned in, and your professor should be able to grade it and determine whether you completed it on time, by checking the timestamp of your commit.","title":"Programming Walkthrough"},{"location":"content/walkthrough/#programming-walk-through","text":"There are activities in this walk-through which count towards your L01 (Lab) and H01 (Homework) grades this week, so pay very close attention!","title":"Programming Walk-Through"},{"location":"content/walkthrough/#part-1-overview","text":"","title":"Part 1: Overview"},{"location":"content/walkthrough/#becoming-a-modern-programmer","text":"Programming is more than just writing code and solving problems. Modern programming is a collaborative activity. For instance, so many people contribute code to the Linux kernel, the number of contributors is too high to count ! This is why one of the learning objectives of this course is to: \"Understand how to code in teams, collaborate with others and manage source code.\" To do that we need to learn and use the same tools and techniques that actual programmers use. It\u2019s going to steepen our learning curve a bit, but trust us when we say it\u2019s worth it! Remember. Today\u2019s programmers: Use the command line to operate their computer. Use git (or some other source code manager) manage their code. Write code that is easily understood by others Can explain their code to others (including non-programmers) You\u2019ll do each of these, many times throughout this course. You\u2019ll start some of them RIGHT NOW!","title":"Becoming a Modern programmer"},{"location":"content/walkthrough/#goals-of-this-walk-through","text":"The goal of this exercise is to get you acquainted with the process of \u201chow we will code\u201d in this class. It DOES NOT focus at all on programming itself. In fact all the code will be written for you. Instead we will focus on the PROCESS of coding. We will cover the tools you will use throughout the course such as the command line / terminal , git , GitHub , and Jupyter Notebook to write our programs, execute them, then commit your work so your others can view it. Upon the completion of this walk-through you should be able to: Locate your Learn-Python code repository on your computer and open the command line in the repository folder. Use Python\u2019s Jupyter Notebook environment. Write and execute a simple Python program. Use git to commit your code changes and push them over the Internet to GitHub. View your code changes on the GitHub website. After you complete this walk-through you should have a good idea how to work on your code in-class and save your work to GitHub.","title":"Goals of this walk-through"},{"location":"content/walkthrough/#before-you-begin","text":"Before you complete this walk-through you should need to make sure you\u2019ve completed the course setup checklist . You cannot complete this walk-through without it! If for some reason you\u2019ve haven\u2019t completed the course setup checklist (ahem\u2026 shame on you!) then you should do so NOW. NOTE: You cannot complete the lab or homework without first following the course setup checklist to set up your laptop.","title":"Before You Begin"},{"location":"content/walkthrough/#part-2-the-programming-process-l01","text":"In this part we will guide you through the programming process step-by-step. When you are finished with the process you will have completed your first lab, L01, and handed it in to Github for a grade! In this walk-through we will simulate your typical workflow when working on labs, recitations, or homework assignments in this course. Specifically we will: Open, Edit, and Execute a Python program using Jupyter Notebook Open the command line in our Learn-Python git repository Save our code changes to git , then push them to GitHub View our saved code locally and on the GitHub website.","title":"Part 2: The Programming Process [L01]"},{"location":"content/walkthrough/#step-21-open-edit-and-execute-a-python-program-using-jupyter-notebook","text":"The primary tool we will use to program in Python is called Jupyter Notebook . This is the preferred development environment of Scientists, Data Analysts, and of course Data Scientists. The notebook environment is beneficial to these disciplines because you can combine instructions with code and intermix visualizations such as tables, map and graphs. Jupyter runs as a mini web server within the Azure Notebooks environment thus all you\u2019ll need to write and run your code is a web browser. Log on to Azure Notebooks: https://notebooks.azure.com with your SU email and NetID password. From the Azure Notebooks home page select the IST256 project. From the IST256 project page, click the run button (It will probably say \u201cRun on free Compute\u201d). This will launch the Jupyter Notebooks environment. You can tell the environment has launched as you will see \u201cPowered by jupyter\u201d at the top of the page. Next, we have to navigate to our code. We\u2019re in Lesson 01, so we have to find that folder: Click on your Git repository folder. Click on the content folder. Click on the lessons folder. Click on the 01 folder. You should now see the folders pertinent to this lesson: NOTE: There are typically 4 folders per lesson, defined as follows: Watch-Me-Code This folder contains the code demos as part of lecture day. End-To-End-Example This folder contains the end to end examples as part of lecture day. Class-Coding-Lab This folder contains the class coding lab and supporting files. Now-You-Code This folder contains the homework exercises. One will be worked on during recitation, the other must be finished by the end of the week. The code we will write is in the Class-Coding-Lab folder. Double-click on that folder. You should see the file: Files ending with .ipynb are Jupyter Notebook files. Double-click on CCL-walkthrough.ipynb to open the notebook file. Notice this opens a new Tab in your browser window: Let\u2019s write some code! Click on empty cell beneath the text. It should now be outlined in GREEN. Type the following code in the cell: print(\"Hello, Python!\") your screen should look like this: To execute the code from the current cell, press Shift+Enter or press the play button beneath the menu item named \u201cCell\u201d. The code in the cell will execute, and underneath it you will see the output: Jupyter then places you in a new cell where you can write additional code. NOTE: There are also menu and button options for running code in a cell that you can find by exploring\u2026 The next thing to understand about the Jupyter notebook is that it uses a modal editing system. This means that the effect of typing at the keyboard depends on which mode you are in. The two modes are: Edit mode: Indicated by a green border around one cell. Whatever you type appears as is in that cell. This is how you code. Command mode: The green border is replaced by a Blue and grey border. Key strokes are interpreted as commands \u2014 for example, typing l toggles line numbers. To switch to command mode from edit mode, hit the Esc keyboard To switch to edit mode from command mode, hit Enter or click in a cell The modal behavior of the Jupyter notebook is a little tricky at first but very efficient when you get used to it. In this screenshot, I\u2019ve toggle line numbers on for cell with code in it: PRO TIP: Need a list of commands? Open the command pallette from the toolbar. It lists all the available commands! What key do you press to save the notebook? Press it now! Next, Let\u2019s paste in some sample code which really shows off the power of Jupyter notebook. This code, taken from http://matplotlib.org/1.4.1/examples/pie_and_polar_charts/polar_bar_demo.html will generate a polar chart of random data. Copy and paste the following code into the cell beneath your Hello, Python! program: %matplotlib inline import numpy as np import matplotlib.pyplot as plt N = 20 theta = np.linspace(0.0, 2 * np.pi, N, endpoint=False) radii = 10 * np.random.rand(N) width = np.pi / 4 * np.random.rand(N) ax = plt.subplot(111, polar=True) bars = ax.bar(theta, radii, width=width, bottom=0.0) for r, bar in zip(radii, bars): bar.set_facecolor(plt.cm.jet(r / 10.)) bar.set_alpha(0.5) plt.show() Don\u2019t worry about what this code is doing right now. You\u2019ll learn to understand it in time! When you paste and execute the code you should see this: NOTE: The chart will be different each time it runs as its based on random data. In this final coding step, we will write code to test your Python setup. Type the following code into a new cell below your chart: We gave you a screen shot of the code this time to force you to type it in! Practice makes perfect! If the code executes correctly, you should see the message This is Working in the program output. Working will be colored green, like this: HELP I GOT ERRORS!!! If you get an ImportError then you will need to go to another cell and import the missing module. For example, if you are missing matplotlib in the cell you would type: !pip3 install --user matplotlib to add the missing bits to Python. Yes there\u2019s a ! character in frot of the command. This instructs Jupyter notebook to drop down to the command line.","title":"Step 2.1: Open, Edit, and Execute a Python program using Jupyter Notebook"},{"location":"content/walkthrough/#exiting-your-jupyter-notebook-file","text":"So you are done with your Jupyter notebook file, so how do we save and close out? Save your work. Enter command mode and press s to save. Exit the notebook page. From the Jupyter menu select File then Close and Halt : NOTE: It is important to exit the notebook file this way or else it will continue to run in the background. This will slow down other notebooks you attempt to run!","title":"Exiting Your Jupyter Notebook File"},{"location":"content/walkthrough/#step-22-opening-the-command-line-in-your-learn-python-git-repository","text":"You will need to commit your code changes and send them to GitHub for grading. In order to do this, you must open up the command line (linux terminal) in your git repository folder. YOU NEED TO KNOW HOW TO DO THIS IN YOUR SLEEP WITH HANDS TIED BEHIND YOUR BACK. From the Azure Notebook homepage https://notebooks.azure.com , select the IST256 project from the My Projects workspace. Click the Terminal icon to launch the terminal. This will give you access to the command line. When the terminal launches you should see a command line with the prompt nbuser@nbserver:~$ Switch the current working directory to the library folder by typing: cd ~/library Your command prompt should now read: nbuser@nbserver:~/library$ Next you need to switch into the local copy of your Git reposiotry folder. This will likely begin with the year and semester you\u2019re taking the course e.g. 2019-fall-learn-python-mafudge-su . For example, I would type: cd 2019-fall-learn-python-mafudge-su . The easiest way to find your folder is to type: cd then type the year you\u2019re taking the course, then press the TAB key and the teriminal will complete the rest for you! Verify you are in the correct folder by typing: git status * If you are in the correct folder, you should see on branch master in the first part of the command output. * If you are NOT in the correct folder, you will see fatal: not a git repository in the first part of the command output.","title":"Step 2.2: Opening the command line in your Learn-Python git repository."},{"location":"content/walkthrough/#step-23-save-our-code-changes-to-git-then-push-them-to-github","text":"During this walk-through we\u2019ve made changes to the file: CCL-walkthrough.ipynb . Those changes are saved in Azure Notebooks, but how do we share them with our Professor? We\u2019ll walk-through this process next. From the terminal you opened in the previous step: We\u2019ve made some changes, let\u2019s see what git has to say about them. Type: git status to check the state of our repository. The output should look something like this: Git tells us we have changes which are not staged for commit . This means we\u2019ve made changes and git doesn\u2019t know about them yet. You must tell git which changes to files you want to commit. This is called staging the commit. Let\u2019s tell git to stage all the changed files in the repository folder. Type: git add --all 99% of the time this is what we want. Let\u2019s check the status of the repository now that we\u2019ve staged our files. Type: git status again to see what\u2019s happening in our repository. Now git tells us the files we\u2019ve changed are now ready to be committed . Let\u2019s commit the changes to git. What does this mean exactly? Git Commit Explained: When you commit files, you\u2019re saving the history of them to git repository. It\u2019s like taking a snapshot of your repository folders\u2019 contents at that point in time. Because you have this snapshot you are able to revert the files back to this point whenever you desire. As you can imagine, this is an extremely useful feature for programming teams who are making changes (good and bad) to their code. Think of the commit as an insurance policy: You hope you never need to use it, but it\u2019s there for you just in case you do ! Whenever we commit we should should add a message: something to remind us of the changes we\u2019ve made. This is helpful in the event you need to cash in on that insurance policy! Enough talk. Time to commit our changes. Type: git commit -m \"Completed programming walk through lab\" NOTE: The -m represents the message part of the commit. The output says there we 1 files changed, and 56 insertions, meaning we added 56 lines of code since the last commit. Yes, git makes managing your team easy because it tracks not only who worked on what but also quantifies their contributions . Your information may vary slightly, of course. Let\u2019s check the status of the repository files now. Type: git status Now our local branch is ahead of \u2018origin/master\u2019 by 1 commit. This tells us our local git repository is newer than our remote copy on GitHub. We also have nothing to commit meaning our files are in sync with our local copy of git. This makes sense: we just committed! The last step in the process is to sync up our local copy of git commits with on GitHub. Before we do that let\u2019s explain the process. The status message says Your branch is ahead of \u2018origin/master\u2019 by 1 commit . What exactly does this mean? Well, when we initially cloned the repository off GitHub, it made two versions of the repository. One is still on GitHub (git calls this one \u2018origin/master\u2019 ) the other is on your computer. When the two repositories get out-of-sync, we can reconcile them in two ways: When the the local branch is ahead of \u2018origin/master\u2019 we need to execute a push to synchronize the two repositories, re-playing the local commits remotely on GitHub. When the the local branch is behind \u2018origin/master\u2019 we need to execute a pull to synchronize the two repositories, re-playing the commits on GitHub in our local repository. Since we\u2019re ahead we should push . Type: git push origin master You should see output similar to the following: (again your message might be different depending on what was changed) An one final check of the repository status: Type: git status Which is the same status from the beginning of the walk-through! It tells us nothing has changed locally and what we have here is now in sync with GitHub. IMPORTANT: You\u2019ll execute step 2.3 every time you code . You should get in the habit of following this procedure after each coding session. Class is over? commit code and push to GitHub. Work on your homework for an hour? commit your code and push to GitHub. Not only will it record your changes for you in the event you need to undo a change , but it also backs up your work to the cloud in the event that work has a problem or becomes lost / broken! It\u2019s great insurance against disasters and its so, so easy to do . You can push the same assignment multiple times. We professors will always look as the latest version!","title":"Step 2.3: Save our code changes to git, then push them to GitHub"},{"location":"content/walkthrough/#step-24-visualizing-your-commits-on-github","text":"Once you get rolling with a few commits it might be useful to look back at the history of changes you\u2019ve made. Let\u2019s demonstrate that locally and on GitHub. Open your repository website on https://github.com . If you don\u2019t remember what it is from the command line in your local repository type: git remote -v to display it. From the GitHub repository Website, select commits From the commits page, select the commit for which you would like to view the changes In this example you want to select the commit with message Completed programming walk through lab You will then see a web of all the files changed in that commit. In this example we should see the file CCL-walkthrough.ipynb . On the left is the file before the commit On the right is the file after the commit Github uses the familiar red/green and + / - syntax as gitk","title":"Step 2.4: Visualizing your commits on GitHub"},{"location":"content/walkthrough/#part-3-on-your-own-h01","text":"Next, we will walk you through a typical homework assignment. Since we\u2019ve focused on committing work to with git already, in this part we will emphasize how go about completing homework. Similar to the labs, the homework assignments can be found in your git repository folder and you code the solution in Jupyter notebook.","title":"Part 3: On Your Own [H01]"},{"location":"content/walkthrough/#getting-started","text":"Open the following file in Jupyter Notebook: lessons/01/Now-You-Code/NYC1-walkthrough.ipynb This homework assignment is similar to all the others. It consists of several sections: problem definition, problem analysis, section to write code, and some questions which encourage you to think laterally. Each of these sections should be completed before you hand in a homework assignment. At the bottom of the homework is a reminder of how the homework is evaluated. Use this to make sure you\u2019re achieving the highest grade possible for your efforts.","title":"Getting Started"},{"location":"content/walkthrough/#step-1-problem-analysis","text":"Before we can solve a problem with computer code, we must first understand the problem itself . This is an essential and often overlooked aspect of computer programming. Programming provides vast resources at your disposal, but unless you can combine them into a coherent solution they are not much use. A good way to analyze a programming problem is with the input-process-output model. In this model we identify the inputs into the program, the expected outputs based on those inputs and then we write down the steps (the algorithm) to get from input to output. Your algorithm, or steps should NOT be in any programming language. They should be written as atomic steps in a natural language. To become a good algorithm writer takes practice. It seems foreign at first but like anything the more you do it the more natural it becomes. Let\u2019s complete the problem analysis section together: Double click on the Problem analysis section to edit the markdown. When you\u2019re in edit mode it looks like this: Add the following to the markdown, outlining the inputs, output, and process for this program. Again, this is a common problem solving approach. When you are finished press SHIFT+ENTER to execute the cell and save your documentation. NOTE: For more complicated homeworks, you might spend an hour or so just thinking about your approach to the problem. I encourage you to do this \u201coff line.\u201d Most people are better problem solvers without the distractions of music, a computer, or background noise. Give yourself a chance in isolation to think about the problem deeply! You\u2019ll be surprised how productive it can be!","title":"Step 1: Problem Analysis"},{"location":"content/walkthrough/#step-2-write-code","text":"Now that we\u2019ve outlined the problem and formally laid out a plan for writing the program, we can move on to writing our code. If you\u2019re doing it right, this step is merely taking each line in your algorithm and asking yourself, \u201cHow do I translate this into Python.\u201d When you\u2019re doing it wrong, such as coding without a problem analysis, then this step will be painfully frustrating. Let\u2019s complete the code section together: Next, move into the code cell: And write the Python program: print(\"Python Check Divider\") people = int(input(\"How many people are dining? \")) check_total = float(input(\"What is the total amount of the check? \")) contribution = check_total / people print(\"Each person should contribute\", contribution, \"dollars.\") When you are finished the cell should look like this: Press SHIFT+ENTER to execute the code. Try the same inputs as in the example run at the top. Do you get the same outputs? Execute the program a few more times, trying different inputs and verifying the outputs the program gives you match those you would expect. For example a $20 check split with 2 people should be $10 each. Is it? You\u2019ll have to \u201cplay computer\u201d and figure out the outputs yourself. This is a key activity of good programmers - never \u201cassume\u201d the computer code is correct, \u201cprove\u201d it\u2019s correct! In fact really good programmers write code to prove their code is correct, a process known as automated testing . NOTE: Usually, it will take you several iterations of the previous 2 steps before your program is \u201cdone\u201d. Why? Most problems are non-trivial and you are learning how to become a problem solver. Sometimes you won\u2019t know your original plan is crap until you write code and run it. DO NOT get discouraged by this! Each failure is a lesson which helps us become a better, more experienced programmer. In fact the end result of any working program Facebook to Angry Birds is the culmination of a mountain of failures, dead-ends, and small victories en-route to a feature-complete application. This is what makes programming so frustrating yet gratifying at the same time. Learn to embrace failure and work it to your advantage!","title":"Step 2: Write code"},{"location":"content/walkthrough/#step-3-questions","text":"After you\u2019ve completed the program you should answer the questions in the questions section. These are designed to \u201cget you thinking\u201d about the problem and test the flexibility of your solution. The questions usually focus on edge cases and potential pitfalls students may not have considered as they completed the homework. Completing them offers valuable insight into the program and ways to make it better. Many student go back and improve their program after answering the questions in an effort to score as high as possible on the homework. Edit the Questions cell and provide an answer to each question underneath the question itself. Since every student\u2019s answer will be different I did not include a screenshot this time. You may have to run the program to answer some of the questions. Make sure you click off the question cell and back into the code cell to run the program! NOTE: It is important to answer the questions in your own words, honestly and truthfully. We expect each student will answer these questions differently!","title":"Step 3: Questions"},{"location":"content/walkthrough/#finishing-up","text":"When your homework is complete, you should save your work and commit the changes to Github so that your professor can grade it. When you are confident the program is correct you are finished writing the program. Save your changes and exit Jupyter notebook. Add your change to your local git repository. Commit your change with the message \u201cCompleted NYC 1 walkthough\u201d Push your code to Github. Wait a minute, then verify your code, including proof it was executed via the program output is on the Github website. At this point your homework has been turned in, and your professor should be able to grade it and determine whether you completed it on time, by checking the timestamp of your commit.","title":"Finishing Up"},{"location":"content/setup/azure-config/","text":"Azure Notebooks Configuration In this final step in the setup process, you\u2019ll need to clone your Github repository into the Azure Notebooks environment. This takes the sample code, labs, and homework assignments and copies them into Azure notebooks where you can edit and run them using Python in the browser. Before You Begin Have the following information handy: Your GitHub username and password. Your GitHub Classroom repository Url (copy it from the previous setup). Setup Procedure Login to Azure notebooks https://notebooks.azure.com/ with your Syracuse University email and NetID password. Click on the IST256 project. CLick the Run button. This will start up your project. (Might say \u201cRun on Free Tier\u201d) Click Terminal to launch the terminal. When the terminal launches you should see a command line with the prompt nbuser@nbserver:~$ Switch the current working directory to the library folder by typing cd ~/library and pressing ENTER/RETURN. Your command prompt should now read nbuser@nbserver:~/library$ From the nbuser@nbserver:~/library$ prompt, type git clone then paste in your close repository from the previous step. For example mine was https://github.com/IST256-classroom/learn-python-spring-2018-mafudge and press ENTER/RETURN. You will be prompted for your github username. You wiil be prompted for your github password. YOU WILL NOT SEE ANY CHARACTERS YOU TYPE. When you authenticate, the cloning process will start which takes about 1-2 minutes. After you clone the repository there are more commands to type. Press ENTER/RETURN after each one: Type git config --global credential.helper store to configure git to save passwords. Type git config --global user.email \"netid@syr.edu\" to configure git to use your email. MAKE SURE TO USE YOUR SU EMAIL ADDRESS! Type git config --global user.name \"Your Name\" to configure git commits with your name. AGAIN USE YOUR FULL NAME HERE e.g. Michael Fudge. While at the command line, let\u2019s install some Python modules we will need later in the course. Type: pip3 install --user --upgrade geocoder lxml terminado numpy scipy requests Again, this might take a few minutes, so be patient. Finally, we install the last round of Python modules we will use in this course. Type: pip3 install --user --upgrade pandas matplotlib plotly folium bs4 And as usual it will take some time to install these modules. Be patient! Next Steps Let\u2019s try to commit code using Git.","title":"Azure Notebooks Configuration"},{"location":"content/setup/azure-config/#azure-notebooks-configuration","text":"In this final step in the setup process, you\u2019ll need to clone your Github repository into the Azure Notebooks environment. This takes the sample code, labs, and homework assignments and copies them into Azure notebooks where you can edit and run them using Python in the browser.","title":"Azure Notebooks Configuration"},{"location":"content/setup/azure-config/#before-you-begin","text":"Have the following information handy: Your GitHub username and password. Your GitHub Classroom repository Url (copy it from the previous setup).","title":"Before You Begin"},{"location":"content/setup/azure-config/#setup-procedure","text":"Login to Azure notebooks https://notebooks.azure.com/ with your Syracuse University email and NetID password. Click on the IST256 project. CLick the Run button. This will start up your project. (Might say \u201cRun on Free Tier\u201d) Click Terminal to launch the terminal. When the terminal launches you should see a command line with the prompt nbuser@nbserver:~$ Switch the current working directory to the library folder by typing cd ~/library and pressing ENTER/RETURN. Your command prompt should now read nbuser@nbserver:~/library$ From the nbuser@nbserver:~/library$ prompt, type git clone then paste in your close repository from the previous step. For example mine was https://github.com/IST256-classroom/learn-python-spring-2018-mafudge and press ENTER/RETURN. You will be prompted for your github username. You wiil be prompted for your github password. YOU WILL NOT SEE ANY CHARACTERS YOU TYPE. When you authenticate, the cloning process will start which takes about 1-2 minutes. After you clone the repository there are more commands to type. Press ENTER/RETURN after each one: Type git config --global credential.helper store to configure git to save passwords. Type git config --global user.email \"netid@syr.edu\" to configure git to use your email. MAKE SURE TO USE YOUR SU EMAIL ADDRESS! Type git config --global user.name \"Your Name\" to configure git commits with your name. AGAIN USE YOUR FULL NAME HERE e.g. Michael Fudge. While at the command line, let\u2019s install some Python modules we will need later in the course. Type: pip3 install --user --upgrade geocoder lxml terminado numpy scipy requests Again, this might take a few minutes, so be patient. Finally, we install the last round of Python modules we will use in this course. Type: pip3 install --user --upgrade pandas matplotlib plotly folium bs4 And as usual it will take some time to install these modules. Be patient!","title":"Setup Procedure"},{"location":"content/setup/azure-config/#next-steps","text":"Let\u2019s try to commit code using Git.","title":"Next Steps"},{"location":"content/setup/azure/","text":"Azure Notebooks Setup You can run everything we use in this course through the free Microsoft Azure Notebooks Service. This service hosts Python, Jupyter and git in the cloud so that you can run your code from any web browser. Setup Procedure Go to the website https://notebooks.azure.com/ . Click sign in to login in. Login with email netid@syr.edu . Where netid is your netid, of course! Enter your netid password for the password. Syracuse University has a connection to Azure which is why your password will work here. After you are logged in, click on My Projects to take you to the projects section of Azure Notebooks. Click on + New Project to create your project for this course. For the Project Name enter IST256 for the Project ID enter ist256 Un-check the Public library and Un-Check Create a README.md . When you are ready, click Create For the Next Step Stay logged into azure notebooks. Copy your Github repository URL Have your Github username and password ready.","title":"Azure Notebooks Setup"},{"location":"content/setup/azure/#azure-notebooks-setup","text":"You can run everything we use in this course through the free Microsoft Azure Notebooks Service. This service hosts Python, Jupyter and git in the cloud so that you can run your code from any web browser.","title":"Azure Notebooks Setup"},{"location":"content/setup/azure/#setup-procedure","text":"Go to the website https://notebooks.azure.com/ . Click sign in to login in. Login with email netid@syr.edu . Where netid is your netid, of course! Enter your netid password for the password. Syracuse University has a connection to Azure which is why your password will work here. After you are logged in, click on My Projects to take you to the projects section of Azure Notebooks. Click on + New Project to create your project for this course. For the Project Name enter IST256 for the Project ID enter ist256 Un-check the Public library and Un-Check Create a README.md . When you are ready, click Create","title":"Setup Procedure"},{"location":"content/setup/azure/#for-the-next-step","text":"Stay logged into azure notebooks. Copy your Github repository URL Have your Github username and password ready.","title":"For the Next Step"},{"location":"content/setup/commit-code-git/","text":"Commit Your Code From the Command Line with Git This article outlines how to commit your code to git and push it to GitHub. The process is quite simple and you should get in the habit of doing it whenever you are done coding for the day. Procedure Log on to Azure Notebooks: https://notebooks.azure.com with your SU email and NetID password. Select the IST256 project from the My Projects workspace. Click the Terminal icon to launch the terminal. When the terminal launches you should see a command line with the prompt nbuser@nbserver:~$ Switch the current working directory to the library folder by typing: cd ~/library Your command prompt should now read: nbuser@nbserver:~/library$ Next you need to switch into the local copy of your Git reposiotry folder. This will likely begin with the year and semester you\u2019re taking the course e.g. 2019-fall-learn-python-mafudge-su . For example, I would type: cd 2019-fall-learn-python-mafudge-su . The easiest way to find your folder is to type: cd then type the year you\u2019re taking the course, then press the TAB key and the teriminal will complete the rest for you! From the nbuser@nbserver:~/library/your-repository-folder$ prompt, you can verify you are in the right place by typing: git status If somewhere in the output, it says fatal: not a git repository then you are not in the right place! If somewhere in the output it says on branch master then you are in your git repository folder. To track the changes you\u2019ve made to the files type: git add --all . To commit a save point to git of your work, type: git commit -m \"message\" where message is your commit message. It should reflect the type of work you did this session, like completed lab 3 or finished NYC 3.4 for example. To send your changes to GitHub, type: git push origin master Summary of Git Commands git status Checks if you are in the right place and, of course gets the status of the files in your git repository folder. When in doubt, type this command and read the output. It will suggest what to do next! git add --all Tracks all the changes you made so they can be commited. git commit -m \"message Commits the tracked changes under message message . It is important to choose a good commit message that reflects the work you\u2019ve done. The messages show up in Github. git push origin master Sends your commits to GitHub.","title":"Commit Your Code From the Command Line with Git"},{"location":"content/setup/commit-code-git/#commit-your-code-from-the-command-line-with-git","text":"This article outlines how to commit your code to git and push it to GitHub. The process is quite simple and you should get in the habit of doing it whenever you are done coding for the day.","title":"Commit Your Code From the Command Line with Git"},{"location":"content/setup/commit-code-git/#procedure","text":"Log on to Azure Notebooks: https://notebooks.azure.com with your SU email and NetID password. Select the IST256 project from the My Projects workspace. Click the Terminal icon to launch the terminal. When the terminal launches you should see a command line with the prompt nbuser@nbserver:~$ Switch the current working directory to the library folder by typing: cd ~/library Your command prompt should now read: nbuser@nbserver:~/library$ Next you need to switch into the local copy of your Git reposiotry folder. This will likely begin with the year and semester you\u2019re taking the course e.g. 2019-fall-learn-python-mafudge-su . For example, I would type: cd 2019-fall-learn-python-mafudge-su . The easiest way to find your folder is to type: cd then type the year you\u2019re taking the course, then press the TAB key and the teriminal will complete the rest for you! From the nbuser@nbserver:~/library/your-repository-folder$ prompt, you can verify you are in the right place by typing: git status If somewhere in the output, it says fatal: not a git repository then you are not in the right place! If somewhere in the output it says on branch master then you are in your git repository folder. To track the changes you\u2019ve made to the files type: git add --all . To commit a save point to git of your work, type: git commit -m \"message\" where message is your commit message. It should reflect the type of work you did this session, like completed lab 3 or finished NYC 3.4 for example. To send your changes to GitHub, type: git push origin master","title":"Procedure"},{"location":"content/setup/commit-code-git/#summary-of-git-commands","text":"git status Checks if you are in the right place and, of course gets the status of the files in your git repository folder. When in doubt, type this command and read the output. It will suggest what to do next! git add --all Tracks all the changes you made so they can be commited. git commit -m \"message Commits the tracked changes under message message . It is important to choose a good commit message that reflects the work you\u2019ve done. The messages show up in Github. git push origin master Sends your commits to GitHub.","title":"Summary of Git  Commands"},{"location":"content/setup/github-classroom/","text":"Github Classroom Setup Now that you have your GitHub account and git installed on your laptop, you need to get access to our class repository. This will copy the sample code, labs, and homework assignments into your personal Github account. Before You Begin Have your GitHub username and password handy. Setup Procedure Go to the https://github.com/ website and sign in with your GitHub with the account and password. Click on this GitHub Classroom invite link here: https://classroom.github.com/a/qWFcZxtN A Page will ask you to accept the assignment. The part highlighted in yellow will match your GitHub username. Please note the name of the assignment will more than likely begin with the year and semester in it. Click Accept this assignment You might be asked to accept some permissions. Make sure to accept them. After that you will then see this confirmation screen. Click the link at the bottom of the message to go to your repository page. (The link following the text Your assignment has been created here: ) Your repository page will look like this: As usual, the highlighted portions should match your GitHub username su-*yournetid *. Things You\u2019ll Need for Future Steps: Your GitHub username and password. Your GitHub Classroom repository Url, which you can get by following this procedure: From the repository page (where you left off), click on the clone or download button: Copy the link under Clone with HTTPS .","title":"Github Classroom Setup"},{"location":"content/setup/github-classroom/#github-classroom-setup","text":"Now that you have your GitHub account and git installed on your laptop, you need to get access to our class repository. This will copy the sample code, labs, and homework assignments into your personal Github account.","title":"Github Classroom Setup"},{"location":"content/setup/github-classroom/#before-you-begin","text":"Have your GitHub username and password handy.","title":"Before You Begin"},{"location":"content/setup/github-classroom/#setup-procedure","text":"Go to the https://github.com/ website and sign in with your GitHub with the account and password. Click on this GitHub Classroom invite link here: https://classroom.github.com/a/qWFcZxtN A Page will ask you to accept the assignment. The part highlighted in yellow will match your GitHub username. Please note the name of the assignment will more than likely begin with the year and semester in it. Click Accept this assignment You might be asked to accept some permissions. Make sure to accept them. After that you will then see this confirmation screen. Click the link at the bottom of the message to go to your repository page. (The link following the text Your assignment has been created here: ) Your repository page will look like this: As usual, the highlighted portions should match your GitHub username su-*yournetid *.","title":"Setup Procedure"},{"location":"content/setup/github-classroom/#things-youll-need-for-future-steps","text":"Your GitHub username and password. Your GitHub Classroom repository Url, which you can get by following this procedure: From the repository page (where you left off), click on the clone or download button: Copy the link under Clone with HTTPS .","title":"Things You'll Need for Future Steps:"},{"location":"content/setup/github/","text":"Setup Your Github Account In this course we will use Github several times each week as you submit your labs and homework. Github for Education is a free service for educational use. Git gives to the benefit of code backups and an \u201cundo\u201d button in the event you accidentally change or delete your code. There a small learning curve to Git and Github, but once you git the hang of it its far more efficient than using email or Blackboard to exchange code. Before You Begin Make sure you know your NetID and SU Email address. You will need to set a username for GitHub. Please use yournetid -su . For example, my Github username would be mafudge-su . You will need to set a Github password. Please do not use your NetID password. You will need to remember this password for future steps. Setup Procedure Go to https://github.com/ and click on the Sign up button in the upper-right. THE PROFESSORS NEED TO KNOW ITS YOU! In the Username field enter your netid -su for example my GitHub username is mafudge-su . In the Email Address field enter your @syr.edu email, for example, I would enter mafudge@syr.edu . In the password field, enter anything you want. You should NOT use your NetID password here. NOTE: Remember your password - You\u2019ll need it for later! Click Create Acccount to move on to the next step. Select the free plan. You will not need any other plan. click Continue . Now go to your @syr.edu email, and look for an email from GitHub. Click on the link in the email to verify your account . Congratulations! You have a Github account! Now help your professors out! Change your avatar to be a photo of yourself: https://help.github.com/articles/setting-your-profile-picture/ Things You\u2019ll Need for Future Steps: Your Github username and password!","title":"Setup Your Github Account"},{"location":"content/setup/github/#setup-your-github-account","text":"In this course we will use Github several times each week as you submit your labs and homework. Github for Education is a free service for educational use. Git gives to the benefit of code backups and an \u201cundo\u201d button in the event you accidentally change or delete your code. There a small learning curve to Git and Github, but once you git the hang of it its far more efficient than using email or Blackboard to exchange code.","title":"Setup Your Github Account"},{"location":"content/setup/github/#before-you-begin","text":"Make sure you know your NetID and SU Email address. You will need to set a username for GitHub. Please use yournetid -su . For example, my Github username would be mafudge-su . You will need to set a Github password. Please do not use your NetID password. You will need to remember this password for future steps.","title":"Before You Begin"},{"location":"content/setup/github/#setup-procedure","text":"Go to https://github.com/ and click on the Sign up button in the upper-right. THE PROFESSORS NEED TO KNOW ITS YOU! In the Username field enter your netid -su for example my GitHub username is mafudge-su . In the Email Address field enter your @syr.edu email, for example, I would enter mafudge@syr.edu . In the password field, enter anything you want. You should NOT use your NetID password here. NOTE: Remember your password - You\u2019ll need it for later! Click Create Acccount to move on to the next step. Select the free plan. You will not need any other plan. click Continue . Now go to your @syr.edu email, and look for an email from GitHub. Click on the link in the email to verify your account . Congratulations! You have a Github account! Now help your professors out! Change your avatar to be a photo of yourself: https://help.github.com/articles/setting-your-profile-picture/","title":"Setup Procedure"},{"location":"content/setup/github/#things-youll-need-for-future-steps","text":"Your Github username and password!","title":"Things You'll Need for Future Steps:"},{"location":"content/setup/jupyterhub/","text":"Migrating to Jupyterhub Before You Begin Have the following information handy: Your GitHub username and password. Your GitHub Classroom repository URL (copy it from the github website). The name of your Github repository. This comes after the IST256-classroom. part of your repository URL. Login to azure notebooks and open the terminal: commit any changes you have made: git add --all git commit -m \"moving to jupyterhub\" push code to github: git push origin master Procedure Visit: https://jupyterhub.ischool.syr.edu/ . Click the Sign in with iSchool SSO button. Click the Login with your SU NetID button , then login. In about a minute your server will start. When it is finished you will see the Jupyter website. Open a terminal. New \u2013> Terminal Clone your repository: git clone then paste in your close repository from the previous step. For example mine was https://github.com/IST256-classroom/2019-fall-learn-python-spring-mafudge . You will be prompted for your github username. You will be prompted for your github password. YOU WILL NOT SEE ANY CHARACTERS YOU TYPE. When you authenticate, the cloning process will start which takes about 1 minute. After you clone the repository move into the repository folder: cd FOLDER where folder is the name of your Github repository. You can start typing it and press the TAB key to complete it. From inside your repository folder, Type: git config credential.helper store to configure git to save passwords. Type: git config --global user.email \"netid@syr.edu\" to configure git to use your email. MAKE SURE TO USE YOUR SU EMAIL ADDRESS! Type: git config --global user.name \"Your Name\" to configure git commits with your name. AGAIN USE YOUR FULL NAME HERE e.g. Michael Fudge. You are now setup on jupyterhub!!!","title":"Migrating to Jupyterhub"},{"location":"content/setup/jupyterhub/#migrating-to-jupyterhub","text":"","title":"Migrating to Jupyterhub"},{"location":"content/setup/jupyterhub/#before-you-begin","text":"Have the following information handy: Your GitHub username and password. Your GitHub Classroom repository URL (copy it from the github website). The name of your Github repository. This comes after the IST256-classroom. part of your repository URL. Login to azure notebooks and open the terminal: commit any changes you have made: git add --all git commit -m \"moving to jupyterhub\" push code to github: git push origin master","title":"Before You Begin"},{"location":"content/setup/jupyterhub/#procedure","text":"Visit: https://jupyterhub.ischool.syr.edu/ . Click the Sign in with iSchool SSO button. Click the Login with your SU NetID button , then login. In about a minute your server will start. When it is finished you will see the Jupyter website. Open a terminal. New \u2013> Terminal Clone your repository: git clone then paste in your close repository from the previous step. For example mine was https://github.com/IST256-classroom/2019-fall-learn-python-spring-mafudge . You will be prompted for your github username. You will be prompted for your github password. YOU WILL NOT SEE ANY CHARACTERS YOU TYPE. When you authenticate, the cloning process will start which takes about 1 minute. After you clone the repository move into the repository folder: cd FOLDER where folder is the name of your Github repository. You can start typing it and press the TAB key to complete it. From inside your repository folder, Type: git config credential.helper store to configure git to save passwords. Type: git config --global user.email \"netid@syr.edu\" to configure git to use your email. MAKE SURE TO USE YOUR SU EMAIL ADDRESS! Type: git config --global user.name \"Your Name\" to configure git commits with your name. AGAIN USE YOUR FULL NAME HERE e.g. Michael Fudge. You are now setup on jupyterhub!!!","title":"Procedure"},{"location":"content/setup/osx/","text":"Python/Git Install Instructions for OSX IMPORTANT NOTE You should no longer require these instructions, however if you would like to install the python environment on your personal computer, continue. For this course you will need to install the following applications: Python 3.6.6 A bunch of Python Modules Git 2.18 Each of these applications are free / open-source and will not cost you any money. Detailed instructions for how to install these applications are provided below. Before You Begin Make sure you have at least 500MB (1/2 GB) free space on your computer. If you don\u2019t know how to check this, refer to these instructions: http://www.macworld.com/article/2972775/os-x/how-to-check-your-macs-free-hard-drive-space.html You must know how to create a folder. Don\u2019t know how to do this? Check out: https://support.apple.com/kb/PH25633?locale=en_US You must know how to open up the command line / a terminal window on your Mac. It can be in any folder. Not sure how to do this? Consult this article: How Do I Open The Command Line? Make sure your computer is plugged in or fully charged and you have a good internet connection. Setup Procedure Step 0 : Folder and Command Line Create a folder called IST256 . You can make this folder where ever you want: on your desktop, in your Documents , etc\u2026 What\u2019s most important is to remember where it is and how to find it ! Open the command line on your computer inside this folder. For more info, read: How Do I Open The Command Line? Check yourself. From the command line, type: pwd and press the ENTER key. Does the Path have IST256 at the end? Then you are in the correct folder and may proceed! Automatic Setup Instructions Why not try the automated setup first? If it works for you, woot! From the command line, type: curl -o install.sh http://ist256.github.io/content/install/osx/install.txt && bash install.sh This will start the process of installing everything. This will take a few minutes to complete. NOTE: You may have to enter your administrator password. When the setup is complete, check the reported versions output by the setup script. They should be these version numbers at minimum: Python 3.6.6 Jupyter 5.5.0 Pip 18.1 Git 2.18.0 You can check these yourself if you like with these commands: python3 --version jupyter-notebook --version pip3 --version and git --version If everything reports correctly, complete the rest of the Course Setup Checklist Manual Setup Instructions ONLY DO THESE IF YOUR AUTOMATIC SETUP DOES NOT WORK! Step 1: Install Python First we will install Python. From the command line, type each of these and press ENTER to execute them: First we will download Python to our computer. Command to type: curl --remote-name https://www.python.org/ftp/python/3.6.6/python-3.6.6-macosx10.9.pkg After the file is downloaded, we can install Python. Command to type: sudo installer -pkg python-3.6.6-macosx10.9.pkg -target / NOTE: You will need to type your admin password at the command prompt. The setup will take a minute or so. Be patient. When it is finished it will say: installer: The install was successful Execute the following command to setup the python environment: sh /Applications/Python\\ 3.6/Update\\ Shell\\ Profile.command Execute the following command to setup the python certificates: sh /Applications/Python\\ 3.6/Install\\ Certificates.command Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Make sure you\u2019re using the correct version. When you type: python3 --version it should say. Python 3.6.6 . Try out python to see if it works. Type this command. python3 -c \"print('YAY')\" If it works, you will see YAY in your terminal window. If so, it\u2019s time to move on to the next step. If you see errors, something went wrong with the previous steps. Step 2: Install Python modules Next we will install the common Python modules we will use in this course. This will save you a lot of time and headaches later on! First we will upgrade pip Python\u2019s package manager. From the command line, type: python3 -m pip install --upgrade pip Next we install the Python JupyterLab environment we will use to write our code. pip3 install --upgrade ipython jupyter jupyterlab setuptools wheel This will take a while as it downloads these modules and their dependencies from the internet. Next we install more modules we will use in this course. Type: pip3 install -U geocoder lxml terminado numpy scipy requests Again, this might take a few minutes, so be patient. Finally, we install the last round of Python modules we will use in this course. Type: pip3 install -U pandas matplotlib plotly cufflinks folium bs4 And as usual it will take some time to install these modules. You can verify Jupyter is working by typing the following at the command line: jupyter-lab If it works, you will see Jupyter Lab open in your web browser. To exit Jupyter, close the browser, return to the command line and press CTRL+C two times. Close the terminal window. Step 3: Install the git utility. First we will download Python to our computer. Command to type: curl -o git-2.18.0-intel-universal-mavericks.dmg -L https://sourceforge.net/projects/git-osx-installer/files/git-2.18.0-intel-universal-mavericks.dmg/download?use_mirror=autoselect -O After the download we can mount the image: hdiutil attach git-2.18.0-intel-universal-mavericks.dmg After the mount completes, we can install Git. Command to type: sudo installer -pkg /Volumes/Git\\ 2.18.0\\ Mavericks\\ Intel\\ Universal/git-2.18.0-intel-universal-mavericks.pkg -target / The setup will take a minute or so. Be patient. When it is finished it will say: installer: The install was successful . Umount the the image: hdiutil detach /Volumes/Git\\ 2.18.0\\ Mavericks\\ Intel\\ Universal Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Try out python to see if it works. Type this command. git --version If it works, you will see 2.18 in your terminal window as the Git version. If so you\u2019re done!","title":"Python/Git Install Instructions for OSX :fa-apple:"},{"location":"content/setup/osx/#pythongit-install-instructions-for-osx","text":"","title":"Python/Git Install Instructions for OSX"},{"location":"content/setup/osx/#important-note","text":"You should no longer require these instructions, however if you would like to install the python environment on your personal computer, continue. For this course you will need to install the following applications: Python 3.6.6 A bunch of Python Modules Git 2.18 Each of these applications are free / open-source and will not cost you any money. Detailed instructions for how to install these applications are provided below.","title":"IMPORTANT NOTE"},{"location":"content/setup/osx/#before-you-begin","text":"Make sure you have at least 500MB (1/2 GB) free space on your computer. If you don\u2019t know how to check this, refer to these instructions: http://www.macworld.com/article/2972775/os-x/how-to-check-your-macs-free-hard-drive-space.html You must know how to create a folder. Don\u2019t know how to do this? Check out: https://support.apple.com/kb/PH25633?locale=en_US You must know how to open up the command line / a terminal window on your Mac. It can be in any folder. Not sure how to do this? Consult this article: How Do I Open The Command Line? Make sure your computer is plugged in or fully charged and you have a good internet connection.","title":"Before You Begin"},{"location":"content/setup/osx/#setup-procedure","text":"","title":"Setup Procedure"},{"location":"content/setup/osx/#step-0-folder-and-command-line","text":"Create a folder called IST256 . You can make this folder where ever you want: on your desktop, in your Documents , etc\u2026 What\u2019s most important is to remember where it is and how to find it ! Open the command line on your computer inside this folder. For more info, read: How Do I Open The Command Line? Check yourself. From the command line, type: pwd and press the ENTER key. Does the Path have IST256 at the end? Then you are in the correct folder and may proceed!","title":"Step 0 : Folder and Command Line"},{"location":"content/setup/osx/#automatic-setup-instructions","text":"Why not try the automated setup first? If it works for you, woot! From the command line, type: curl -o install.sh http://ist256.github.io/content/install/osx/install.txt && bash install.sh This will start the process of installing everything. This will take a few minutes to complete. NOTE: You may have to enter your administrator password. When the setup is complete, check the reported versions output by the setup script. They should be these version numbers at minimum: Python 3.6.6 Jupyter 5.5.0 Pip 18.1 Git 2.18.0 You can check these yourself if you like with these commands: python3 --version jupyter-notebook --version pip3 --version and git --version If everything reports correctly, complete the rest of the Course Setup Checklist","title":"Automatic Setup Instructions"},{"location":"content/setup/osx/#manual-setup-instructions","text":"ONLY DO THESE IF YOUR AUTOMATIC SETUP DOES NOT WORK!","title":"Manual Setup Instructions"},{"location":"content/setup/osx/#step-1-install-python","text":"First we will install Python. From the command line, type each of these and press ENTER to execute them: First we will download Python to our computer. Command to type: curl --remote-name https://www.python.org/ftp/python/3.6.6/python-3.6.6-macosx10.9.pkg After the file is downloaded, we can install Python. Command to type: sudo installer -pkg python-3.6.6-macosx10.9.pkg -target / NOTE: You will need to type your admin password at the command prompt. The setup will take a minute or so. Be patient. When it is finished it will say: installer: The install was successful Execute the following command to setup the python environment: sh /Applications/Python\\ 3.6/Update\\ Shell\\ Profile.command Execute the following command to setup the python certificates: sh /Applications/Python\\ 3.6/Install\\ Certificates.command Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Make sure you\u2019re using the correct version. When you type: python3 --version it should say. Python 3.6.6 . Try out python to see if it works. Type this command. python3 -c \"print('YAY')\" If it works, you will see YAY in your terminal window. If so, it\u2019s time to move on to the next step. If you see errors, something went wrong with the previous steps.","title":"Step 1: Install Python"},{"location":"content/setup/osx/#step-2-install-python-modules","text":"Next we will install the common Python modules we will use in this course. This will save you a lot of time and headaches later on! First we will upgrade pip Python\u2019s package manager. From the command line, type: python3 -m pip install --upgrade pip Next we install the Python JupyterLab environment we will use to write our code. pip3 install --upgrade ipython jupyter jupyterlab setuptools wheel This will take a while as it downloads these modules and their dependencies from the internet. Next we install more modules we will use in this course. Type: pip3 install -U geocoder lxml terminado numpy scipy requests Again, this might take a few minutes, so be patient. Finally, we install the last round of Python modules we will use in this course. Type: pip3 install -U pandas matplotlib plotly cufflinks folium bs4 And as usual it will take some time to install these modules. You can verify Jupyter is working by typing the following at the command line: jupyter-lab If it works, you will see Jupyter Lab open in your web browser. To exit Jupyter, close the browser, return to the command line and press CTRL+C two times. Close the terminal window.","title":"Step 2: Install Python modules"},{"location":"content/setup/osx/#step-3-install-the-git-utility","text":"First we will download Python to our computer. Command to type: curl -o git-2.18.0-intel-universal-mavericks.dmg -L https://sourceforge.net/projects/git-osx-installer/files/git-2.18.0-intel-universal-mavericks.dmg/download?use_mirror=autoselect -O After the download we can mount the image: hdiutil attach git-2.18.0-intel-universal-mavericks.dmg After the mount completes, we can install Git. Command to type: sudo installer -pkg /Volumes/Git\\ 2.18.0\\ Mavericks\\ Intel\\ Universal/git-2.18.0-intel-universal-mavericks.pkg -target / The setup will take a minute or so. Be patient. When it is finished it will say: installer: The install was successful . Umount the the image: hdiutil detach /Volumes/Git\\ 2.18.0\\ Mavericks\\ Intel\\ Universal Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Try out python to see if it works. Type this command. git --version If it works, you will see 2.18 in your terminal window as the Git version. If so you\u2019re done!","title":"Step 3: Install the git utility."},{"location":"content/setup/overview/","text":"Course Setup Checklist This course requires students to use a variety of free, cloud-based tools for programming in Python, completing labs, and submitting work. This document outlines a step-by-step process of setting up your programming environment, which because it uses the cloud will be accessible from anywhere you have a web browser and access to the internet. Every student in the course is required to setup their own environment. The process is simple and straightforward. Procedure at a Glance You should complete these steps in the following order: Signup for a GitHub Account. You will use GitHub and your GitHub account to turn in work you complete in the course Setup Github Classroom. Github classroom distributes the code samples, labs, and homework assignments used in this course to your GitHub account. Signup for Azure Notebooks. Azure notebooks is a cloud-based programming environment. You will use it to code in Python from within your web browser. Clone your Git repository into Azure notebooks. In this final step, you will clone the code from your GitHub account into the Azure Notebooks environment. Test your Setup. You\u2019re ready to test your setup by committing code using git from the command line.","title":"Course Setup Checklist"},{"location":"content/setup/overview/#course-setup-checklist","text":"This course requires students to use a variety of free, cloud-based tools for programming in Python, completing labs, and submitting work. This document outlines a step-by-step process of setting up your programming environment, which because it uses the cloud will be accessible from anywhere you have a web browser and access to the internet. Every student in the course is required to setup their own environment. The process is simple and straightforward.","title":"Course Setup Checklist"},{"location":"content/setup/overview/#procedure-at-a-glance","text":"You should complete these steps in the following order: Signup for a GitHub Account. You will use GitHub and your GitHub account to turn in work you complete in the course Setup Github Classroom. Github classroom distributes the code samples, labs, and homework assignments used in this course to your GitHub account. Signup for Azure Notebooks. Azure notebooks is a cloud-based programming environment. You will use it to code in Python from within your web browser. Clone your Git repository into Azure notebooks. In this final step, you will clone the code from your GitHub account into the Azure Notebooks environment. Test your Setup. You\u2019re ready to test your setup by committing code using git from the command line.","title":"Procedure at a Glance"},{"location":"content/setup/win/","text":"Python/Git Install Instructions for Windows IMPORTANT NOTE You should no longer require these instructions, however if you would like to install the python environment on your personal computer, continue. For this course you will need to install the following applications: Python 3.6.6 A bunch of Python Modules Git 2.18 Each of these applications are free / open-source and will not cost you any money. Detailed instructions for how to install these applications are provided below. Before You Begin Make sure you have at least 250MB (1/4 GB) free space on your computer. If you don\u2019t know how to check this, refer to these instructions: http://www.windowscentral.com/windows-10-check-free-space-hard-disk Are you 32bit or 64bit Windows? Most new computers are going to be 64-bit, but some consumer-grade Windows laptops are still 32-bit. Here\u2019s how you figure it out: http://www.howtogeek.com/howto/21726/how-do-i-know-if-im-running-32-bit-or-64-bit-windows-answers/ You must know how to create a folder. Don\u2019t know how to do this? Check out: https://www.laptopmag.com/articles/create-new-folder-windows-10 You must know how to open up the command line / a terminal window on your PC. It can be in any folder. Not sure how to do this? Consult this article: How Do I Open The Command Line? Make sure your computer is plugged in or fully charged and you have a good internet connection. The setup can take a while. Setup Procedure Step 0 : Folder and Command Line (PowerShell) Create a folder called IST256 . You can make this folder where ever you want: on your desktop, in your Documents , etc\u2026 What\u2019s most important is to remember where it is and how to find it ! Open the command line on your computer inside this folder. For more info, read: How Do I Open The Command Line? Check yourself. From the command line, type: pwd and press the ENTER key. Does the Path have IST256 at the end? Then you are in the correct folder and may proceed! Automatic Setup Instructions Why not try the automated setup first? If it works for you, woot! From the command line, type: wget http://ist256.github.io/content/install/win/install.txt -OutFile install.ps1 | Powershell -ExecutionPolicy Bypass -File install.ps1 This will start the process of installing everything. This will take a few minutes to complete. NOTE: You may have to enter your administrator password. When the setup is complete, check the reported versions output by the setup script. They should be at least these versions: Python 3.6.6 Jupyter 5.5.0 Pip 18.1 Git 2.18.0 You can check these yourself if you like with these commands: python --version jupyter-notebook --version pip --version and git --version If everything reports correctly, complete the rest of the Course Setup Checklist Manual Setup Instructions ONLY DO THESE IF YOUR AUTOMATIC SETUP DOES NOT WORK! Step 1: Install Python First we will install Python. From the command line, type each of these and press ENTER to execute them: First we need to update PowerShell to use the latest SSL protocol. Type: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Now we will download Python to our computer. Command to type: wget https://www.python.org/ftp/python/3.6.6/python-3.6.6-amd64.exe -OutFile python-3.6.6-amd64.exe After the file is downloaded, we can install Python. Command to type: .\\python-3.6.6-amd64.exe /passive InstallAllUsers=0 PrependPath=1 SimpleInstall=1 The setup will take a minute or so. Be patient. Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Try out python to see if it works. Type this command. python -c \"print('YAY')\" If it works, you will see YAY in your terminal window. If so, it\u2019s time to move on to the next step. If you see errors, something went wrong with the previous steps. Step 2: Install Python modules Next we will install the common Python components we will use in this course. This will save you a lot of time and headaches later on! First we will upgrade pip Python\u2019s package manager. From the command line, type: python -m pip install --upgrade pip Next we install the Python JupyterLab environment we will use to write our code. pip install --upgrade ipython jupyter jupyterlab setuptools wheel This will take a while as it downloads these modules and their dependencies from the internet. Next we install more modules we will use in this course. Type: pip install -U geocoder lxml terminado numpy scipy requests Again, this might take a few minutes, so be patient. Finally, we install the last round of Python modules we will use in this course. Type: pip install -U pandas matplotlib plotly cufflinks folium bs4 And as usual it will take some time to install these modules. You can verify Jupyter is working by typing the following at the command line: jupyter-lab If it works, you will see Jupyter Lab open in your web browser. To exit Jupyter, close the browser, return to the command line and press CTRL+C two times. Close the terminal window. Step 3: Install the git utility. Again, first we need to update PowerShell to use the latest SSL protocol. Type: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 First we will download Git to our computer. Command to type: wget https://github.com/git-for-windows/git/releases/download/v2.18.0.windows.1/Git-2.18.0-64-bit.exe -OutFile git-2.18.0-64-bit.exe After the file is downloaded, we can install Git. Command to type: ./git-2.18.0-64-bit.exe /SILENT The setup will take a minute or so. Be patient. Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Try out python to see if it works. Type this command. git --version If it works, you will see 2.18 in your terminal window as the Git version. If so you\u2019re done!","title":"Python/Git Install Instructions for Windows :fa-windows:"},{"location":"content/setup/win/#pythongit-install-instructions-for-windows","text":"","title":"Python/Git Install Instructions for Windows"},{"location":"content/setup/win/#important-note","text":"You should no longer require these instructions, however if you would like to install the python environment on your personal computer, continue. For this course you will need to install the following applications: Python 3.6.6 A bunch of Python Modules Git 2.18 Each of these applications are free / open-source and will not cost you any money. Detailed instructions for how to install these applications are provided below.","title":"IMPORTANT NOTE"},{"location":"content/setup/win/#before-you-begin","text":"Make sure you have at least 250MB (1/4 GB) free space on your computer. If you don\u2019t know how to check this, refer to these instructions: http://www.windowscentral.com/windows-10-check-free-space-hard-disk Are you 32bit or 64bit Windows? Most new computers are going to be 64-bit, but some consumer-grade Windows laptops are still 32-bit. Here\u2019s how you figure it out: http://www.howtogeek.com/howto/21726/how-do-i-know-if-im-running-32-bit-or-64-bit-windows-answers/ You must know how to create a folder. Don\u2019t know how to do this? Check out: https://www.laptopmag.com/articles/create-new-folder-windows-10 You must know how to open up the command line / a terminal window on your PC. It can be in any folder. Not sure how to do this? Consult this article: How Do I Open The Command Line? Make sure your computer is plugged in or fully charged and you have a good internet connection. The setup can take a while.","title":"Before You Begin"},{"location":"content/setup/win/#setup-procedure","text":"","title":"Setup Procedure"},{"location":"content/setup/win/#step-0-folder-and-command-line-powershell","text":"Create a folder called IST256 . You can make this folder where ever you want: on your desktop, in your Documents , etc\u2026 What\u2019s most important is to remember where it is and how to find it ! Open the command line on your computer inside this folder. For more info, read: How Do I Open The Command Line? Check yourself. From the command line, type: pwd and press the ENTER key. Does the Path have IST256 at the end? Then you are in the correct folder and may proceed!","title":"Step 0 : Folder and Command Line (PowerShell)"},{"location":"content/setup/win/#automatic-setup-instructions","text":"Why not try the automated setup first? If it works for you, woot! From the command line, type: wget http://ist256.github.io/content/install/win/install.txt -OutFile install.ps1 | Powershell -ExecutionPolicy Bypass -File install.ps1 This will start the process of installing everything. This will take a few minutes to complete. NOTE: You may have to enter your administrator password. When the setup is complete, check the reported versions output by the setup script. They should be at least these versions: Python 3.6.6 Jupyter 5.5.0 Pip 18.1 Git 2.18.0 You can check these yourself if you like with these commands: python --version jupyter-notebook --version pip --version and git --version If everything reports correctly, complete the rest of the Course Setup Checklist","title":"Automatic Setup Instructions"},{"location":"content/setup/win/#manual-setup-instructions","text":"ONLY DO THESE IF YOUR AUTOMATIC SETUP DOES NOT WORK!","title":"Manual Setup Instructions"},{"location":"content/setup/win/#step-1-install-python","text":"First we will install Python. From the command line, type each of these and press ENTER to execute them: First we need to update PowerShell to use the latest SSL protocol. Type: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Now we will download Python to our computer. Command to type: wget https://www.python.org/ftp/python/3.6.6/python-3.6.6-amd64.exe -OutFile python-3.6.6-amd64.exe After the file is downloaded, we can install Python. Command to type: .\\python-3.6.6-amd64.exe /passive InstallAllUsers=0 PrependPath=1 SimpleInstall=1 The setup will take a minute or so. Be patient. Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Try out python to see if it works. Type this command. python -c \"print('YAY')\" If it works, you will see YAY in your terminal window. If so, it\u2019s time to move on to the next step. If you see errors, something went wrong with the previous steps.","title":"Step 1: Install Python"},{"location":"content/setup/win/#step-2-install-python-modules","text":"Next we will install the common Python components we will use in this course. This will save you a lot of time and headaches later on! First we will upgrade pip Python\u2019s package manager. From the command line, type: python -m pip install --upgrade pip Next we install the Python JupyterLab environment we will use to write our code. pip install --upgrade ipython jupyter jupyterlab setuptools wheel This will take a while as it downloads these modules and their dependencies from the internet. Next we install more modules we will use in this course. Type: pip install -U geocoder lxml terminado numpy scipy requests Again, this might take a few minutes, so be patient. Finally, we install the last round of Python modules we will use in this course. Type: pip install -U pandas matplotlib plotly cufflinks folium bs4 And as usual it will take some time to install these modules. You can verify Jupyter is working by typing the following at the command line: jupyter-lab If it works, you will see Jupyter Lab open in your web browser. To exit Jupyter, close the browser, return to the command line and press CTRL+C two times. Close the terminal window.","title":"Step 2: Install Python modules"},{"location":"content/setup/win/#step-3-install-the-git-utility","text":"Again, first we need to update PowerShell to use the latest SSL protocol. Type: [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 First we will download Git to our computer. Command to type: wget https://github.com/git-for-windows/git/releases/download/v2.18.0.windows.1/Git-2.18.0-64-bit.exe -OutFile git-2.18.0-64-bit.exe After the file is downloaded, we can install Git. Command to type: ./git-2.18.0-64-bit.exe /SILENT The setup will take a minute or so. Be patient. Close the command line window, then re-open the command line in your IST256 folder. This is an important step. Python will not work unless you do this! Try out python to see if it works. Type this command. git --version If it works, you will see 2.18 in your terminal window as the Git version. If so you\u2019re done!","title":"Step 3: Install the git utility."}]}