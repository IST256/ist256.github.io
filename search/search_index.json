{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IST256 Fall 2023 Survival Guide Course Schedule Dates Topic (Click Link for Content and Assigned Readings) 8/28 - 9/3 Lesson 01: Introduction to Python Programming 9/4 - 9/10 9/4: Labor Day No Classes 9/6: Lesson 02: Input, Output, Variables and Types 9/11 - 9/17 Lesson 03: Conditionals 9/18 - 9/24 Lesson 04: Iterations 9/25 - 10/1 Lesson 05: User-defined Functions, Modules 10/2 - 10/8 Lesson 06: Strings and Text Processing 10/9 - 10/15 10/9: Fall Break No Classes 10/11: Exam 2 (E1) In Small Group 10/16 - 10/22 Lesson 07: File I/O and Persistence 10/23 - 10/29 Lesson 08: Lists 10/30 - 11/5 Lesson 09: Dictionaries and JSON 11/6 - 11/12 Lesson 10: HTTP Protocol and Network Programming 11/13 - 11/19 Lesson 11: Web API\u2019s 11/17: P1 Due 11/20 - 11/26 No Classes Thanksgiving Break 11/27 - 12/3 Lesson 12: Data Analysis with Pandas 12/4 - 12/10 Lesson 13: Data Visualization 12/11 - 12/18 12/11: Exam 2 (E2) In Large Group 12/12: P2 Due (No Class Wed) 12/18 - 12/19 12/19: P3,P4 Due What\u2019s Due? Use this table to track the due dates of all graded work in this course. Dates and times are Eastern Time Zone. Date Due Time Due Gradebook Points Where What is Due? 8/29/2023 11:59 PM L01 3 Jupyterhub 01-Intro/LAB-Intro.ipynb 8/30/2023 11:59 PM S01 3 Jupyterhub 01-Intro/SmallGroup-Intro.ipynb 9/1/2023 11:59 PM H01 3 Jupyterhub 01-Intro/HW-Intro.ipynb 9/5/2023 11:59 PM L02 3 Jupyterhub 02-Variables/LAB-Variables.ipynb 9/6/2023 11:59 PM S02 3 Jupyterhub 02-Variables/SmallGroup-Variables.ipynb 9/8/2023 11:59 PM H02 3 Jupyterhub 02-Variables/HW-Variables.ipynb 9/12/2023 11:59 PM L03 3 Jupyterhub 03-Conditionals/LAB-Conditionals.ipynb 9/13/2023 11:59 PM S03 3 Jupyterhub 03-Conditionals/SmallGroup-Conditionals.ipynb 9/15/2023 11:59 PM H03 3 Jupyterhub 03-Conditionals/HW-Conditionals.ipynb 9/19/2023 11:59 PM L04 3 Jupyterhub 04-Iterations/LAB-Iterations.ipynb 9/20/2023 11:59 PM S04 3 Jupyterhub 04-Iterations/SmallGroup-Iterations.ipynb 9/22/2023 11:59 PM H04 3 Jupyterhub 04-Iterations/HW-Iterations.ipynb 9/26/2023 11:59 PM L05 3 Jupyterhub 05-Functions/LAB-Functions.ipynb 9/27/2023 11:59 PM S05 3 Jupyterhub 05-Functions/SmallGroup-Functions.ipynb 9/29/2023 11:59 PM H05 3 Jupyterhub 05-Functions/HW-Functions.ipynb 10/3/2023 11:59 PM L06 3 Jupyterhub 06-Strings/LAB-Strings.ipynb 10/4/2023 11:59 PM S06 3 Jupyterhub 06-Strings/SmallGroup-Strings.ipynb 10/6/2023 11:59 PM H06 3 Jupyterhub 06-Strings/HW-Strings.ipynb 10/11/2023 11:59 PM E1 45 Small Group E1: Exam 1 (Focus on Lessons 01-06) 10/17/2023 11:59 PM L07 3 Jupyterhub 07-Files/LAB-Files.ipynb 10/18/2023 11:59 PM S07 3 Jupyterhub 07-Files/SmallGroup-Files.ipynb 10/20/2023 11:59 PM H07 3 Jupyterhub 07-Files/HW-Files.ipynb 10/24/2023 11:59 PM L08 3 Jupyterhub 08-Lists/LAB-Lists.ipynb 10/25/2023 11:59 PM S08 3 Jupyterhub 08-Lists/SmallGroup-Lists.ipynb 10/27/2023 11:59 PM H08 3 Jupyterhub 08-Lists/HW-Lists.ipynb 10/31/2023 11:59 PM L09 3 Jupyterhub 09-Dictionaries/LAB-Dictionaries.ipynb 11/1/2023 11:59 PM S09 3 Jupyterhub 09-Dictionaries/SmallGroup-Dictionaries.ipynb 11/3/2023 11:59 PM H09 3 Jupyterhub 09-Dictionaries/HW-Dictionaries.ipynb 11/7/2023 11:59 PM L10 3 Jupyterhub 10-HTTP/LAB-HTTP.ipynb 11/8/2023 11:59 PM S10 3 Jupyterhub 10-HTTP/SmallGroup-HTTP.ipynb 11/10/2023 11:59 PM H10 3 Jupyterhub 10-HTTP/HW-HTTP.ipynb 11/14/2023 11:59 PM L11 3 Jupyterhub 11-WebAPIs/LAB-WebAPIs.ipynb 11/15/2023 11:59 PM S11 3 Jupyterhub 11-WebAPIs/SmallGroup-WebAPIs.ipynb 11/17/2023 11:59 PM H11 3 Jupyterhub 11-WebAPIs/HW-WebAPIs.ipynb 11/17/2023 11:59 PM P1 0 Jupyterhub project/P1.ipynb 11/28/2023 11:59 PM L12 3 Jupyterhub 12-Pandas/LAB-Pandas.ipynb 11/29/2023 11:59 PM S12 3 Jupyterhub 12-Pandas/SmallGroup-Pandas.ipynb 12/1/2023 11:59 PM H12 3 Jupyterhub 12-Pandas/HW-Pandas.ipynb 12/5/2023 11:59 PM L13 3 Jupyterhub 13-Visualization/LAB-Visualization.ipynb 12/6/2023 11:59 PM S13 3 Jupyterhub 13-Visualization/SmallGroup-Visualization.ipynb 12/8/2023 11:59 PM H13 3 Jupyterhub 13-Visualization/HW-Visualization.ipynb 12/11/2023 11:59 PM E2 45 Large Group E2: Exam 2 (Focus on Lessons 07-13) 12/12/2023 11:59 PM P2 0 Jupyterhub project/P2.ipynb 12/19/2023 11:59 PM P3 0 Jupyterhub project/P3.ipynb 12/19/2023 11:59 PM P4 49 Jupyterhub project/P4.ipynb Page last revised on: 2023-09-11","title":"Home"},{"location":"#ist256-fall-2023","text":"","title":"IST256 Fall 2023"},{"location":"#survival-guide","text":"","title":"Survival Guide"},{"location":"#course-schedule","text":"Dates Topic (Click Link for Content and Assigned Readings) 8/28 - 9/3 Lesson 01: Introduction to Python Programming 9/4 - 9/10 9/4: Labor Day No Classes 9/6: Lesson 02: Input, Output, Variables and Types 9/11 - 9/17 Lesson 03: Conditionals 9/18 - 9/24 Lesson 04: Iterations 9/25 - 10/1 Lesson 05: User-defined Functions, Modules 10/2 - 10/8 Lesson 06: Strings and Text Processing 10/9 - 10/15 10/9: Fall Break No Classes 10/11: Exam 2 (E1) In Small Group 10/16 - 10/22 Lesson 07: File I/O and Persistence 10/23 - 10/29 Lesson 08: Lists 10/30 - 11/5 Lesson 09: Dictionaries and JSON 11/6 - 11/12 Lesson 10: HTTP Protocol and Network Programming 11/13 - 11/19 Lesson 11: Web API\u2019s 11/17: P1 Due 11/20 - 11/26 No Classes Thanksgiving Break 11/27 - 12/3 Lesson 12: Data Analysis with Pandas 12/4 - 12/10 Lesson 13: Data Visualization 12/11 - 12/18 12/11: Exam 2 (E2) In Large Group 12/12: P2 Due (No Class Wed) 12/18 - 12/19 12/19: P3,P4 Due","title":"Course Schedule"},{"location":"#whats-due","text":"Use this table to track the due dates of all graded work in this course. Dates and times are Eastern Time Zone. Date Due Time Due Gradebook Points Where What is Due? 8/29/2023 11:59 PM L01 3 Jupyterhub 01-Intro/LAB-Intro.ipynb 8/30/2023 11:59 PM S01 3 Jupyterhub 01-Intro/SmallGroup-Intro.ipynb 9/1/2023 11:59 PM H01 3 Jupyterhub 01-Intro/HW-Intro.ipynb 9/5/2023 11:59 PM L02 3 Jupyterhub 02-Variables/LAB-Variables.ipynb 9/6/2023 11:59 PM S02 3 Jupyterhub 02-Variables/SmallGroup-Variables.ipynb 9/8/2023 11:59 PM H02 3 Jupyterhub 02-Variables/HW-Variables.ipynb 9/12/2023 11:59 PM L03 3 Jupyterhub 03-Conditionals/LAB-Conditionals.ipynb 9/13/2023 11:59 PM S03 3 Jupyterhub 03-Conditionals/SmallGroup-Conditionals.ipynb 9/15/2023 11:59 PM H03 3 Jupyterhub 03-Conditionals/HW-Conditionals.ipynb 9/19/2023 11:59 PM L04 3 Jupyterhub 04-Iterations/LAB-Iterations.ipynb 9/20/2023 11:59 PM S04 3 Jupyterhub 04-Iterations/SmallGroup-Iterations.ipynb 9/22/2023 11:59 PM H04 3 Jupyterhub 04-Iterations/HW-Iterations.ipynb 9/26/2023 11:59 PM L05 3 Jupyterhub 05-Functions/LAB-Functions.ipynb 9/27/2023 11:59 PM S05 3 Jupyterhub 05-Functions/SmallGroup-Functions.ipynb 9/29/2023 11:59 PM H05 3 Jupyterhub 05-Functions/HW-Functions.ipynb 10/3/2023 11:59 PM L06 3 Jupyterhub 06-Strings/LAB-Strings.ipynb 10/4/2023 11:59 PM S06 3 Jupyterhub 06-Strings/SmallGroup-Strings.ipynb 10/6/2023 11:59 PM H06 3 Jupyterhub 06-Strings/HW-Strings.ipynb 10/11/2023 11:59 PM E1 45 Small Group E1: Exam 1 (Focus on Lessons 01-06) 10/17/2023 11:59 PM L07 3 Jupyterhub 07-Files/LAB-Files.ipynb 10/18/2023 11:59 PM S07 3 Jupyterhub 07-Files/SmallGroup-Files.ipynb 10/20/2023 11:59 PM H07 3 Jupyterhub 07-Files/HW-Files.ipynb 10/24/2023 11:59 PM L08 3 Jupyterhub 08-Lists/LAB-Lists.ipynb 10/25/2023 11:59 PM S08 3 Jupyterhub 08-Lists/SmallGroup-Lists.ipynb 10/27/2023 11:59 PM H08 3 Jupyterhub 08-Lists/HW-Lists.ipynb 10/31/2023 11:59 PM L09 3 Jupyterhub 09-Dictionaries/LAB-Dictionaries.ipynb 11/1/2023 11:59 PM S09 3 Jupyterhub 09-Dictionaries/SmallGroup-Dictionaries.ipynb 11/3/2023 11:59 PM H09 3 Jupyterhub 09-Dictionaries/HW-Dictionaries.ipynb 11/7/2023 11:59 PM L10 3 Jupyterhub 10-HTTP/LAB-HTTP.ipynb 11/8/2023 11:59 PM S10 3 Jupyterhub 10-HTTP/SmallGroup-HTTP.ipynb 11/10/2023 11:59 PM H10 3 Jupyterhub 10-HTTP/HW-HTTP.ipynb 11/14/2023 11:59 PM L11 3 Jupyterhub 11-WebAPIs/LAB-WebAPIs.ipynb 11/15/2023 11:59 PM S11 3 Jupyterhub 11-WebAPIs/SmallGroup-WebAPIs.ipynb 11/17/2023 11:59 PM H11 3 Jupyterhub 11-WebAPIs/HW-WebAPIs.ipynb 11/17/2023 11:59 PM P1 0 Jupyterhub project/P1.ipynb 11/28/2023 11:59 PM L12 3 Jupyterhub 12-Pandas/LAB-Pandas.ipynb 11/29/2023 11:59 PM S12 3 Jupyterhub 12-Pandas/SmallGroup-Pandas.ipynb 12/1/2023 11:59 PM H12 3 Jupyterhub 12-Pandas/HW-Pandas.ipynb 12/5/2023 11:59 PM L13 3 Jupyterhub 13-Visualization/LAB-Visualization.ipynb 12/6/2023 11:59 PM S13 3 Jupyterhub 13-Visualization/SmallGroup-Visualization.ipynb 12/8/2023 11:59 PM H13 3 Jupyterhub 13-Visualization/HW-Visualization.ipynb 12/11/2023 11:59 PM E2 45 Large Group E2: Exam 2 (Focus on Lessons 07-13) 12/12/2023 11:59 PM P2 0 Jupyterhub project/P2.ipynb 12/19/2023 11:59 PM P3 0 Jupyterhub project/P3.ipynb 12/19/2023 11:59 PM P4 49 Jupyterhub project/P4.ipynb Page last revised on: 2023-09-11","title":"What's Due?"},{"location":"about/","text":"About IST256 IST256 is an introductory programming course taught in the School of Information Studies at Syracuse university https://ischool.syr.edu . Programming is taught from the information sciences perspective with more emphasis on data-oriented applications such as text processing, data munging/analysis, Web API consumption, and visualization and less on computation. Students learn the Python https://www.python.org/ programming language and are expected to write code in the Jupyter https://jupyter.org Notebook interface. Python and Jupyter are common tools in data science today. The course uses a hosted Jupyterhub cluster https://zero-to-jupyterhub.readthedocs.io/en/latest/ for its programming environment. To code, students only need a web browser. The cluster runs on kubernetes and consists of 6 virtual machines with 8 threads and 64GB ram each. The cluster can support 100\u2019s of concurrent users and can be scaled to support more as the need arises. This website is a Github page, the source can be found here. https://github.com/IST256/IST256.github.io . The latest code repository of student assignments, labs, homework, class slides and code examples are also on Github, here: https://github.com/IST256/spring2021 . You are welcome to use the materials to take the course as an independent learner or as a foundation for teaching your own course in Python! Best, Michael Fudge mafudge at syr dot edu Many thanks to: Syracuse University ITS for providing the compute resources necessary to host the cluster https://its.syr.edu/ . Charles Severance for his excellent book, \u201cPython for Everybody\u201d https://www.py4e.com/ . Elliot Hauser for https://trinket.io . GitHub for hosting this website and the code repositories https://github.com . Nick Lyga for helping to get the kubernetes environment up and running https://nicklyga.me/ . The 100\u2019s of individuals in the Python and Jupyter communities!","title":"About"},{"location":"about/#about-ist256","text":"IST256 is an introductory programming course taught in the School of Information Studies at Syracuse university https://ischool.syr.edu . Programming is taught from the information sciences perspective with more emphasis on data-oriented applications such as text processing, data munging/analysis, Web API consumption, and visualization and less on computation. Students learn the Python https://www.python.org/ programming language and are expected to write code in the Jupyter https://jupyter.org Notebook interface. Python and Jupyter are common tools in data science today. The course uses a hosted Jupyterhub cluster https://zero-to-jupyterhub.readthedocs.io/en/latest/ for its programming environment. To code, students only need a web browser. The cluster runs on kubernetes and consists of 6 virtual machines with 8 threads and 64GB ram each. The cluster can support 100\u2019s of concurrent users and can be scaled to support more as the need arises. This website is a Github page, the source can be found here. https://github.com/IST256/IST256.github.io . The latest code repository of student assignments, labs, homework, class slides and code examples are also on Github, here: https://github.com/IST256/spring2021 . You are welcome to use the materials to take the course as an independent learner or as a foundation for teaching your own course in Python! Best, Michael Fudge mafudge at syr dot edu Many thanks to: Syracuse University ITS for providing the compute resources necessary to host the cluster https://its.syr.edu/ . Charles Severance for his excellent book, \u201cPython for Everybody\u201d https://www.py4e.com/ . Elliot Hauser for https://trinket.io . GitHub for hosting this website and the code repositories https://github.com . Nick Lyga for helping to get the kubernetes environment up and running https://nicklyga.me/ . The 100\u2019s of individuals in the Python and Jupyter communities!","title":"About IST256"},{"location":"content/","text":"Content Lesson 01: Introduction Overview This lesson we learn: What is Python? What are the advantages / disadvantages of the language? How does it compare with other programming languages? The Jupyter Notebook environment. How to execute programs from the Jupyter environment. Python programming language basics. Print, Assignment and Input statements. Writing simple programs in Python following the Input / Process / Output model. Required Reading / Viewing Severance Ch 1: Introduction Quick Introduction to Jupyter Notebook, by Michael Fudge More Resources, for Inspiration! How to think like a programmer - Lessons in problem solving Python for Everybody: Ch1 Part 1 | Part 2 | Part 3 | Part 4 , by Charles Severance \u201cTEDxSMU: You Should Learn to Program\u201d, by Christian Genco \u201cTEDxCERN: The poetry of programming\u201d, by Linda Liukas Large Group Video Lecture Lab Walk Through ` Homework Advice Lesson 02: Variables Overview This lesson we learn: What is a variable? What is its purpose? Variable assignment, and access. Different data types for variables. How to input variables of various types, check types, convert types, and print variables with formatting. Arithmetic expressions, arithmetic operators, and operands. Different ways to format output. Required Reading / Viewing Severance Ch 2: Variables, Expressions, Statements End to End Example: Variables and Types, by Michael Fudge Python for Everybody: Ch2 Part 1 | Part 2 , by Charles Severance Large Group Video Lecture NO CLASS, Enjoy Last Semester\u2019s Lecture Lab Walk Through Homework Advice Lesson 03: Conditionals Overview In this lesson we learn: How to make our code execute in a non linear fashion through the use of conditionals. Relational and logical operators for making Boolean expressions which form the basis of our decisions. Different types of non-linear execution like conditional execution, alternative execution, chaining, and nesting, and their appropriate uses. How to handle run-time errors with try..except. Required Reading / Viewing Severance Ch 3: Conditional Execution End to End Example: Conditionals, By Michael Fudge Python for Everybody: Ch3 Part 1 | Part 2 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 04: Iterations Overview In this lesson we learn: How to make our code execute in a non linear fashion through the use of iterations, or loops. The while loop for indefinite looping, infinite loops, and the break and continue statements How to build complex loops easily. Definite loops (for loops) and iterators. Required Reading / Viewing Severance Ch 5: Iterations End to End Example: Iterations, by Michael Fudge Python for Everybody: Ch5 Part 1 | Part 2 | Part 3 | Part 4 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 05: Functions Overview In this lesson we learn: How to use and discover other functions in modules. How to inspect module contents and get help on functions. The anatomy of custom functions: arguments, named arguments, return values How to modularize our code with custom functions. Required Reading / Viewing Severance Ch 4: Functions End to End Example: Functions, by Michael Fudge Python for Everybody: Ch4 Part 1 | Part 2 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 06: Strings Overview In this lesson we learn: Strings as an immutable sequence of characters. Index and Slice notation for retrieving sub-strings. Built-in string functions to perform operations on strings. Techniques for parsing and tokenizing string data. How to sanitize input with string functions. Required Reading / Viewing Severance Ch 6: Strings End to End Example: Strings, by Michael Fudge Python for Everybody: Ch6 Part 1 | Part 2 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 07: Files Overview In this lesson we learn: The importance of a persistence layer in programming. How to read, write, and append to files. Techniques for reading a file a line at a time and all at once. Using exception handling with files. Text encodings. Required Reading / Viewing Severance Ch 7: Persistence End to End Example: Files, by Michael Fudge Python for Everybody: Ch7 Part 1 | Part 2 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 08: Lists In this lesson we learn: Lists as a mutable sequence of values. Indexing list values; slice notation. List functions and operations like add, remove, update, find Common patterns for list management. Parsing file data into lists. Overview Required Reading / Viewing Severance Ch 8: Lists End to End Example: Lists, by Michael Fudge Python for Everybody: Ch8 Part 1 | Part 2 | Part 3 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 09: Dictionaries Overview In this lesson we learn: Dictionaries as key-value pairs. Basic dictionary operations such as getting/setting keys and values Common dictionary use cases, such as representing complex objects. List of dictionary as an in-memory database of objects. Using the json library to serialize / de-serialize json data. Required Reading / Viewing Severance Ch 9: Dictionaries End to End Example: Dictionaries, by Michael Fudge Python for Everybody: Ch9 Part 1 | Part 2 | Part 3 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 10: HTTP Overview In this lesson we learn: Learn how HTTP, the protocol of the web works. To execute HTTP requests using Python requests De-serialize HTTP responses in JSON format into Python objects General procedure for reading and calling API\u2019s on the web. Required Reading / Viewing Fudge: Web API\u2019s In Python (Part 1 and 2) Severance Ch 12: Networked Programs End to End Example: Web API\u2019s, by Michael Fudge Python for Everybody: Ch12 Part 3 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 11: Web API\u2019s Overview In this lesson we learn: How to read and use documented Web API\u2019s Learn how to structure API calls GET/POST, in header, url or query string. How to perform API Authentication Via Key and OAUTH2 To read HTTP responses in body and headers General procedure for calling any web API. Required Reading / Viewing Fudge: Web Api\u2019s In Python (Part 3 and 4) Severance Ch 13: Web Services End to End Example: Web API\u2019s, by Michael Fudge Python for Everybody: Ch13 Part 1 | Part 4 , by Charles Severance Large Group Video Lecture Lab Walk Through Homework Advice Lesson 12: Pandas Overview In this lesson we learn: What exactly is Pandas, What is data analysis? How can Pandas help you perform data analysis? Managing Pandas data structures. Using Pandas to read and write a variety of file formats. Required Reading / Viewing Fudge: Data Analysis with Pandas End to End Example: Data Analysis in Pandas, by Michael Fudge Python for Data Analysis, by Sentdex Official Pandas Tutorials (optional) Large Group Video Lecture Lab Walk Through Homework Advice Lesson 13: Visualization Overview In this lesson we learn: Why information visualization is important The various ways to visualize information The basic requirements for any visualization How to plot complex visualizations such as multi-series charts and maps Required Reading / Viewing Matplotlib: https://matplotlib.org/stable/tutorials/introductory/quick_start.html Folium: https://python-visualization.github.io/folium/quickstart.html Plotly Express: https://plotly.com/python/plotly-express/ Seaborn: https://seaborn.pydata.org/tutorial/introduction.html Large Group Video Lecture Lab Walk Through Homework Advice More Resources End to End Example: Mapping Potholes Matplotlib Tutorial Series","title":"Content"},{"location":"content/#content","text":"","title":"Content"},{"location":"content/#lesson-01-introduction","text":"","title":"Lesson 01: Introduction"},{"location":"content/#overview","text":"This lesson we learn: What is Python? What are the advantages / disadvantages of the language? How does it compare with other programming languages? The Jupyter Notebook environment. How to execute programs from the Jupyter environment. Python programming language basics. Print, Assignment and Input statements. Writing simple programs in Python following the Input / Process / Output model.","title":"Overview"},{"location":"content/#required-reading-viewing","text":"Severance Ch 1: Introduction Quick Introduction to Jupyter Notebook, by Michael Fudge","title":"Required Reading / Viewing"},{"location":"content/#more-resources-for-inspiration","text":"How to think like a programmer - Lessons in problem solving Python for Everybody: Ch1 Part 1 | Part 2 | Part 3 | Part 4 , by Charles Severance \u201cTEDxSMU: You Should Learn to Program\u201d, by Christian Genco \u201cTEDxCERN: The poetry of programming\u201d, by Linda Liukas","title":"More Resources, for Inspiration!"},{"location":"content/#large-group-video-lecture","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through","text":"`","title":"Lab Walk Through"},{"location":"content/#homework-advice","text":"","title":"Homework Advice"},{"location":"content/#lesson-02-variables","text":"","title":"Lesson 02: Variables"},{"location":"content/#overview_1","text":"This lesson we learn: What is a variable? What is its purpose? Variable assignment, and access. Different data types for variables. How to input variables of various types, check types, convert types, and print variables with formatting. Arithmetic expressions, arithmetic operators, and operands. Different ways to format output.","title":"Overview"},{"location":"content/#required-reading-viewing_1","text":"Severance Ch 2: Variables, Expressions, Statements End to End Example: Variables and Types, by Michael Fudge Python for Everybody: Ch2 Part 1 | Part 2 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_1","text":"NO CLASS, Enjoy Last Semester\u2019s Lecture","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_1","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_1","text":"","title":"Homework Advice"},{"location":"content/#lesson-03-conditionals","text":"","title":"Lesson 03: Conditionals"},{"location":"content/#overview_2","text":"In this lesson we learn: How to make our code execute in a non linear fashion through the use of conditionals. Relational and logical operators for making Boolean expressions which form the basis of our decisions. Different types of non-linear execution like conditional execution, alternative execution, chaining, and nesting, and their appropriate uses. How to handle run-time errors with try..except.","title":"Overview"},{"location":"content/#required-reading-viewing_2","text":"Severance Ch 3: Conditional Execution End to End Example: Conditionals, By Michael Fudge Python for Everybody: Ch3 Part 1 | Part 2 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_2","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_2","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_2","text":"","title":"Homework Advice"},{"location":"content/#lesson-04-iterations","text":"","title":"Lesson 04: Iterations"},{"location":"content/#overview_3","text":"In this lesson we learn: How to make our code execute in a non linear fashion through the use of iterations, or loops. The while loop for indefinite looping, infinite loops, and the break and continue statements How to build complex loops easily. Definite loops (for loops) and iterators.","title":"Overview"},{"location":"content/#required-reading-viewing_3","text":"Severance Ch 5: Iterations End to End Example: Iterations, by Michael Fudge Python for Everybody: Ch5 Part 1 | Part 2 | Part 3 | Part 4 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_3","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_3","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_3","text":"","title":"Homework Advice"},{"location":"content/#lesson-05-functions","text":"","title":"Lesson 05: Functions"},{"location":"content/#overview_4","text":"In this lesson we learn: How to use and discover other functions in modules. How to inspect module contents and get help on functions. The anatomy of custom functions: arguments, named arguments, return values How to modularize our code with custom functions.","title":"Overview"},{"location":"content/#required-reading-viewing_4","text":"Severance Ch 4: Functions End to End Example: Functions, by Michael Fudge Python for Everybody: Ch4 Part 1 | Part 2 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_4","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_4","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_4","text":"","title":"Homework Advice"},{"location":"content/#lesson-06-strings","text":"","title":"Lesson 06: Strings"},{"location":"content/#overview_5","text":"In this lesson we learn: Strings as an immutable sequence of characters. Index and Slice notation for retrieving sub-strings. Built-in string functions to perform operations on strings. Techniques for parsing and tokenizing string data. How to sanitize input with string functions.","title":"Overview"},{"location":"content/#required-reading-viewing_5","text":"Severance Ch 6: Strings End to End Example: Strings, by Michael Fudge Python for Everybody: Ch6 Part 1 | Part 2 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_5","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_5","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_5","text":"","title":"Homework Advice"},{"location":"content/#lesson-07-files","text":"","title":"Lesson 07: Files"},{"location":"content/#overview_6","text":"In this lesson we learn: The importance of a persistence layer in programming. How to read, write, and append to files. Techniques for reading a file a line at a time and all at once. Using exception handling with files. Text encodings.","title":"Overview"},{"location":"content/#required-reading-viewing_6","text":"Severance Ch 7: Persistence End to End Example: Files, by Michael Fudge Python for Everybody: Ch7 Part 1 | Part 2 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_6","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_6","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_6","text":"","title":"Homework Advice"},{"location":"content/#lesson-08-lists","text":"In this lesson we learn: Lists as a mutable sequence of values. Indexing list values; slice notation. List functions and operations like add, remove, update, find Common patterns for list management. Parsing file data into lists.","title":"Lesson 08: Lists"},{"location":"content/#overview_7","text":"","title":"Overview"},{"location":"content/#required-reading-viewing_7","text":"Severance Ch 8: Lists End to End Example: Lists, by Michael Fudge Python for Everybody: Ch8 Part 1 | Part 2 | Part 3 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_7","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_7","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_7","text":"","title":"Homework Advice"},{"location":"content/#lesson-09-dictionaries","text":"","title":"Lesson 09: Dictionaries"},{"location":"content/#overview_8","text":"In this lesson we learn: Dictionaries as key-value pairs. Basic dictionary operations such as getting/setting keys and values Common dictionary use cases, such as representing complex objects. List of dictionary as an in-memory database of objects. Using the json library to serialize / de-serialize json data.","title":"Overview"},{"location":"content/#required-reading-viewing_8","text":"Severance Ch 9: Dictionaries End to End Example: Dictionaries, by Michael Fudge Python for Everybody: Ch9 Part 1 | Part 2 | Part 3 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_8","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_8","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_8","text":"","title":"Homework Advice"},{"location":"content/#lesson-10-http","text":"","title":"Lesson 10: HTTP"},{"location":"content/#overview_9","text":"In this lesson we learn: Learn how HTTP, the protocol of the web works. To execute HTTP requests using Python requests De-serialize HTTP responses in JSON format into Python objects General procedure for reading and calling API\u2019s on the web.","title":"Overview"},{"location":"content/#required-reading-viewing_9","text":"Fudge: Web API\u2019s In Python (Part 1 and 2) Severance Ch 12: Networked Programs End to End Example: Web API\u2019s, by Michael Fudge Python for Everybody: Ch12 Part 3 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_9","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_9","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_9","text":"","title":"Homework Advice"},{"location":"content/#lesson-11-web-apis","text":"","title":"Lesson 11: Web API's"},{"location":"content/#overview_10","text":"In this lesson we learn: How to read and use documented Web API\u2019s Learn how to structure API calls GET/POST, in header, url or query string. How to perform API Authentication Via Key and OAUTH2 To read HTTP responses in body and headers General procedure for calling any web API.","title":"Overview"},{"location":"content/#required-reading-viewing_10","text":"Fudge: Web Api\u2019s In Python (Part 3 and 4) Severance Ch 13: Web Services End to End Example: Web API\u2019s, by Michael Fudge Python for Everybody: Ch13 Part 1 | Part 4 , by Charles Severance","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_10","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_10","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_10","text":"","title":"Homework Advice"},{"location":"content/#lesson-12-pandas","text":"","title":"Lesson 12: Pandas"},{"location":"content/#overview_11","text":"In this lesson we learn: What exactly is Pandas, What is data analysis? How can Pandas help you perform data analysis? Managing Pandas data structures. Using Pandas to read and write a variety of file formats.","title":"Overview"},{"location":"content/#required-reading-viewing_11","text":"Fudge: Data Analysis with Pandas End to End Example: Data Analysis in Pandas, by Michael Fudge Python for Data Analysis, by Sentdex Official Pandas Tutorials (optional)","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_11","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_11","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_11","text":"","title":"Homework Advice"},{"location":"content/#lesson-13-visualization","text":"","title":"Lesson 13: Visualization"},{"location":"content/#overview_12","text":"In this lesson we learn: Why information visualization is important The various ways to visualize information The basic requirements for any visualization How to plot complex visualizations such as multi-series charts and maps","title":"Overview"},{"location":"content/#required-reading-viewing_12","text":"Matplotlib: https://matplotlib.org/stable/tutorials/introductory/quick_start.html Folium: https://python-visualization.github.io/folium/quickstart.html Plotly Express: https://plotly.com/python/plotly-express/ Seaborn: https://seaborn.pydata.org/tutorial/introduction.html","title":"Required Reading / Viewing"},{"location":"content/#large-group-video-lecture_12","text":"","title":"Large Group Video Lecture"},{"location":"content/#lab-walk-through_12","text":"","title":"Lab Walk Through"},{"location":"content/#homework-advice_12","text":"","title":"Homework Advice"},{"location":"content/#more-resources","text":"End to End Example: Mapping Potholes Matplotlib Tutorial Series","title":"More Resources"},{"location":"links/","text":"Course Links Here\u2019s a list of links to the resources we will use in this course. It is expected you will know how to access each of these resources. Tool Purpose Link Notes Blackboard Announcements, Grades, Project Deliverables https://blackboard.syr.edu Sign in with your NetId JupyterHub Python Programming, Code Samples, Slides, Labs, HW. https://v2hub.ischool.syr.edu Sign in with your NetId Microsoft Teams Ask questions. Chat with classmates & Instructors. Virtual office hours. https://teams.ist256.com Sign in with your SU Microsoft Account Polly In-Class polling for large group sessions. https://poll.ist256.com Sign in with SU Microsoft Account Severance Textbook The popular \u201cPython for Everyone\u201d book. https://www.py4e.com/book Available in a variety of Formats. Zoom Videoconferencing tool we use large and small group sessions. https://zoom.us Access through Blackboard Zybooks Textbook OPTIONAL: Our hands-on interactive textbook. Purchase online or via the SU bookstore. https://learn.zybooks.com Your syr.edu Zybooks account","title":"Course Links"},{"location":"links/#course-links","text":"Here\u2019s a list of links to the resources we will use in this course. It is expected you will know how to access each of these resources. Tool Purpose Link Notes Blackboard Announcements, Grades, Project Deliverables https://blackboard.syr.edu Sign in with your NetId JupyterHub Python Programming, Code Samples, Slides, Labs, HW. https://v2hub.ischool.syr.edu Sign in with your NetId Microsoft Teams Ask questions. Chat with classmates & Instructors. Virtual office hours. https://teams.ist256.com Sign in with your SU Microsoft Account Polly In-Class polling for large group sessions. https://poll.ist256.com Sign in with SU Microsoft Account Severance Textbook The popular \u201cPython for Everyone\u201d book. https://www.py4e.com/book Available in a variety of Formats. Zoom Videoconferencing tool we use large and small group sessions. https://zoom.us Access through Blackboard Zybooks Textbook OPTIONAL: Our hands-on interactive textbook. Purchase online or via the SU bookstore. https://learn.zybooks.com Your syr.edu Zybooks account","title":"Course Links"},{"location":"pybot/","text":"PyBot: Your AI Tutor in this course By: Michael Fudge What the @#%!? This course includes an a free AI programming assistant for your use. I programmed the assistant over the 2022-2023 winter break and it makes heavy use of the OpenAI GPT-3 model, which has been popularized recently by chat-GPT phenomenon https://openai.com/blog/chatgpt/ . We use a special version of GPT-3 that is optimized for programming, called codex phttps://openai.com/blog/openai-codex/ . I created created the assistant for a single purpose: to study whether these technologies impact how students learn computer programming. The assistant is called PyBot and is available only within our Jupyter Hub environment https://hub.ischool.syr.edu . You are welcome to use PyBot to help you with any coding tasks, including your homework and project. Think of PyBot as an always available Python tutor. !Important! Pybot only works on notebook files in the course folder. For example: ~/library/ist256/fall2023 Invoking the PyBot The bot was implemented as a Jupyter magic. To use it, simply type the following command in an empty code cell: %%pybot {{your prompt here}} The %% is a special code to invoke the magic. The pybot is the name of the magic. The {{your prompt here}} is the prompt. What exactly is a prompt? It is a question or statement that you would like the bot to answer. For example, you might type: %%pybot write a computer program to input a temperature in Celsius and output the temperature in Fahrenheit To which PyBot will respond with the following code: #AI-Generated Output (Tokens: prompt=20, output=47, over_max=False) celsius = float(input(\"Enter the temperature in Celsius: \")) fahrenheit = (celsius * 9/5) + 32 print(\"The temperature in Fahrenheit is: \", fahrenheit) And in this case the code the bot gave us works! Enter the temperature in Celsius: 100 The temperature in Fahrenheit is: 212.0 Does this make programming irrelevant? No! Consider PyBot is only a tool, the next evolution in computer programming. It helps you to accomplish a programming task. Ultimately you must understand the concepts well enough to to explain to the bot how to produce relevant code. Also you must be able to read code well enough to verify the code the bot produces is correct! In some cases you may need to modify the code the bot produces to make it work in your specific context. The bot can solve simple problems, but it will be on you to solve more complex problems from the pieces the bot provides. Is this magic? How does it do this!? For that, I suggest reading this blog post on OpenAI codex: https://openai.com/blog/openai-codex/ Can I REALLY use this in my homework and project? Is this cheating? Its not cheating if you cite your sources!!! . Students get in trouble when they hide the origins of their sources. Citing the PyBot If the bot helped you with your homework or project, credit the PyBot. Here\u2019s the process: Leave any prompts (notebook cells where you invoked the bot) in your notebook. Leave the code the bot produced in your notebook. As it was generated. When you write your solution, COPY the bot\u2019s code in a separate cell, preserving the bot\u2019s original output. Mention how you use the bot in your reflection. Was it helpful? What did you learn from using it? Easy! Some final thoughts: Yes, it\u2019s a Python course, but really is a course in computational thinking . You should learn to code and PyBot should make you smarter not dumber . PyBot is not a replacement for YOU. It is a tool to help you. Don\u2019t trust your evil AI overlords; think for yourself. Acknowledgements Many thanks to OpenAI for making several hours of compute available for use in our course.","title":"PyBot"},{"location":"pybot/#pybot-your-ai-tutor-in-this-course","text":"By: Michael Fudge","title":"PyBot: Your AI Tutor in this course"},{"location":"pybot/#what-the","text":"This course includes an a free AI programming assistant for your use. I programmed the assistant over the 2022-2023 winter break and it makes heavy use of the OpenAI GPT-3 model, which has been popularized recently by chat-GPT phenomenon https://openai.com/blog/chatgpt/ . We use a special version of GPT-3 that is optimized for programming, called codex phttps://openai.com/blog/openai-codex/ . I created created the assistant for a single purpose: to study whether these technologies impact how students learn computer programming. The assistant is called PyBot and is available only within our Jupyter Hub environment https://hub.ischool.syr.edu . You are welcome to use PyBot to help you with any coding tasks, including your homework and project. Think of PyBot as an always available Python tutor.","title":"What the @#%!?"},{"location":"pybot/#important","text":"Pybot only works on notebook files in the course folder. For example: ~/library/ist256/fall2023","title":"!Important!"},{"location":"pybot/#invoking-the-pybot","text":"The bot was implemented as a Jupyter magic. To use it, simply type the following command in an empty code cell: %%pybot {{your prompt here}} The %% is a special code to invoke the magic. The pybot is the name of the magic. The {{your prompt here}} is the prompt. What exactly is a prompt? It is a question or statement that you would like the bot to answer. For example, you might type: %%pybot write a computer program to input a temperature in Celsius and output the temperature in Fahrenheit To which PyBot will respond with the following code: #AI-Generated Output (Tokens: prompt=20, output=47, over_max=False) celsius = float(input(\"Enter the temperature in Celsius: \")) fahrenheit = (celsius * 9/5) + 32 print(\"The temperature in Fahrenheit is: \", fahrenheit) And in this case the code the bot gave us works! Enter the temperature in Celsius: 100 The temperature in Fahrenheit is: 212.0","title":"Invoking the PyBot"},{"location":"pybot/#does-this-make-programming-irrelevant","text":"No! Consider PyBot is only a tool, the next evolution in computer programming. It helps you to accomplish a programming task. Ultimately you must understand the concepts well enough to to explain to the bot how to produce relevant code. Also you must be able to read code well enough to verify the code the bot produces is correct! In some cases you may need to modify the code the bot produces to make it work in your specific context. The bot can solve simple problems, but it will be on you to solve more complex problems from the pieces the bot provides.","title":"Does this make programming irrelevant?"},{"location":"pybot/#is-this-magic-how-does-it-do-this","text":"For that, I suggest reading this blog post on OpenAI codex: https://openai.com/blog/openai-codex/","title":"Is this magic? How does it do this!?"},{"location":"pybot/#can-i-really-use-this-in-my-homework-and-project-is-this-cheating","text":"Its not cheating if you cite your sources!!! . Students get in trouble when they hide the origins of their sources.","title":"Can I REALLY use this in my homework and project? Is this cheating?"},{"location":"pybot/#citing-the-pybot","text":"If the bot helped you with your homework or project, credit the PyBot. Here\u2019s the process: Leave any prompts (notebook cells where you invoked the bot) in your notebook. Leave the code the bot produced in your notebook. As it was generated. When you write your solution, COPY the bot\u2019s code in a separate cell, preserving the bot\u2019s original output. Mention how you use the bot in your reflection. Was it helpful? What did you learn from using it? Easy!","title":"Citing the PyBot"},{"location":"pybot/#some-final-thoughts","text":"Yes, it\u2019s a Python course, but really is a course in computational thinking . You should learn to code and PyBot should make you smarter not dumber . PyBot is not a replacement for YOU. It is a tool to help you. Don\u2019t trust your evil AI overlords; think for yourself.","title":"Some final thoughts:"},{"location":"pybot/#acknowledgements","text":"Many thanks to OpenAI for making several hours of compute available for use in our course.","title":"Acknowledgements"},{"location":"syllabus/","text":"IST256 Syllabus Fall 2023 Course Information IST256: Applications Programming for Information Systems Audience: IST256 or IST356? This course is for students who are new to computer programming yet desire to learn how it applies to our everyday lives. IST256 is for students with little to no programming experience. The course content is 75% python fundamentals and 25% python for data analytics. IST356 is for students with prior programming experience. The course content is 25% python fundamentals and 75% python for data analytics. Catalog Description Structured program design, development testing, implementation, and documentation of common information system applications using structured programming languages. Lectures and laboratory. Description Due to the prevalence of technology in our lives, learning to program has become the critical skill of the 21st century. Students will learn practical applications of computer programming such as how to automate tasks, manipulate data and solve problems applicable to almost any academic discipline. Learning Outcomes At the end of the course, students will be able to: Analyze complex problems by thinking computationally and systematically. Solve practical, real-world problems using a modern computer programming language.. Demonstrate the ability to read, write, discuss and code confidently. Understand how to code in teams, collaborate with others and manage source code. Acquire new programming knowledge independently. Large Group and Recitation Sections Every student in IST256 is assigned to the main section M001, then one of the recitation sections. You are required to attend both sections every week. Your recitation instructor is responsible for your grades. SU Section Class # Type Professor Professor Email Meeting Day/Time Location / Instruction Mode M001 16592 Main Section Michael A Fudge Jr mafudge@syr.edu Mondays 3:45pm - 5:05pm Watson Theater M002 16600 Recitation Yuheun Kim ykim72@syr.edu Wednesdays 2:15pm - 3:35pm 115B Lyman Hall M003 20487 Recitation Angela Usha Ramnarine-Rieks auramnar@syr.edu Wednesdays 3:45pm - 5:05pm 101 Huntington Hall M004 16601 Recitation Daniel V Smith dvsmith@syr.edu Wednesdays 5:15pm - 6:35pm 350 Newhouse II M005 16602 Recitation Daniel V Smith dvsmith@syr.edu Wednesdays 3:45pm - 5:05pm 340 Newhouse II M006 20488 Recitation Deborah L Nosky dlnosky@syr.edu Wednesdays 3:45pm - 5:05pm 243A Hinds Hall Office Hours Office hours are for asking questions, clearing up doubts and misunderstandings in the the coursework and getting advice / guidance on labs and homework. Please to not expect to be tutored during office hours, and please do not work on your homework during our office hours. Each of your instructor\u2019s Office Hours will be posted in Blackboard. If you require tutoring, please see the getting help section below. Understanding Approach Used in this Course Learning to program a computer does not come easy for most people. Decades of teaching programming to students like yourself has taught me it requires time, patience, practice and a well-established routine. This is not unlike the same routine required to learn a foreign language or musical instrument. There are times to practice and then times to demonstrate what you have learned. Spaced and Repetitive Practice For better or worse, this course grading is designed to force you to practice. There are various activities due each week: readings, labs, and in-class / out-of-class homework activities. These are designed to expose you to programming little each day rather than binging the content once a week. Consuming the material this way gives you multiple points of exposure and most importantly time to process. Practice activities are formative assessments. This means being correct carries the same weight as explaining your struggles when you know you are not correct and seeking help when you need it. Building Habit Through Routine Another thing we do to help you to be successful is to impose a routine upon you. The course material is conceptually difficult so we try to remove some of the logistics from learning by providing the same structure week to week: Before the main section lecture you are exposed to the topic through reading and video assignments . The focus is on understanding the concepts. During the main section lecture you observe and ask questions. You do not need write code at this point. The focus is on reading code, understanding the concepts as applied through code, learning how the code executes, and asking questions. The lab assignments help you to practice writing code for the first time. This is done in a guided fashion. You are given short, specific problems to solve with code. For each lab, a guidance video is provided to those who require it. The completed lab is submitted as evidence that you practiced and include what you have learned. During your recitation , we focus on problem solving and writing solutions with code. The problem at this phase are similar complexity as the homework. At this point every student should be writing code, learning to get comfortable writing code and troubleshooting problems. Code written in Recitation must be turned in for a participation grade. Finally, the homework assignments are your opportunity to demonstrate you can code a solution to a problem on your own. Guidance is provided as to how to approach the problem. Homework assignments are a form of practice so it is expected students will explain what they learned or are still struggling to conceptualize. Expressing your thoughts on the learning experience is an import part of learning itself. Summative Assessments Summative assessments are no longer about practice. They are about measuring what you have learned. There are two types of summative assessments in this course exams and a project . There are exams at milestones throughout the course. The project demonstrates you can learn to code independently, then explain your solution to another. Main Session Expectations (Mondays) The Monday\u2019s Large group session, section M001 in a large lecture hall. Because it can be intimidating to ask questions in this forum, you are encouraged to use the class chat offered for this course. The first slide at the beginning of large group will explain how to access the class chat. You are welcome, and encouraged to ask questions or for clarification of concepts during the lecture. You will be expected to engage in class by participating in class-wide polls, quizzes and surveys. Your responses are not graded but they are recorded as a means to measure your participation and engagement in class. Students who do not participate are noted and will be flagged for poor participation in orange success. You are encouraged to not try to code as I code, especially if you are a beginner. Instead, watch and ask questions about what you see and experience. It\u2019s far too early for most learners to try and code at this point, and there will be opportunities to do that in small group. Instead you should take nodes and ask questions. Except for the homework solution, the code I write will be made available to you after class. Recitation Expectations (Wednesdays) Recitation sessions meet with a fraction of the class. Here you will practice programming and algorithmic problem solving. You are expected to bring your fully-charged laptop to class! You will need to use it to complete in-class exercises. If you do not have your laptop, then you are not prepared for class. You will be expected to participate in class. This includes sharing your thoughts, ideas, and computer code when you are asked. Some of you might be hesitant to do this, but you need to get over it for your own benefit. Nobody starts out programming as an expert. It takes practice, experimentation, and repeated failure to get it. Please be respectful of your instructor and classmates. You are not competing against each other, you are a community. Not everyone learns at the same pace and we should be kind and respectful to our classmates who struggle. Course Resources Course Website Our course website it located at https://ist256.com or https://ist256.github.io . The course website contains the syllabus, list of due dates, and links to readings, content, videos and tools used in the course. Jupyterhub Our programming environment is a private-cloud web application called Jupyter Hub. https://v2hub.ischool.syr.edu . This is the de-facto programming environment of the scientific community. All students have an account; use your SU Microsoft Account (NetID and password) to login. After you login you will see a library folder inside that folder is an ist256 folder. All of the course content (lecture slides, code samples, labs, homework) is available in this folder. Textbooks The following text is required : Python for Everybody: Exploring Data In Python 3 by Charles Severance. https://www.py4e.com/book . The book is free and available in several formats from the URL provided. There are assigned readings which must be completed prior to each large group lecture. The reading can be found in the content section of the website and the course syllabus. In addition to the required reading the last 4 units have custom readings authored by your instructor. Here are some additional textbook recommendations . Consider these supplemental resources: Automate the Boring Stuff with Python: Practical Programming for Total Beginners by Al Sweigert https://automatetheboringstuff.com/ . Free online resource. A Byte of Python , https://www.gitbook.com/book/swaroopch/byte-of-python/details . Free online resource. Dive into Python , Mark Pilgrim http://getpython3.com/diveintopython3/ . Free online resource. Learn python the hard way , Zed Shaw http://learnpythonthehardway.org/book/ . Free online resource. Python Practice Book , Anad Chitpothu http://anandology.com/python-practice-book/index.html . Free online Resource. Programming In Python 3 , Zybooks https://www.zybooks.com/catalog/programming-in-python-3/ . Paid resource, approximately $60 for the semester. NetID, Google and Microsoft Accounts This course will require you to use your Syracuse University provided Google and Microsoft Accounts. Both accounts are based on your NetId. Your Google account is netid@g.syr.edu and your Microsoft Account is netid@syr.edu . Learn more: NetID: https://netid.syr.edu/ Microsoft Account: Login in with your SU email address and NetID password. SU Google Account: https://ols.syr.edu/google-account-for-syracuse-university/ 3rd Party Services Used in This Course This course uses a variety of 3rd party services to supplement and enhance your learning experience. Here\u2019s a list of with links to the resources we will use in this course. It is expected you will know how to access each of these resources. Tool Purpose Link Notes Blackboard Announcements, Grades https://blackboard.syr.edu Sign in with your NetId JupyterHub Python Programming, Code Samples, Slides, Labs, HW. https://v2hub.ischool.syr.edu Sign in with your NetId Microsoft Teams Chat with classmates / Instructors. Virtual office hours. https://teams.ist256.com Sign in with your SU Microsoft Account Polley In-Class polling for large group sessions. https://poll.ist256.com Sign in with SU Microsoft Account Severance Textbook The popular \u201cPython for Everyone\u201d book. https://www.py4e.com/book Available in a variety of different formats. Zoom Videoconferencing tool we use for office hours and student support. https://zoom.us Access through Blackboard Please consult the Course Links section for details. Bring Your Own Device This course uses the BYOD (Bring Your Own Device) model. For Large Group you need a device to ask and answer questions, basically to participate in group chat and polls (Polly). This can be a smartphone, tablet or laptop (Mac, Windows, or Chromebook). Do not try to code along in large group unless you are experienced. It is best to take notes and ask questions. For Recitation you need a device for which you can write code in the browser using Jupyter Hub. This should be a laptop computer (Mac, Windows or Chromebook). Since you will code in a web browser using the provided JupyterHub platform, the hardware requirements are minimal. Tutoring The University offers free group tutoring for this course through the Center for Learning and Student Success (CLASS). Sign up for tutoring at: http://myt.syr.edu . For more information on individual and group tutoring sessions, please visit: https://class.syr.edu/academic-support/ Methods of Evaluation Grading This course uses a well thought out mix of formative, summative, in-class and out-of-class instruments to assess your knowledge acquisition. A variety of techniques are used to cater to students of different learning styles and assess the course learning outcomes. Assessment Name Blackboard Gradebook Type Learning Outcomes Quantity Points Each Points Total Pct Of Total Grade How Do I Turn it in? Exams E1 - E2 Assessment 1,2,3 2 45 90 35% Taken in Class Project P1 - P4 Assessment 1,2,3,5 1 49 49 20% Project folder on Jupyterhub Class Coding Labs L01 - L13 Practice 1,2,3,4 13 3 39 15% Run the submission script at end of the Lab in Jupyterhub Homework H01 - H13 Practice 1,2,3,4 13 3 39 15% Run the submission script at end of the Homework in Jupyterhub RecitationCode S01 - S13 Practice 1,2,3 13 3 39 15% Run the submission script at the end of recitation TOTAL 256 For a comprehensive list due dates and times for all assignments, consult the What\u2019s Due? section of the Course Schedule . Exams (E1 - E2) Exams are high-stakes, summative assessments. They measure the individual\u2019s ability to recall, understand, and apply the course material. They are one of two instruments in this course which measures your mastery of the learning outcomes. There will be 2 exams in the course. Each exam focuses on specific lessons, but due to the nature of the course material, all exams are cumulative. Exams are issued in class. Exams are closed book. You will have 60 minutes to complete 45 exam questions. Students can bring a one page cheat sheet with typed or hand written notes and/or code samples. Questions consist of multiple choice, fill-in-the blank, and short-answer. If you require a special testing accommodation, you should schedule to take the exam in the CDS testing center. Project (P1 - P4) The project is the other high-stakes summative assessment. The goal of the project is to demonstrate your ability as an individual to program something novel, useful and innovative in Python. It should represent an accurate culmination of what you have learned in the course. You will work on the project individually, be expected to produce working code, and be able to explain it at both a high and detailed level. The project is divided into 4 phases; due dates are posted on the course schedule. You will receive feedback and advice after the first two deliverables; a project grade after the final deliverable. Each project phase must be submitted on Jupyterhub using the provided submission notebook. Late submissions are not accepted. We need time to grade. The What\u2019s Due section of the syllabus outlines the two exam dates. Project Phases Phase Name Deliverables P1 Ideation Outline the specific goals and objectives of your project; include evidence of its feasibility by including citations of resources you will use to complete the code. P2 Beta Version Create a first working draft of the completed program i.e. the \u201cBeta\u201d version; Provide live demo of running program to your Recitation instructor for feedback. P3 Final Version Final version of working code; Instructor feedback taken into consideration; Improvements to achieve the desired grade. P4 Demo and Reflection Pitch / Demo video of running project program. Video reflection; Criteria for Project Grade Complete all project deliverables on time, and to satisfaction as per the requirements. Clearly demonstrate through code 3 things you learned beyond what was taught in class. This can be a new API, module, aspect of or aspect of the Python language itself. This goes beyond just use, you must identify and explain. Take instructor feedback into consideration. Journal as your work on your project, recording time and tasks. In addition, there is a grade limit based on the number of lines of student-written code that is used in the project. Note: copies of code from class or elsewhere do not count. This must be code you wrote yourself that directly impacts the project\u2019s behavior. Lines of student-written code in the project Maximum Possible grade 200 or more A+ 100 to 200 B+ Under 100 C+ Grading Scale For Project Finally, you are assigned a letter grade for your project. This letter grade is translated to a number of points based on this table. Project Grade Assigned Points A+ 49 A 47 A- 45 B+ 42 B 40 B- 37 C+ 35 C 32 C- 30 D+ 27 D 25 D- 20 F 0 Specifics on the project as well as details of each deliverable can be found under your project folder in Jupyterhub. Class Coding Labs (L01 - L13) Each week there will be an out-of-class hands-on lab programming activity. The purpose of the lab is to provide guided, hands-on programming practice. Labs are your first opportunity to get your hands on a keyboard and start programming. This is a low-stakes assessment, formative assessment. The What\u2019s Due section of the syllabus identifies the lab you should complete. You can find the lab activity on JupyterHub. This activity must be completed and turned submitted by the due date. You may work alone or with a partner as you complete the lab. If you work with another, you should both complete the lab individually, and you should make a note of who your lab partner was when you completed your work. As to not draw attention to a potential academic integrity violation. If you are having difficulty completing the lab, you are welcome to review the lab walk-through video which guide you through the more difficult parts of the lab. You are encouraged to only consult the walk-through when you are stuck. Rubric for Class Coding Labs Lab Criteria Definitions: Code Correct means all You Code sections of the lab are correct. Code Complete means all You Code sections have an honest attempt to code the problem at hand. Please note this does not imply the code is correct. If the code is not correct, there is an adequate reflection with student questions. Cells Executed means all code cells in the lab display evidence they were executed in your lab submission. Metacognition Complete means the student made an honest effort to answer the open-ended questions in the lab adequately conveying what you have learned and what still confuses you. This should be evident in the work you have done to complete the lab. We value reflection. It is important to the learning process. Lab Criteria Assigned Grade All 4 criteria met 3 3 criteria met 2 2 criteria met 1 Less than 2 criteria met 0 Homework (H01 - H13) Practice makes perfect. Each week you will be assigned homework to complete outside of class. The goal of the homework is practice problem solving with code independently. Throughout the process you should take inventory of your abilities with respect to the material. While it is admirable to get the code correct, that is not the evaluation criteria nor is it the purpose of the homework. You should use the homework as a personal gauge for how well you are grasping the material. You can find the the homework assignments on JupyterHub. The What\u2019s Due section of the syllabus identifies the homework assignment you should complete. Homework are individual assignments . You can collaborate on strategy but you must must work alone on the assignment. You must be able to explain the code you write, or it will be considered an academic integrity violation. It\u2019s not about getting it right, but it is about making an honest self-assessment! For each homework there is an advice video which provides hints and tips for how you can approach the homework assignment. You are encouraged to only consult the video when you are having difficulty with the homework. If you get assistance from somewhere else, such as online, or someone else such as a tutor, or the an AI assistant you must divulge that in your submission or it will be considered an academic integrity violation. Rubric for Homework Homework Criteria Definitions: Code Correct means an honest attempt was made at a solution and the solution is correct. For incorrect solutions, the code runs, might not be correct, but there is some explanation in the reflection. Code Well Written means your code is easy to understand, modular in nature, has aptly named variables, was programmed in the style we learned in class, and demonstrates what you learned that week. Problem Analysis Complete problem analysis was complete, identifying the problem\u2019s inputs, outputs, and algorithm. An outline of the step-by-step process for how the program should behave. Questions Complete means the student made an honest effort to answer the open-ended questions in the lab. Reflection Complete means the student completed their code reflection, discussing their experiences with completing the assignment. This should provide insight as to how the work was done touching upon struggles, how you got it done, what was learned in the process. Homework Criteria Assigned Grade All 5 criteria met 3 4 criteria met 2 3 criteria met 1 Less than 3 criteria met 0 Recitation Code Assignment (S01 - S13) Your recitation professor will measure attendance and participation each session through you turning in your recitation code activity. This is the code you work on in class with your classmates. If you are not in class, you will not recieve credit. The specific criteria is entirely at the discretion of your instructor, but most likely consists participating in the programming assignment completed in class. Grading Scale For Final Grade We use the following grading scale for translating your total points earned into a letter grade to be submitted to the University registrar. Student Achievement Total Points Earned Registrar Grade Grade Points Mastery 243 - 256 A 4.000 230 - 242 A- 3.666 Satisfactory 217 - 229 B+ 3.333 204 - 216 B 3.000 192 - 203 B- 2.666 Low Passing 179 - 191 C+ 2.333 166 - 178 C 2.000 153 - 165 C- 1.666 Unsatisfactory 128 - 152 D 1.000 0 - 127 F 0.000 Course Specific Policies Due Dates Late work is not accepted. Due to the formative nature of work in the course (practice with timely feedback), it does not make sense to accept late work. Due dates are posted on the Syllabus in the course schedule section, specifically What\u2019s Due? . Due dates are also posted in Blackboard. In order to provide timely and relevant feedback, no late work is accepted. Exceptions will only be made under extreme circumstances with supporting University documentation of illness or personal reasons. Extra Credit No extra credit is offered in this course. It is not necessary given a good portion of the work in this course is formative assessment. Try and reflect upon your learning. This is what we ask, and will yield the highest marks on the formative assessments. Course Withdraw Only the main section instructor can sign a withdraw petition. We will only sign a withdraw from this course based on poor academic performance (F grade). You can always re-take the course and replace your failing grade with a passing grade. If you are putting in the time and effort it is very difficult to fail this course in the first place. This reserves course withdraws for their original intended purpose - extreme circumstances with supporting University documentation of illness or personal reasons. Use of AI Assistants It is my opinion that using AI assistants such as ChatGPT to help you understand and write code is extremely valuable to the learning process. To provide equitable access to AI, I\u2019ve created a Jupyter plugin, %%pybot which talks to Chat GPT through Jupyterhub. You are welcome to use it in this course. When addressing the bounds of academic integrity, treat the AI assistant as you would your personal tutor. You would not copy a tutor\u2019s code and present it as your own, as that\u2019s a clear violation of academic integrity. It is expected you will the outputs from AI similarly. When in doubt, ASK! Course Honor Code - Academic Integrity What Does Academic Integrity Mean In This Course? The course honor code represents our commitment to Academic Integrity in a programming course. I drafted the class honor code to avoid academic negligence - situations where students are unaware that their actions are actually a form of cheating. Our honor code remedies this problem by clearly stating the expectations of Academic Integrity for this course. It states: All work is my own . Answers on all student work, assignments (labs, homework, problem sets, projects, papers, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) are my own individual work (except where collaboration is explicitly allowed and disclosed). In the case where collaboration is permitted I will only collaborate within my team. Your own work means it manifests your own thoughts and ideas, not someone else\u2019s. AI is included in the \u201csomeone else.\u201d I will not share answers. I will not make answers (either my own or the professor\u2019s) to work, assignments (labs, problem sets, projects, papers, homework, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) available to anyone else in or out of class. This includes posting them on the web / chegg / course hero, or sharing them in test banks. I will not misrepresent my ability. I will not engage in any activity which misrepresents or falsifies my knowledge of the subject matter and therefore improves my grade dishonestly. This includes unsanctioned test aids, copying homework, and assistance from unapproved sources outside of class. This includes passing off AI output as your own work. I will give credit. I will always pay attribution to my sources, and not misrepresent the works of others as my own. If you get code from the internet, a tutor, or an AI assistant, you must cite it like you would any source in an academic paper. I accept the honor code and its consequences. I understand and accept that that all work I submit is subject to the honor code, and if I violate this honor code I my instructor is obligated to report me to the University\u2019s office of Academic Integrity. This can be easily summarized as: If code did not originate from you, you must clearly disclose where it came from. When in doubt, ask. When unsure, disclose openly. Most students who get into trouble are trying to hide their academic dishonesty. Don\u2019t do that. We will catch you easily. Sanctions for Violations of Academic Integrity Oops. I violated academic integrity. What now? All suspected academic integrity violation will be reported to the university\u2019s office of academic integrity. Proposed sanction for violations of a low-stakes assessment such as a homework assignment or lab, is a grade of zero . Proposed sanction for any violation on a summative assessment such as an exam or the final project is a grade of F in the course . Syracuse University Policies Syracuse University has a variety of other policies designed to guarantee that students live and study in a community respectful of their needs and those of fellow students. Some of the most important of these concern: Diversity and Disability (ensuring that students are aware of their rights and responsibilities in a diverse, inclusive, accessible, bias-free campus community) can be found here, at: https://www.syracuse.edu/life/accessibilitydiversity/ . Religious Observances Notification and Policy (steps to follow to request accommodations for the observance of religious holidays) can be found here, at: http://supolicies.syr.edu/studs/religious_observance.htm Orange SUccess (tools to access a variety of SU resources, including ways to communicate with advisors and faculty members) can be found here, at: http://orangesuccess.syr.edu/getting-started-2 . Disability-Related Accommodations Syracuse University values diversity and inclusion; we are committed to a climate of mutual respect and full participation. There may be aspects of the instruction or design of this course that result in barriers to your inclusion and full participation in this course. I invite any student to meet with me to discuss strategies and/or accommodations (academic adjustments) that may be essential to your success and to collaborate with the Center for Disability Resources (CDR) in this process. If you would like to discuss disability-accommodations or register with CDR, please visit Center for Disability Resources. Please call (315) 443-4498 or email disabilityresources@syr.edu for more detailed information. CDR is responsible for coordinating disability-related academic accommodations and will work with the student to develop an access plan. Since academic accommodations may require early planning and generally are not provided retroactively, please contact CDR as soon as possible to begin this process. https://disabilityresources.syr.edu/ University Attendance Policy Attendance in classes is expected in all courses at Syracuse University. Students are expected to arrive on campus in time to attend the first meeting of all classes for which they are registered. Students who do not attend classes starting with the first scheduled meeting may be academically withdrawn as not making progress toward degree by failure to attend. Instructors set course-specific policies for absences from scheduled class meetings in their syllabi. It is a federal requirement that students who do not attend or cease to attend a class to be reported at the time of determination by the faculty. Faculty should use \u201cESPR\u201d and \u201cMSPR\u201d in Orange Success to alert the Office of the Registrar and the Office of Financial Aid. A grade of NA is posted to any student for whom the Never Attended flag is raised in Orange SUccess. More information regarding Orange SUccess can be found here, at: http://orangesuccess.syr.edu/getting-started-2/ Students should also review the University\u2019s religious observance policy and make the required arrangements at the beginning of each semester Academic Integrity Policy Syracuse University\u2019s Academic Integrity Policy reflects the high value that we, as a university community, place on honesty in academic work. The policy defines our expectations for academic honesty and holds students accountable for the integrity of all work they submit. Students should understand that it is their responsibility to learn about course-specific expectations, as well as about university-wide academic integrity expectations. The policy governs appropriate citation and use of sources, the integrity of work submitted in exams and assignments, and the veracity of signatures on attendance sheets and other verification of participation in class activities. The policy also prohibits students from submitting the same work in more than one class without receiving written authorization in advance from both instructors. Under the policy, students found in violation are subject to grade sanctions determined by the course instructor and non-grade sanctions determined by the School or College where the course is offered as described in the Violation and Sanction Classification Rubric. SU students are required to read an online summary of the University\u2019s academic integrity expectations and provide an electronic signature agreeing to abide by them twice a year during pre-term check-in on MySlice. Use of Blackboard This course involves the use of Syracuse University\u2019s Blackboard system as an online tool. The environment is composed of a number of elements that will help you be successful in both your current coursework and your lifelong learning opportunities. To access Blackboard, http://blackboard.syr.edu use your Syracuse University NetID & Password. This specific course will appear in your course list. To search for answers to your Blackboard questions, visit the Answers self-help knowledge https://answers.syr.edu/display/blackboard01/Blackboard . If you have problems logging in or need assistance with Blackboard, contact the ITS Service Center at: help@syr.edu or 315.443.2677. The Syracuse University Blackboard support team will assist you. Course Schedule Dates Topic (Click Link for Content and Assigned Readings) 8/28 - 9/3 Lesson 01: Introduction to Python Programming 9/4 - 9/10 9/4: Labor Day No Classes 9/6: Lesson 02: Input, Output, Variables and Types 9/11 - 9/17 Lesson 03: Conditionals 9/18 - 9/24 Lesson 04: Iterations 9/25 - 10/1 Lesson 05: User-defined Functions, Modules 10/2 - 10/8 Lesson 06: Strings and Text Processing 10/9 - 10/15 10/9: Fall Break No Classes 10/11: Exam 2 (E1) In Small Group 10/16 - 10/22 Lesson 07: File I/O and Persistence 10/23 - 10/29 Lesson 08: Lists 10/30 - 11/5 Lesson 09: Dictionaries and JSON 11/6 - 11/12 Lesson 10: HTTP Protocol and Network Programming 11/13 - 11/19 Lesson 11: Web API\u2019s 11/17: P1 Due 11/20 - 11/26 No Classes Thanksgiving Break 11/27 - 12/3 Lesson 12: Data Analysis with Pandas 12/4 - 12/10 Lesson 13: Data Visualization 12/11 - 12/18 12/11: Exam 2 (E2) In Large Group 12/12: P2 Due (No Class Wed) 12/18 - 12/19 12/19: P3,P4 Due What\u2019s Due? Use this table to track the due dates of all graded work in this course. Dates and times are Eastern Time Zone. Date Due Time Due Gradebook Points Where What is Due? 8/29/2023 11:59 PM L01 3 Jupyterhub 01-Intro/LAB-Intro.ipynb 8/30/2023 11:59 PM S01 3 Jupyterhub 01-Intro/SmallGroup-Intro.ipynb 9/1/2023 11:59 PM H01 3 Jupyterhub 01-Intro/HW-Intro.ipynb 9/5/2023 11:59 PM L02 3 Jupyterhub 02-Variables/LAB-Variables.ipynb 9/6/2023 11:59 PM S02 3 Jupyterhub 02-Variables/SmallGroup-Variables.ipynb 9/8/2023 11:59 PM H02 3 Jupyterhub 02-Variables/HW-Variables.ipynb 9/12/2023 11:59 PM L03 3 Jupyterhub 03-Conditionals/LAB-Conditionals.ipynb 9/13/2023 11:59 PM S03 3 Jupyterhub 03-Conditionals/SmallGroup-Conditionals.ipynb 9/15/2023 11:59 PM H03 3 Jupyterhub 03-Conditionals/HW-Conditionals.ipynb 9/19/2023 11:59 PM L04 3 Jupyterhub 04-Iterations/LAB-Iterations.ipynb 9/20/2023 11:59 PM S04 3 Jupyterhub 04-Iterations/SmallGroup-Iterations.ipynb 9/22/2023 11:59 PM H04 3 Jupyterhub 04-Iterations/HW-Iterations.ipynb 9/26/2023 11:59 PM L05 3 Jupyterhub 05-Functions/LAB-Functions.ipynb 9/27/2023 11:59 PM S05 3 Jupyterhub 05-Functions/SmallGroup-Functions.ipynb 9/29/2023 11:59 PM H05 3 Jupyterhub 05-Functions/HW-Functions.ipynb 10/3/2023 11:59 PM L06 3 Jupyterhub 06-Strings/LAB-Strings.ipynb 10/4/2023 11:59 PM S06 3 Jupyterhub 06-Strings/SmallGroup-Strings.ipynb 10/6/2023 11:59 PM H06 3 Jupyterhub 06-Strings/HW-Strings.ipynb 10/11/2023 11:59 PM E1 45 Small Group E1: Exam 1 (Focus on Lessons 01-06) 10/17/2023 11:59 PM L07 3 Jupyterhub 07-Files/LAB-Files.ipynb 10/18/2023 11:59 PM S07 3 Jupyterhub 07-Files/SmallGroup-Files.ipynb 10/20/2023 11:59 PM H07 3 Jupyterhub 07-Files/HW-Files.ipynb 10/24/2023 11:59 PM L08 3 Jupyterhub 08-Lists/LAB-Lists.ipynb 10/25/2023 11:59 PM S08 3 Jupyterhub 08-Lists/SmallGroup-Lists.ipynb 10/27/2023 11:59 PM H08 3 Jupyterhub 08-Lists/HW-Lists.ipynb 10/31/2023 11:59 PM L09 3 Jupyterhub 09-Dictionaries/LAB-Dictionaries.ipynb 11/1/2023 11:59 PM S09 3 Jupyterhub 09-Dictionaries/SmallGroup-Dictionaries.ipynb 11/3/2023 11:59 PM H09 3 Jupyterhub 09-Dictionaries/HW-Dictionaries.ipynb 11/7/2023 11:59 PM L10 3 Jupyterhub 10-HTTP/LAB-HTTP.ipynb 11/8/2023 11:59 PM S10 3 Jupyterhub 10-HTTP/SmallGroup-HTTP.ipynb 11/10/2023 11:59 PM H10 3 Jupyterhub 10-HTTP/HW-HTTP.ipynb 11/14/2023 11:59 PM L11 3 Jupyterhub 11-WebAPIs/LAB-WebAPIs.ipynb 11/15/2023 11:59 PM S11 3 Jupyterhub 11-WebAPIs/SmallGroup-WebAPIs.ipynb 11/17/2023 11:59 PM H11 3 Jupyterhub 11-WebAPIs/HW-WebAPIs.ipynb 11/17/2023 11:59 PM P1 0 Jupyterhub project/P1.ipynb 11/28/2023 11:59 PM L12 3 Jupyterhub 12-Pandas/LAB-Pandas.ipynb 11/29/2023 11:59 PM S12 3 Jupyterhub 12-Pandas/SmallGroup-Pandas.ipynb 12/1/2023 11:59 PM H12 3 Jupyterhub 12-Pandas/HW-Pandas.ipynb 12/5/2023 11:59 PM L13 3 Jupyterhub 13-Visualization/LAB-Visualization.ipynb 12/6/2023 11:59 PM S13 3 Jupyterhub 13-Visualization/SmallGroup-Visualization.ipynb 12/8/2023 11:59 PM H13 3 Jupyterhub 13-Visualization/HW-Visualization.ipynb 12/11/2023 11:59 PM E2 45 Large Group E2: Exam 2 (Focus on Lessons 07-13) 12/12/2023 11:59 PM P2 0 Jupyterhub project/P2.ipynb 12/19/2023 11:59 PM P3 0 Jupyterhub project/P3.ipynb 12/19/2023 11:59 PM P4 49 Jupyterhub project/P4.ipynb Page last revised on: 2023-09-11","title":"Syllabus"},{"location":"syllabus/#ist256-syllabus-fall-2023","text":"","title":"IST256 Syllabus Fall 2023"},{"location":"syllabus/#course-information","text":"IST256: Applications Programming for Information Systems","title":"Course Information"},{"location":"syllabus/#audience-ist256-or-ist356","text":"This course is for students who are new to computer programming yet desire to learn how it applies to our everyday lives. IST256 is for students with little to no programming experience. The course content is 75% python fundamentals and 25% python for data analytics. IST356 is for students with prior programming experience. The course content is 25% python fundamentals and 75% python for data analytics.","title":"Audience: IST256 or IST356?"},{"location":"syllabus/#catalog-description","text":"Structured program design, development testing, implementation, and documentation of common information system applications using structured programming languages. Lectures and laboratory.","title":"Catalog Description"},{"location":"syllabus/#description","text":"Due to the prevalence of technology in our lives, learning to program has become the critical skill of the 21st century. Students will learn practical applications of computer programming such as how to automate tasks, manipulate data and solve problems applicable to almost any academic discipline.","title":"Description"},{"location":"syllabus/#learning-outcomes","text":"At the end of the course, students will be able to: Analyze complex problems by thinking computationally and systematically. Solve practical, real-world problems using a modern computer programming language.. Demonstrate the ability to read, write, discuss and code confidently. Understand how to code in teams, collaborate with others and manage source code. Acquire new programming knowledge independently.","title":"Learning Outcomes"},{"location":"syllabus/#large-group-and-recitation-sections","text":"Every student in IST256 is assigned to the main section M001, then one of the recitation sections. You are required to attend both sections every week. Your recitation instructor is responsible for your grades. SU Section Class # Type Professor Professor Email Meeting Day/Time Location / Instruction Mode M001 16592 Main Section Michael A Fudge Jr mafudge@syr.edu Mondays 3:45pm - 5:05pm Watson Theater M002 16600 Recitation Yuheun Kim ykim72@syr.edu Wednesdays 2:15pm - 3:35pm 115B Lyman Hall M003 20487 Recitation Angela Usha Ramnarine-Rieks auramnar@syr.edu Wednesdays 3:45pm - 5:05pm 101 Huntington Hall M004 16601 Recitation Daniel V Smith dvsmith@syr.edu Wednesdays 5:15pm - 6:35pm 350 Newhouse II M005 16602 Recitation Daniel V Smith dvsmith@syr.edu Wednesdays 3:45pm - 5:05pm 340 Newhouse II M006 20488 Recitation Deborah L Nosky dlnosky@syr.edu Wednesdays 3:45pm - 5:05pm 243A Hinds Hall","title":"Large Group and Recitation Sections"},{"location":"syllabus/#office-hours","text":"Office hours are for asking questions, clearing up doubts and misunderstandings in the the coursework and getting advice / guidance on labs and homework. Please to not expect to be tutored during office hours, and please do not work on your homework during our office hours. Each of your instructor\u2019s Office Hours will be posted in Blackboard. If you require tutoring, please see the getting help section below.","title":"Office Hours"},{"location":"syllabus/#understanding-approach-used-in-this-course","text":"Learning to program a computer does not come easy for most people. Decades of teaching programming to students like yourself has taught me it requires time, patience, practice and a well-established routine. This is not unlike the same routine required to learn a foreign language or musical instrument. There are times to practice and then times to demonstrate what you have learned.","title":"Understanding Approach Used in this Course"},{"location":"syllabus/#spaced-and-repetitive-practice","text":"For better or worse, this course grading is designed to force you to practice. There are various activities due each week: readings, labs, and in-class / out-of-class homework activities. These are designed to expose you to programming little each day rather than binging the content once a week. Consuming the material this way gives you multiple points of exposure and most importantly time to process. Practice activities are formative assessments. This means being correct carries the same weight as explaining your struggles when you know you are not correct and seeking help when you need it.","title":"Spaced and Repetitive Practice"},{"location":"syllabus/#building-habit-through-routine","text":"Another thing we do to help you to be successful is to impose a routine upon you. The course material is conceptually difficult so we try to remove some of the logistics from learning by providing the same structure week to week: Before the main section lecture you are exposed to the topic through reading and video assignments . The focus is on understanding the concepts. During the main section lecture you observe and ask questions. You do not need write code at this point. The focus is on reading code, understanding the concepts as applied through code, learning how the code executes, and asking questions. The lab assignments help you to practice writing code for the first time. This is done in a guided fashion. You are given short, specific problems to solve with code. For each lab, a guidance video is provided to those who require it. The completed lab is submitted as evidence that you practiced and include what you have learned. During your recitation , we focus on problem solving and writing solutions with code. The problem at this phase are similar complexity as the homework. At this point every student should be writing code, learning to get comfortable writing code and troubleshooting problems. Code written in Recitation must be turned in for a participation grade. Finally, the homework assignments are your opportunity to demonstrate you can code a solution to a problem on your own. Guidance is provided as to how to approach the problem. Homework assignments are a form of practice so it is expected students will explain what they learned or are still struggling to conceptualize. Expressing your thoughts on the learning experience is an import part of learning itself.","title":"Building Habit Through Routine"},{"location":"syllabus/#summative-assessments","text":"Summative assessments are no longer about practice. They are about measuring what you have learned. There are two types of summative assessments in this course exams and a project . There are exams at milestones throughout the course. The project demonstrates you can learn to code independently, then explain your solution to another.","title":"Summative Assessments"},{"location":"syllabus/#main-session-expectations-mondays","text":"The Monday\u2019s Large group session, section M001 in a large lecture hall. Because it can be intimidating to ask questions in this forum, you are encouraged to use the class chat offered for this course. The first slide at the beginning of large group will explain how to access the class chat. You are welcome, and encouraged to ask questions or for clarification of concepts during the lecture. You will be expected to engage in class by participating in class-wide polls, quizzes and surveys. Your responses are not graded but they are recorded as a means to measure your participation and engagement in class. Students who do not participate are noted and will be flagged for poor participation in orange success. You are encouraged to not try to code as I code, especially if you are a beginner. Instead, watch and ask questions about what you see and experience. It\u2019s far too early for most learners to try and code at this point, and there will be opportunities to do that in small group. Instead you should take nodes and ask questions. Except for the homework solution, the code I write will be made available to you after class.","title":"Main Session Expectations (Mondays)"},{"location":"syllabus/#recitation-expectations-wednesdays","text":"Recitation sessions meet with a fraction of the class. Here you will practice programming and algorithmic problem solving. You are expected to bring your fully-charged laptop to class! You will need to use it to complete in-class exercises. If you do not have your laptop, then you are not prepared for class. You will be expected to participate in class. This includes sharing your thoughts, ideas, and computer code when you are asked. Some of you might be hesitant to do this, but you need to get over it for your own benefit. Nobody starts out programming as an expert. It takes practice, experimentation, and repeated failure to get it. Please be respectful of your instructor and classmates. You are not competing against each other, you are a community. Not everyone learns at the same pace and we should be kind and respectful to our classmates who struggle.","title":"Recitation Expectations (Wednesdays)"},{"location":"syllabus/#course-resources","text":"","title":"Course Resources"},{"location":"syllabus/#course-website","text":"Our course website it located at https://ist256.com or https://ist256.github.io . The course website contains the syllabus, list of due dates, and links to readings, content, videos and tools used in the course.","title":"Course Website"},{"location":"syllabus/#jupyterhub","text":"Our programming environment is a private-cloud web application called Jupyter Hub. https://v2hub.ischool.syr.edu . This is the de-facto programming environment of the scientific community. All students have an account; use your SU Microsoft Account (NetID and password) to login. After you login you will see a library folder inside that folder is an ist256 folder. All of the course content (lecture slides, code samples, labs, homework) is available in this folder.","title":"Jupyterhub"},{"location":"syllabus/#textbooks","text":"The following text is required : Python for Everybody: Exploring Data In Python 3 by Charles Severance. https://www.py4e.com/book . The book is free and available in several formats from the URL provided. There are assigned readings which must be completed prior to each large group lecture. The reading can be found in the content section of the website and the course syllabus. In addition to the required reading the last 4 units have custom readings authored by your instructor. Here are some additional textbook recommendations . Consider these supplemental resources: Automate the Boring Stuff with Python: Practical Programming for Total Beginners by Al Sweigert https://automatetheboringstuff.com/ . Free online resource. A Byte of Python , https://www.gitbook.com/book/swaroopch/byte-of-python/details . Free online resource. Dive into Python , Mark Pilgrim http://getpython3.com/diveintopython3/ . Free online resource. Learn python the hard way , Zed Shaw http://learnpythonthehardway.org/book/ . Free online resource. Python Practice Book , Anad Chitpothu http://anandology.com/python-practice-book/index.html . Free online Resource. Programming In Python 3 , Zybooks https://www.zybooks.com/catalog/programming-in-python-3/ . Paid resource, approximately $60 for the semester.","title":"Textbooks"},{"location":"syllabus/#netid-google-and-microsoft-accounts","text":"This course will require you to use your Syracuse University provided Google and Microsoft Accounts. Both accounts are based on your NetId. Your Google account is netid@g.syr.edu and your Microsoft Account is netid@syr.edu . Learn more: NetID: https://netid.syr.edu/ Microsoft Account: Login in with your SU email address and NetID password. SU Google Account: https://ols.syr.edu/google-account-for-syracuse-university/","title":"NetID, Google and Microsoft Accounts"},{"location":"syllabus/#3rd-party-services-used-in-this-course","text":"This course uses a variety of 3rd party services to supplement and enhance your learning experience. Here\u2019s a list of with links to the resources we will use in this course. It is expected you will know how to access each of these resources. Tool Purpose Link Notes Blackboard Announcements, Grades https://blackboard.syr.edu Sign in with your NetId JupyterHub Python Programming, Code Samples, Slides, Labs, HW. https://v2hub.ischool.syr.edu Sign in with your NetId Microsoft Teams Chat with classmates / Instructors. Virtual office hours. https://teams.ist256.com Sign in with your SU Microsoft Account Polley In-Class polling for large group sessions. https://poll.ist256.com Sign in with SU Microsoft Account Severance Textbook The popular \u201cPython for Everyone\u201d book. https://www.py4e.com/book Available in a variety of different formats. Zoom Videoconferencing tool we use for office hours and student support. https://zoom.us Access through Blackboard Please consult the Course Links section for details.","title":"3rd Party Services Used in This Course"},{"location":"syllabus/#bring-your-own-device","text":"This course uses the BYOD (Bring Your Own Device) model. For Large Group you need a device to ask and answer questions, basically to participate in group chat and polls (Polly). This can be a smartphone, tablet or laptop (Mac, Windows, or Chromebook). Do not try to code along in large group unless you are experienced. It is best to take notes and ask questions. For Recitation you need a device for which you can write code in the browser using Jupyter Hub. This should be a laptop computer (Mac, Windows or Chromebook). Since you will code in a web browser using the provided JupyterHub platform, the hardware requirements are minimal.","title":"Bring Your Own Device"},{"location":"syllabus/#tutoring","text":"The University offers free group tutoring for this course through the Center for Learning and Student Success (CLASS). Sign up for tutoring at: http://myt.syr.edu . For more information on individual and group tutoring sessions, please visit: https://class.syr.edu/academic-support/","title":"Tutoring"},{"location":"syllabus/#methods-of-evaluation","text":"","title":"Methods of Evaluation"},{"location":"syllabus/#grading","text":"This course uses a well thought out mix of formative, summative, in-class and out-of-class instruments to assess your knowledge acquisition. A variety of techniques are used to cater to students of different learning styles and assess the course learning outcomes. Assessment Name Blackboard Gradebook Type Learning Outcomes Quantity Points Each Points Total Pct Of Total Grade How Do I Turn it in? Exams E1 - E2 Assessment 1,2,3 2 45 90 35% Taken in Class Project P1 - P4 Assessment 1,2,3,5 1 49 49 20% Project folder on Jupyterhub Class Coding Labs L01 - L13 Practice 1,2,3,4 13 3 39 15% Run the submission script at end of the Lab in Jupyterhub Homework H01 - H13 Practice 1,2,3,4 13 3 39 15% Run the submission script at end of the Homework in Jupyterhub RecitationCode S01 - S13 Practice 1,2,3 13 3 39 15% Run the submission script at the end of recitation TOTAL 256 For a comprehensive list due dates and times for all assignments, consult the What\u2019s Due? section of the Course Schedule .","title":"Grading"},{"location":"syllabus/#exams-e1-e2","text":"Exams are high-stakes, summative assessments. They measure the individual\u2019s ability to recall, understand, and apply the course material. They are one of two instruments in this course which measures your mastery of the learning outcomes. There will be 2 exams in the course. Each exam focuses on specific lessons, but due to the nature of the course material, all exams are cumulative. Exams are issued in class. Exams are closed book. You will have 60 minutes to complete 45 exam questions. Students can bring a one page cheat sheet with typed or hand written notes and/or code samples. Questions consist of multiple choice, fill-in-the blank, and short-answer. If you require a special testing accommodation, you should schedule to take the exam in the CDS testing center.","title":"Exams (E1 - E2)"},{"location":"syllabus/#project-p1-p4","text":"The project is the other high-stakes summative assessment. The goal of the project is to demonstrate your ability as an individual to program something novel, useful and innovative in Python. It should represent an accurate culmination of what you have learned in the course. You will work on the project individually, be expected to produce working code, and be able to explain it at both a high and detailed level. The project is divided into 4 phases; due dates are posted on the course schedule. You will receive feedback and advice after the first two deliverables; a project grade after the final deliverable. Each project phase must be submitted on Jupyterhub using the provided submission notebook. Late submissions are not accepted. We need time to grade. The What\u2019s Due section of the syllabus outlines the two exam dates.","title":"Project (P1 - P4)"},{"location":"syllabus/#project-phases","text":"Phase Name Deliverables P1 Ideation Outline the specific goals and objectives of your project; include evidence of its feasibility by including citations of resources you will use to complete the code. P2 Beta Version Create a first working draft of the completed program i.e. the \u201cBeta\u201d version; Provide live demo of running program to your Recitation instructor for feedback. P3 Final Version Final version of working code; Instructor feedback taken into consideration; Improvements to achieve the desired grade. P4 Demo and Reflection Pitch / Demo video of running project program. Video reflection;","title":"Project Phases"},{"location":"syllabus/#criteria-for-project-grade","text":"Complete all project deliverables on time, and to satisfaction as per the requirements. Clearly demonstrate through code 3 things you learned beyond what was taught in class. This can be a new API, module, aspect of or aspect of the Python language itself. This goes beyond just use, you must identify and explain. Take instructor feedback into consideration. Journal as your work on your project, recording time and tasks. In addition, there is a grade limit based on the number of lines of student-written code that is used in the project. Note: copies of code from class or elsewhere do not count. This must be code you wrote yourself that directly impacts the project\u2019s behavior. Lines of student-written code in the project Maximum Possible grade 200 or more A+ 100 to 200 B+ Under 100 C+","title":"Criteria for Project Grade"},{"location":"syllabus/#grading-scale-for-project","text":"Finally, you are assigned a letter grade for your project. This letter grade is translated to a number of points based on this table. Project Grade Assigned Points A+ 49 A 47 A- 45 B+ 42 B 40 B- 37 C+ 35 C 32 C- 30 D+ 27 D 25 D- 20 F 0 Specifics on the project as well as details of each deliverable can be found under your project folder in Jupyterhub.","title":"Grading Scale For Project"},{"location":"syllabus/#class-coding-labs-l01-l13","text":"Each week there will be an out-of-class hands-on lab programming activity. The purpose of the lab is to provide guided, hands-on programming practice. Labs are your first opportunity to get your hands on a keyboard and start programming. This is a low-stakes assessment, formative assessment. The What\u2019s Due section of the syllabus identifies the lab you should complete. You can find the lab activity on JupyterHub. This activity must be completed and turned submitted by the due date. You may work alone or with a partner as you complete the lab. If you work with another, you should both complete the lab individually, and you should make a note of who your lab partner was when you completed your work. As to not draw attention to a potential academic integrity violation. If you are having difficulty completing the lab, you are welcome to review the lab walk-through video which guide you through the more difficult parts of the lab. You are encouraged to only consult the walk-through when you are stuck.","title":"Class Coding Labs (L01 - L13)"},{"location":"syllabus/#rubric-for-class-coding-labs","text":"Lab Criteria Definitions: Code Correct means all You Code sections of the lab are correct. Code Complete means all You Code sections have an honest attempt to code the problem at hand. Please note this does not imply the code is correct. If the code is not correct, there is an adequate reflection with student questions. Cells Executed means all code cells in the lab display evidence they were executed in your lab submission. Metacognition Complete means the student made an honest effort to answer the open-ended questions in the lab adequately conveying what you have learned and what still confuses you. This should be evident in the work you have done to complete the lab. We value reflection. It is important to the learning process. Lab Criteria Assigned Grade All 4 criteria met 3 3 criteria met 2 2 criteria met 1 Less than 2 criteria met 0","title":"Rubric for Class Coding Labs"},{"location":"syllabus/#homework-h01-h13","text":"Practice makes perfect. Each week you will be assigned homework to complete outside of class. The goal of the homework is practice problem solving with code independently. Throughout the process you should take inventory of your abilities with respect to the material. While it is admirable to get the code correct, that is not the evaluation criteria nor is it the purpose of the homework. You should use the homework as a personal gauge for how well you are grasping the material. You can find the the homework assignments on JupyterHub. The What\u2019s Due section of the syllabus identifies the homework assignment you should complete. Homework are individual assignments . You can collaborate on strategy but you must must work alone on the assignment. You must be able to explain the code you write, or it will be considered an academic integrity violation. It\u2019s not about getting it right, but it is about making an honest self-assessment! For each homework there is an advice video which provides hints and tips for how you can approach the homework assignment. You are encouraged to only consult the video when you are having difficulty with the homework. If you get assistance from somewhere else, such as online, or someone else such as a tutor, or the an AI assistant you must divulge that in your submission or it will be considered an academic integrity violation.","title":"Homework (H01 - H13)"},{"location":"syllabus/#rubric-for-homework","text":"Homework Criteria Definitions: Code Correct means an honest attempt was made at a solution and the solution is correct. For incorrect solutions, the code runs, might not be correct, but there is some explanation in the reflection. Code Well Written means your code is easy to understand, modular in nature, has aptly named variables, was programmed in the style we learned in class, and demonstrates what you learned that week. Problem Analysis Complete problem analysis was complete, identifying the problem\u2019s inputs, outputs, and algorithm. An outline of the step-by-step process for how the program should behave. Questions Complete means the student made an honest effort to answer the open-ended questions in the lab. Reflection Complete means the student completed their code reflection, discussing their experiences with completing the assignment. This should provide insight as to how the work was done touching upon struggles, how you got it done, what was learned in the process. Homework Criteria Assigned Grade All 5 criteria met 3 4 criteria met 2 3 criteria met 1 Less than 3 criteria met 0","title":"Rubric for Homework"},{"location":"syllabus/#recitation-code-assignment-s01-s13","text":"Your recitation professor will measure attendance and participation each session through you turning in your recitation code activity. This is the code you work on in class with your classmates. If you are not in class, you will not recieve credit. The specific criteria is entirely at the discretion of your instructor, but most likely consists participating in the programming assignment completed in class.","title":"Recitation Code Assignment (S01 - S13)"},{"location":"syllabus/#grading-scale-for-final-grade","text":"We use the following grading scale for translating your total points earned into a letter grade to be submitted to the University registrar. Student Achievement Total Points Earned Registrar Grade Grade Points Mastery 243 - 256 A 4.000 230 - 242 A- 3.666 Satisfactory 217 - 229 B+ 3.333 204 - 216 B 3.000 192 - 203 B- 2.666 Low Passing 179 - 191 C+ 2.333 166 - 178 C 2.000 153 - 165 C- 1.666 Unsatisfactory 128 - 152 D 1.000 0 - 127 F 0.000","title":"Grading Scale For Final Grade"},{"location":"syllabus/#course-specific-policies","text":"","title":"Course Specific Policies"},{"location":"syllabus/#due-dates","text":"Late work is not accepted. Due to the formative nature of work in the course (practice with timely feedback), it does not make sense to accept late work. Due dates are posted on the Syllabus in the course schedule section, specifically What\u2019s Due? . Due dates are also posted in Blackboard. In order to provide timely and relevant feedback, no late work is accepted. Exceptions will only be made under extreme circumstances with supporting University documentation of illness or personal reasons.","title":"Due Dates"},{"location":"syllabus/#extra-credit","text":"No extra credit is offered in this course. It is not necessary given a good portion of the work in this course is formative assessment. Try and reflect upon your learning. This is what we ask, and will yield the highest marks on the formative assessments.","title":"Extra Credit"},{"location":"syllabus/#course-withdraw","text":"Only the main section instructor can sign a withdraw petition. We will only sign a withdraw from this course based on poor academic performance (F grade). You can always re-take the course and replace your failing grade with a passing grade. If you are putting in the time and effort it is very difficult to fail this course in the first place. This reserves course withdraws for their original intended purpose - extreme circumstances with supporting University documentation of illness or personal reasons.","title":"Course Withdraw"},{"location":"syllabus/#use-of-ai-assistants","text":"It is my opinion that using AI assistants such as ChatGPT to help you understand and write code is extremely valuable to the learning process. To provide equitable access to AI, I\u2019ve created a Jupyter plugin, %%pybot which talks to Chat GPT through Jupyterhub. You are welcome to use it in this course. When addressing the bounds of academic integrity, treat the AI assistant as you would your personal tutor. You would not copy a tutor\u2019s code and present it as your own, as that\u2019s a clear violation of academic integrity. It is expected you will the outputs from AI similarly. When in doubt, ASK!","title":"Use of AI Assistants"},{"location":"syllabus/#course-honor-code-academic-integrity","text":"What Does Academic Integrity Mean In This Course? The course honor code represents our commitment to Academic Integrity in a programming course. I drafted the class honor code to avoid academic negligence - situations where students are unaware that their actions are actually a form of cheating. Our honor code remedies this problem by clearly stating the expectations of Academic Integrity for this course. It states: All work is my own . Answers on all student work, assignments (labs, homework, problem sets, projects, papers, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) are my own individual work (except where collaboration is explicitly allowed and disclosed). In the case where collaboration is permitted I will only collaborate within my team. Your own work means it manifests your own thoughts and ideas, not someone else\u2019s. AI is included in the \u201csomeone else.\u201d I will not share answers. I will not make answers (either my own or the professor\u2019s) to work, assignments (labs, problem sets, projects, papers, homework, etc\u2026) and assessments (quizzes, exams, tests, etc\u2026) available to anyone else in or out of class. This includes posting them on the web / chegg / course hero, or sharing them in test banks. I will not misrepresent my ability. I will not engage in any activity which misrepresents or falsifies my knowledge of the subject matter and therefore improves my grade dishonestly. This includes unsanctioned test aids, copying homework, and assistance from unapproved sources outside of class. This includes passing off AI output as your own work. I will give credit. I will always pay attribution to my sources, and not misrepresent the works of others as my own. If you get code from the internet, a tutor, or an AI assistant, you must cite it like you would any source in an academic paper. I accept the honor code and its consequences. I understand and accept that that all work I submit is subject to the honor code, and if I violate this honor code I my instructor is obligated to report me to the University\u2019s office of Academic Integrity. This can be easily summarized as: If code did not originate from you, you must clearly disclose where it came from. When in doubt, ask. When unsure, disclose openly. Most students who get into trouble are trying to hide their academic dishonesty. Don\u2019t do that. We will catch you easily.","title":"Course Honor Code - Academic Integrity"},{"location":"syllabus/#sanctions-for-violations-of-academic-integrity","text":"Oops. I violated academic integrity. What now? All suspected academic integrity violation will be reported to the university\u2019s office of academic integrity. Proposed sanction for violations of a low-stakes assessment such as a homework assignment or lab, is a grade of zero . Proposed sanction for any violation on a summative assessment such as an exam or the final project is a grade of F in the course .","title":"Sanctions for Violations of Academic Integrity"},{"location":"syllabus/#syracuse-university-policies","text":"Syracuse University has a variety of other policies designed to guarantee that students live and study in a community respectful of their needs and those of fellow students. Some of the most important of these concern: Diversity and Disability (ensuring that students are aware of their rights and responsibilities in a diverse, inclusive, accessible, bias-free campus community) can be found here, at: https://www.syracuse.edu/life/accessibilitydiversity/ . Religious Observances Notification and Policy (steps to follow to request accommodations for the observance of religious holidays) can be found here, at: http://supolicies.syr.edu/studs/religious_observance.htm Orange SUccess (tools to access a variety of SU resources, including ways to communicate with advisors and faculty members) can be found here, at: http://orangesuccess.syr.edu/getting-started-2 .","title":"Syracuse University Policies"},{"location":"syllabus/#disability-related-accommodations","text":"Syracuse University values diversity and inclusion; we are committed to a climate of mutual respect and full participation. There may be aspects of the instruction or design of this course that result in barriers to your inclusion and full participation in this course. I invite any student to meet with me to discuss strategies and/or accommodations (academic adjustments) that may be essential to your success and to collaborate with the Center for Disability Resources (CDR) in this process. If you would like to discuss disability-accommodations or register with CDR, please visit Center for Disability Resources. Please call (315) 443-4498 or email disabilityresources@syr.edu for more detailed information. CDR is responsible for coordinating disability-related academic accommodations and will work with the student to develop an access plan. Since academic accommodations may require early planning and generally are not provided retroactively, please contact CDR as soon as possible to begin this process. https://disabilityresources.syr.edu/","title":"Disability-Related Accommodations"},{"location":"syllabus/#university-attendance-policy","text":"Attendance in classes is expected in all courses at Syracuse University. Students are expected to arrive on campus in time to attend the first meeting of all classes for which they are registered. Students who do not attend classes starting with the first scheduled meeting may be academically withdrawn as not making progress toward degree by failure to attend. Instructors set course-specific policies for absences from scheduled class meetings in their syllabi. It is a federal requirement that students who do not attend or cease to attend a class to be reported at the time of determination by the faculty. Faculty should use \u201cESPR\u201d and \u201cMSPR\u201d in Orange Success to alert the Office of the Registrar and the Office of Financial Aid. A grade of NA is posted to any student for whom the Never Attended flag is raised in Orange SUccess. More information regarding Orange SUccess can be found here, at: http://orangesuccess.syr.edu/getting-started-2/ Students should also review the University\u2019s religious observance policy and make the required arrangements at the beginning of each semester","title":"University Attendance Policy"},{"location":"syllabus/#academic-integrity-policy","text":"Syracuse University\u2019s Academic Integrity Policy reflects the high value that we, as a university community, place on honesty in academic work. The policy defines our expectations for academic honesty and holds students accountable for the integrity of all work they submit. Students should understand that it is their responsibility to learn about course-specific expectations, as well as about university-wide academic integrity expectations. The policy governs appropriate citation and use of sources, the integrity of work submitted in exams and assignments, and the veracity of signatures on attendance sheets and other verification of participation in class activities. The policy also prohibits students from submitting the same work in more than one class without receiving written authorization in advance from both instructors. Under the policy, students found in violation are subject to grade sanctions determined by the course instructor and non-grade sanctions determined by the School or College where the course is offered as described in the Violation and Sanction Classification Rubric. SU students are required to read an online summary of the University\u2019s academic integrity expectations and provide an electronic signature agreeing to abide by them twice a year during pre-term check-in on MySlice.","title":"Academic Integrity Policy"},{"location":"syllabus/#use-of-blackboard","text":"This course involves the use of Syracuse University\u2019s Blackboard system as an online tool. The environment is composed of a number of elements that will help you be successful in both your current coursework and your lifelong learning opportunities. To access Blackboard, http://blackboard.syr.edu use your Syracuse University NetID & Password. This specific course will appear in your course list. To search for answers to your Blackboard questions, visit the Answers self-help knowledge https://answers.syr.edu/display/blackboard01/Blackboard . If you have problems logging in or need assistance with Blackboard, contact the ITS Service Center at: help@syr.edu or 315.443.2677. The Syracuse University Blackboard support team will assist you.","title":"Use of Blackboard"},{"location":"syllabus/#course-schedule","text":"Dates Topic (Click Link for Content and Assigned Readings) 8/28 - 9/3 Lesson 01: Introduction to Python Programming 9/4 - 9/10 9/4: Labor Day No Classes 9/6: Lesson 02: Input, Output, Variables and Types 9/11 - 9/17 Lesson 03: Conditionals 9/18 - 9/24 Lesson 04: Iterations 9/25 - 10/1 Lesson 05: User-defined Functions, Modules 10/2 - 10/8 Lesson 06: Strings and Text Processing 10/9 - 10/15 10/9: Fall Break No Classes 10/11: Exam 2 (E1) In Small Group 10/16 - 10/22 Lesson 07: File I/O and Persistence 10/23 - 10/29 Lesson 08: Lists 10/30 - 11/5 Lesson 09: Dictionaries and JSON 11/6 - 11/12 Lesson 10: HTTP Protocol and Network Programming 11/13 - 11/19 Lesson 11: Web API\u2019s 11/17: P1 Due 11/20 - 11/26 No Classes Thanksgiving Break 11/27 - 12/3 Lesson 12: Data Analysis with Pandas 12/4 - 12/10 Lesson 13: Data Visualization 12/11 - 12/18 12/11: Exam 2 (E2) In Large Group 12/12: P2 Due (No Class Wed) 12/18 - 12/19 12/19: P3,P4 Due","title":"Course Schedule"},{"location":"syllabus/#whats-due","text":"Use this table to track the due dates of all graded work in this course. Dates and times are Eastern Time Zone. Date Due Time Due Gradebook Points Where What is Due? 8/29/2023 11:59 PM L01 3 Jupyterhub 01-Intro/LAB-Intro.ipynb 8/30/2023 11:59 PM S01 3 Jupyterhub 01-Intro/SmallGroup-Intro.ipynb 9/1/2023 11:59 PM H01 3 Jupyterhub 01-Intro/HW-Intro.ipynb 9/5/2023 11:59 PM L02 3 Jupyterhub 02-Variables/LAB-Variables.ipynb 9/6/2023 11:59 PM S02 3 Jupyterhub 02-Variables/SmallGroup-Variables.ipynb 9/8/2023 11:59 PM H02 3 Jupyterhub 02-Variables/HW-Variables.ipynb 9/12/2023 11:59 PM L03 3 Jupyterhub 03-Conditionals/LAB-Conditionals.ipynb 9/13/2023 11:59 PM S03 3 Jupyterhub 03-Conditionals/SmallGroup-Conditionals.ipynb 9/15/2023 11:59 PM H03 3 Jupyterhub 03-Conditionals/HW-Conditionals.ipynb 9/19/2023 11:59 PM L04 3 Jupyterhub 04-Iterations/LAB-Iterations.ipynb 9/20/2023 11:59 PM S04 3 Jupyterhub 04-Iterations/SmallGroup-Iterations.ipynb 9/22/2023 11:59 PM H04 3 Jupyterhub 04-Iterations/HW-Iterations.ipynb 9/26/2023 11:59 PM L05 3 Jupyterhub 05-Functions/LAB-Functions.ipynb 9/27/2023 11:59 PM S05 3 Jupyterhub 05-Functions/SmallGroup-Functions.ipynb 9/29/2023 11:59 PM H05 3 Jupyterhub 05-Functions/HW-Functions.ipynb 10/3/2023 11:59 PM L06 3 Jupyterhub 06-Strings/LAB-Strings.ipynb 10/4/2023 11:59 PM S06 3 Jupyterhub 06-Strings/SmallGroup-Strings.ipynb 10/6/2023 11:59 PM H06 3 Jupyterhub 06-Strings/HW-Strings.ipynb 10/11/2023 11:59 PM E1 45 Small Group E1: Exam 1 (Focus on Lessons 01-06) 10/17/2023 11:59 PM L07 3 Jupyterhub 07-Files/LAB-Files.ipynb 10/18/2023 11:59 PM S07 3 Jupyterhub 07-Files/SmallGroup-Files.ipynb 10/20/2023 11:59 PM H07 3 Jupyterhub 07-Files/HW-Files.ipynb 10/24/2023 11:59 PM L08 3 Jupyterhub 08-Lists/LAB-Lists.ipynb 10/25/2023 11:59 PM S08 3 Jupyterhub 08-Lists/SmallGroup-Lists.ipynb 10/27/2023 11:59 PM H08 3 Jupyterhub 08-Lists/HW-Lists.ipynb 10/31/2023 11:59 PM L09 3 Jupyterhub 09-Dictionaries/LAB-Dictionaries.ipynb 11/1/2023 11:59 PM S09 3 Jupyterhub 09-Dictionaries/SmallGroup-Dictionaries.ipynb 11/3/2023 11:59 PM H09 3 Jupyterhub 09-Dictionaries/HW-Dictionaries.ipynb 11/7/2023 11:59 PM L10 3 Jupyterhub 10-HTTP/LAB-HTTP.ipynb 11/8/2023 11:59 PM S10 3 Jupyterhub 10-HTTP/SmallGroup-HTTP.ipynb 11/10/2023 11:59 PM H10 3 Jupyterhub 10-HTTP/HW-HTTP.ipynb 11/14/2023 11:59 PM L11 3 Jupyterhub 11-WebAPIs/LAB-WebAPIs.ipynb 11/15/2023 11:59 PM S11 3 Jupyterhub 11-WebAPIs/SmallGroup-WebAPIs.ipynb 11/17/2023 11:59 PM H11 3 Jupyterhub 11-WebAPIs/HW-WebAPIs.ipynb 11/17/2023 11:59 PM P1 0 Jupyterhub project/P1.ipynb 11/28/2023 11:59 PM L12 3 Jupyterhub 12-Pandas/LAB-Pandas.ipynb 11/29/2023 11:59 PM S12 3 Jupyterhub 12-Pandas/SmallGroup-Pandas.ipynb 12/1/2023 11:59 PM H12 3 Jupyterhub 12-Pandas/HW-Pandas.ipynb 12/5/2023 11:59 PM L13 3 Jupyterhub 13-Visualization/LAB-Visualization.ipynb 12/6/2023 11:59 PM S13 3 Jupyterhub 13-Visualization/SmallGroup-Visualization.ipynb 12/8/2023 11:59 PM H13 3 Jupyterhub 13-Visualization/HW-Visualization.ipynb 12/11/2023 11:59 PM E2 45 Large Group E2: Exam 2 (Focus on Lessons 07-13) 12/12/2023 11:59 PM P2 0 Jupyterhub project/P2.ipynb 12/19/2023 11:59 PM P3 0 Jupyterhub project/P3.ipynb 12/19/2023 11:59 PM P4 49 Jupyterhub project/P4.ipynb Page last revised on: 2023-09-11","title":"What's Due?"}]}